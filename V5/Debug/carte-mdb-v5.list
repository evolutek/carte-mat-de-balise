
carte-mdb-v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cd4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006eb4  08006eb4  00007eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f9c  08006f9c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006f9c  08006f9c  00007f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fa4  08006fa4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fa4  08006fa4  00007fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fa8  08006fa8  00007fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006fac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f38  20000068  08007014  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005fa0  08007014  00008fa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3b3  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff2  00000000  00000000  0002544b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00029440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001338  00000000  00000000  0002ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023168  00000000  00000000  0002c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e657  00000000  00000000  0004f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da2f1  00000000  00000000  0006d82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147b20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007084  00000000  00000000  00147b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006e9c 	.word	0x08006e9c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006e9c 	.word	0x08006e9c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_DMA_Init+0x50>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ba:	4a11      	ldr	r2, [pc, #68]	@ (8000600 <MX_DMA_Init+0x50>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_DMA_Init+0x50>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_DMA_Init+0x50>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200f      	movs	r0, #15
 80005ec:	f001 f8ef 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005f0:	200f      	movs	r0, #15
 80005f2:	f001 f906 	bl	8001802 <HAL_NVIC_EnableIRQ>

}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000608:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 800060a:	4a20      	ldr	r2, [pc, #128]	@ (800068c <MX_FDCAN2_Init+0x88>)
 800060c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800060e:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 8000610:	2200      	movs	r2, #0
 8000612:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000614:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800061a:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000620:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 8000622:	2200      	movs	r2, #0
 8000624:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000626:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 8000628:	2200      	movs	r2, #0
 800062a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800062c:	4b16      	ldr	r3, [pc, #88]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 800062e:	2200      	movs	r2, #0
 8000630:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000632:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 8000634:	2210      	movs	r2, #16
 8000636:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000638:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 800063a:	2201      	movs	r2, #1
 800063c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800063e:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 8000640:	2202      	movs	r2, #2
 8000642:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000644:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 8000646:	2202      	movs	r2, #2
 8000648:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800064a:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 800064c:	2201      	movs	r2, #1
 800064e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000650:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 8000652:	2201      	movs	r2, #1
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000656:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 8000658:	2201      	movs	r2, #1
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800065c:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 800065e:	2201      	movs	r2, #1
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 800066a:	2200      	movs	r2, #0
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <MX_FDCAN2_Init+0x84>)
 8000676:	f001 fc11 	bl	8001e9c <HAL_FDCAN_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000680:	f000 fa6c 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000084 	.word	0x20000084
 800068c:	40006800 	.word	0x40006800

08000690 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09e      	sub	sp, #120	@ 0x78
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2250      	movs	r2, #80	@ 0x50
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f005 fdcc 	bl	800624e <memset>
  if(fdcanHandle->Instance==FDCAN2)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000738 <HAL_FDCAN_MspInit+0xa8>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d137      	bne.n	8000730 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fe2b 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80006dc:	f000 fa3e 	bl	8000b5c <Error_Handler>
    }

    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006e0:	4b16      	ldr	r3, [pc, #88]	@ (800073c <HAL_FDCAN_MspInit+0xac>)
 80006e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e4:	4a15      	ldr	r2, [pc, #84]	@ (800073c <HAL_FDCAN_MspInit+0xac>)
 80006e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ec:	4b13      	ldr	r3, [pc, #76]	@ (800073c <HAL_FDCAN_MspInit+0xac>)
 80006ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b10      	ldr	r3, [pc, #64]	@ (800073c <HAL_FDCAN_MspInit+0xac>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fc:	4a0f      	ldr	r2, [pc, #60]	@ (800073c <HAL_FDCAN_MspInit+0xac>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000704:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <HAL_FDCAN_MspInit+0xac>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000708:	f003 0302 	and.w	r3, r3, #2
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000710:	2360      	movs	r3, #96	@ 0x60
 8000712:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000720:	2309      	movs	r3, #9
 8000722:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000728:	4619      	mov	r1, r3
 800072a:	4805      	ldr	r0, [pc, #20]	@ (8000740 <HAL_FDCAN_MspInit+0xb0>)
 800072c:	f001 fd72 	bl	8002214 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000730:	bf00      	nop
 8000732:	3778      	adds	r7, #120	@ 0x78
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40006800 	.word	0x40006800
 800073c:	40021000 	.word	0x40021000
 8000740:	48000400 	.word	0x48000400

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b30      	ldr	r3, [pc, #192]	@ (800081c <MX_GPIO_Init+0xd8>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	4a2f      	ldr	r2, [pc, #188]	@ (800081c <MX_GPIO_Init+0xd8>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000766:	4b2d      	ldr	r3, [pc, #180]	@ (800081c <MX_GPIO_Init+0xd8>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <MX_GPIO_Init+0xd8>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	4a29      	ldr	r2, [pc, #164]	@ (800081c <MX_GPIO_Init+0xd8>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077e:	4b27      	ldr	r3, [pc, #156]	@ (800081c <MX_GPIO_Init+0xd8>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_PWM_GPIO_Port, LIDAR_PWM_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000790:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000794:	f001 fed8 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2110      	movs	r1, #16
 800079c:	4820      	ldr	r0, [pc, #128]	@ (8000820 <MX_GPIO_Init+0xdc>)
 800079e:	f001 fed3 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AU_Pin|LIDAR_SELECT_Pin;
 80007a2:	f248 0302 	movw	r3, #32770	@ 0x8002
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ac:	2302      	movs	r3, #2
 80007ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ba:	f001 fd2b 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 80007be:	2301      	movs	r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4619      	mov	r1, r3
 80007d0:	4813      	ldr	r0, [pc, #76]	@ (8000820 <MX_GPIO_Init+0xdc>)
 80007d2:	f001 fd1f 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIDAR_PWM_Pin;
 80007d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LIDAR_PWM_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f2:	f001 fd0f 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 80007f6:	2310      	movs	r3, #16
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4619      	mov	r1, r3
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_GPIO_Init+0xdc>)
 800080e:	f001 fd01 	bl	8002214 <HAL_GPIO_Init>

}
 8000812:	bf00      	nop
 8000814:	3720      	adds	r7, #32
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000
 8000820:	48000400 	.word	0x48000400

08000824 <_read>:
#include "main.h"

int _read(int file, char *ptr, int len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  (void)file;

  HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, 100);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	b29a      	uxth	r2, r3
 8000834:	2364      	movs	r3, #100	@ 0x64
 8000836:	68b9      	ldr	r1, [r7, #8]
 8000838:	4803      	ldr	r0, [pc, #12]	@ (8000848 <_read+0x24>)
 800083a:	f003 ff09 	bl	8004650 <HAL_UART_Receive>

  return len;
 800083e:	687b      	ldr	r3, [r7, #4]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20005a80 	.word	0x20005a80

0800084c <_write>:
int _write(int file, char *ptr, int len)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  (void)file;

  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 100);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	b29a      	uxth	r2, r3
 800085c:	2364      	movs	r3, #100	@ 0x64
 800085e:	68b9      	ldr	r1, [r7, #8]
 8000860:	4803      	ldr	r0, [pc, #12]	@ (8000870 <_write+0x24>)
 8000862:	f003 fe67 	bl	8004534 <HAL_UART_Transmit>

  return len;
 8000866:	687b      	ldr	r3, [r7, #4]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20005a80 	.word	0x20005a80

08000874 <HAL_UARTEx_RxEventCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE] = {0};
scan_data sample[UART_RX_BUFFER_SIZE * 2] = {0};
uint8_t half = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	807b      	strh	r3, [r7, #2]
	if (half == 0) {
 8000880:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <HAL_UARTEx_RxEventCallback+0x50>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d109      	bne.n	800089c <HAL_UARTEx_RxEventCallback+0x28>
		memcpy(sample, rx_buffer, Size);
 8000888:	887b      	ldrh	r3, [r7, #2]
 800088a:	461a      	mov	r2, r3
 800088c:	490e      	ldr	r1, [pc, #56]	@ (80008c8 <HAL_UARTEx_RxEventCallback+0x54>)
 800088e:	480f      	ldr	r0, [pc, #60]	@ (80008cc <HAL_UARTEx_RxEventCallback+0x58>)
 8000890:	f005 fd59 	bl	8006346 <memcpy>
		half = 1;
 8000894:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <HAL_UARTEx_RxEventCallback+0x50>)
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	e008      	b.n	80008ae <HAL_UARTEx_RxEventCallback+0x3a>
	}
	else {
		memcpy(sample, rx_buffer + UART_RX_BUFFER_SIZE, Size);
 800089c:	490c      	ldr	r1, [pc, #48]	@ (80008d0 <HAL_UARTEx_RxEventCallback+0x5c>)
 800089e:	887b      	ldrh	r3, [r7, #2]
 80008a0:	461a      	mov	r2, r3
 80008a2:	480a      	ldr	r0, [pc, #40]	@ (80008cc <HAL_UARTEx_RxEventCallback+0x58>)
 80008a4:	f005 fd4f 	bl	8006346 <memcpy>
		half = 0;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_UARTEx_RxEventCallback+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
	}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buffer, 1024);
 80008ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008b2:	4905      	ldr	r1, [pc, #20]	@ (80008c8 <HAL_UARTEx_RxEventCallback+0x54>)
 80008b4:	4807      	ldr	r0, [pc, #28]	@ (80008d4 <HAL_UARTEx_RxEventCallback+0x60>)
 80008b6:	f005 fad7 	bl	8005e68 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200058e8 	.word	0x200058e8
 80008c8:	200000e8 	.word	0x200000e8
 80008cc:	200008e8 	.word	0x200008e8
 80008d0:	200008e8 	.word	0x200008e8
 80008d4:	200059ec 	.word	0x200059ec

080008d8 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buffer, 1024);
 80008f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008f8:	4903      	ldr	r1, [pc, #12]	@ (8000908 <HAL_UART_RxCpltCallback+0x1c>)
 80008fa:	4804      	ldr	r0, [pc, #16]	@ (800090c <HAL_UART_RxCpltCallback+0x20>)
 80008fc:	f005 fab4 	bl	8005e68 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200000e8 	.word	0x200000e8
 800090c:	200059ec 	.word	0x200059ec

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//  uint8_t dma_buffer[0] = {0};
  descriptor desc_res = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	f8c3 2003 	str.w	r2, [r3, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000920:	f000 fde7 	bl	80014f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000924:	f000 f8cc 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000928:	f7ff ff0c 	bl	8000744 <MX_GPIO_Init>
  MX_DMA_Init();
 800092c:	f7ff fe40 	bl	80005b0 <MX_DMA_Init>
  MX_FDCAN2_Init();
 8000930:	f7ff fe68 	bl	8000604 <MX_FDCAN2_Init>
  MX_TIM2_Init();
 8000934:	f000 fab2 	bl	8000e9c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000938:	f000 fbf0 	bl	800111c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800093c:	f000 fc3a 	bl	80011b4 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8000940:	f000 fd52 	bl	80013e8 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 8000944:	f000 f946 	bl	8000bd4 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000948:	f000 fb02 	bl	8000f50 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LIDAR_PWM_GPIO_Port, LIDAR_PWM_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000956:	f001 fdf7 	bl	8002548 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (HAL_GPIO_ReadPin(AU_GPIO_Port, AU_Pin) != GPIO_PIN_RESET) {
 800095a:	2102      	movs	r1, #2
 800095c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000960:	f001 fdda 	bl	8002518 <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d0f7      	beq.n	800095a <main+0x4a>
		switch (state_lidar) {
 800096a:	4b47      	ldr	r3, [pc, #284]	@ (8000a88 <main+0x178>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b05      	cmp	r3, #5
 8000970:	d868      	bhi.n	8000a44 <main+0x134>
 8000972:	a201      	add	r2, pc, #4	@ (adr r2, 8000978 <main+0x68>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	08000991 	.word	0x08000991
 800097c:	080009bb 	.word	0x080009bb
 8000980:	080009d5 	.word	0x080009d5
 8000984:	08000a37 	.word	0x08000a37
 8000988:	08000a45 	.word	0x08000a45
 800098c:	08000a53 	.word	0x08000a53
		case STANDBY:
			// Start Lidar rotation (PWM pin -> on)
			printf("on\n\r");
 8000990:	483e      	ldr	r0, [pc, #248]	@ (8000a8c <main+0x17c>)
 8000992:	f005 fc07 	bl	80061a4 <iprintf>
			HAL_GPIO_WritePin(LIDAR_PWM_GPIO_Port, LIDAR_PWM_Pin, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800099c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a0:	f001 fdd2 	bl	8002548 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80009a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a8:	f000 fe14 	bl	80015d4 <HAL_Delay>

			state_lidar = REQUEST;
 80009ac:	4b36      	ldr	r3, [pc, #216]	@ (8000a88 <main+0x178>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
			printf("req\n\r");
 80009b2:	4837      	ldr	r0, [pc, #220]	@ (8000a90 <main+0x180>)
 80009b4:	f005 fbf6 	bl	80061a4 <iprintf>
			break;
 80009b8:	e04c      	b.n	8000a54 <main+0x144>

		case REQUEST:
			// Request
			desc_res = new_req(&huart1, SCAN);
 80009ba:	463b      	mov	r3, r7
 80009bc:	2220      	movs	r2, #32
 80009be:	4935      	ldr	r1, [pc, #212]	@ (8000a94 <main+0x184>)
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f8d1 	bl	8000b68 <new_req>

			state_lidar = DESCRIPTOR;
 80009c6:	4b30      	ldr	r3, [pc, #192]	@ (8000a88 <main+0x178>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	701a      	strb	r2, [r3, #0]
			printf("desc\n\r");
 80009cc:	4832      	ldr	r0, [pc, #200]	@ (8000a98 <main+0x188>)
 80009ce:	f005 fbe9 	bl	80061a4 <iprintf>
			break;
 80009d2:	e03f      	b.n	8000a54 <main+0x144>

		case DESCRIPTOR:
			// Read descriptor
			if (desc_res.start_flag1 != START_FLAG1) {
 80009d4:	783b      	ldrb	r3, [r7, #0]
 80009d6:	2ba5      	cmp	r3, #165	@ 0xa5
 80009d8:	d006      	beq.n	80009e8 <main+0xd8>
				state_lidar = UART_ERROR;
 80009da:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <main+0x178>)
 80009dc:	2205      	movs	r2, #5
 80009de:	701a      	strb	r2, [r3, #0]
				printf("error flag 1\n\r");
 80009e0:	482e      	ldr	r0, [pc, #184]	@ (8000a9c <main+0x18c>)
 80009e2:	f005 fbdf 	bl	80061a4 <iprintf>
			}
			else {
				state_lidar = SCANNING; // Everything fine !
				printf("scan\n\r");
			}
			break;
 80009e6:	e035      	b.n	8000a54 <main+0x144>
			else if (desc_res.start_flag2 != START_FLAG2) {
 80009e8:	787b      	ldrb	r3, [r7, #1]
 80009ea:	2b5a      	cmp	r3, #90	@ 0x5a
 80009ec:	d006      	beq.n	80009fc <main+0xec>
				state_lidar = UART_ERROR;
 80009ee:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <main+0x178>)
 80009f0:	2205      	movs	r2, #5
 80009f2:	701a      	strb	r2, [r3, #0]
				printf("error flag 2\n\r");
 80009f4:	482a      	ldr	r0, [pc, #168]	@ (8000aa0 <main+0x190>)
 80009f6:	f005 fbd5 	bl	80061a4 <iprintf>
			break;
 80009fa:	e02b      	b.n	8000a54 <main+0x144>
			else if (desc_res.res_length_mode != RES_LENGTH_MODE) {
 80009fc:	f8d7 3002 	ldr.w	r3, [r7, #2]
 8000a00:	4a28      	ldr	r2, [pc, #160]	@ (8000aa4 <main+0x194>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d006      	beq.n	8000a14 <main+0x104>
				state_lidar = UART_ERROR;
 8000a06:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <main+0x178>)
 8000a08:	2205      	movs	r2, #5
 8000a0a:	701a      	strb	r2, [r3, #0]
				printf("error reslength\n\r");
 8000a0c:	4826      	ldr	r0, [pc, #152]	@ (8000aa8 <main+0x198>)
 8000a0e:	f005 fbc9 	bl	80061a4 <iprintf>
			break;
 8000a12:	e01f      	b.n	8000a54 <main+0x144>
			else if (desc_res.type != DATA_TYPE) {
 8000a14:	79bb      	ldrb	r3, [r7, #6]
 8000a16:	2b81      	cmp	r3, #129	@ 0x81
 8000a18:	d006      	beq.n	8000a28 <main+0x118>
				state_lidar = UART_ERROR;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <main+0x178>)
 8000a1c:	2205      	movs	r2, #5
 8000a1e:	701a      	strb	r2, [r3, #0]
				printf("error type 1\n\r");
 8000a20:	4822      	ldr	r0, [pc, #136]	@ (8000aac <main+0x19c>)
 8000a22:	f005 fbbf 	bl	80061a4 <iprintf>
			break;
 8000a26:	e015      	b.n	8000a54 <main+0x144>
				state_lidar = SCANNING; // Everything fine !
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <main+0x178>)
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	701a      	strb	r2, [r3, #0]
				printf("scan\n\r");
 8000a2e:	4820      	ldr	r0, [pc, #128]	@ (8000ab0 <main+0x1a0>)
 8000a30:	f005 fbb8 	bl	80061a4 <iprintf>
			break;
 8000a34:	e00e      	b.n	8000a54 <main+0x144>

		case SCANNING:
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, &rx_buffer, UART_RX_BUFFER_SIZE);
 8000a36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a3a:	491e      	ldr	r1, [pc, #120]	@ (8000ab4 <main+0x1a4>)
 8000a3c:	4815      	ldr	r0, [pc, #84]	@ (8000a94 <main+0x184>)
 8000a3e:	f005 fa13 	bl	8005e68 <HAL_UARTEx_ReceiveToIdle_DMA>
			break;
 8000a42:	e007      	b.n	8000a54 <main+0x144>
	//			break;
		case UART_ERROR:
			break;

		default:
			printf("error\n\r");
 8000a44:	481c      	ldr	r0, [pc, #112]	@ (8000ab8 <main+0x1a8>)
 8000a46:	f005 fbad 	bl	80061a4 <iprintf>
			state_lidar = ERROR;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <main+0x178>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]

			break;
 8000a50:	e000      	b.n	8000a54 <main+0x144>
			break;
 8000a52:	bf00      	nop
		//			  HAL_UART_Transmit(&huart2, (uint8_t *)&res_data, (uint16_t)sizeof(res_data), 500);
		//			  HAL_Delay(100);
		//			  HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, 500);
		//			  HAL_Delay(100);
		//		  }
		if (HAL_GPIO_ReadPin(AU_GPIO_Port, AU_Pin) == GPIO_PIN_RESET) {
 8000a54:	2102      	movs	r1, #2
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5a:	f001 fd5d 	bl	8002518 <HAL_GPIO_ReadPin>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f47f af7a 	bne.w	800095a <main+0x4a>
			printf("off\n\r");
 8000a66:	4815      	ldr	r0, [pc, #84]	@ (8000abc <main+0x1ac>)
 8000a68:	f005 fb9c 	bl	80061a4 <iprintf>
			stop(&huart1);
 8000a6c:	4809      	ldr	r0, [pc, #36]	@ (8000a94 <main+0x184>)
 8000a6e:	f000 f8a3 	bl	8000bb8 <stop>
			HAL_GPIO_WritePin(LIDAR_PWM_GPIO_Port, LIDAR_PWM_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7c:	f001 fd64 	bl	8002548 <HAL_GPIO_WritePin>
			state_lidar = STANDBY;
 8000a80:	4b01      	ldr	r3, [pc, #4]	@ (8000a88 <main+0x178>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(AU_GPIO_Port, AU_Pin) != GPIO_PIN_RESET) {
 8000a86:	e768      	b.n	800095a <main+0x4a>
 8000a88:	200058e9 	.word	0x200058e9
 8000a8c:	08006eb4 	.word	0x08006eb4
 8000a90:	08006ebc 	.word	0x08006ebc
 8000a94:	200059ec 	.word	0x200059ec
 8000a98:	08006ec4 	.word	0x08006ec4
 8000a9c:	08006ecc 	.word	0x08006ecc
 8000aa0:	08006edc 	.word	0x08006edc
 8000aa4:	40000005 	.word	0x40000005
 8000aa8:	08006eec 	.word	0x08006eec
 8000aac:	08006f00 	.word	0x08006f00
 8000ab0:	08006f10 	.word	0x08006f10
 8000ab4:	200000e8 	.word	0x200000e8
 8000ab8:	08006f18 	.word	0x08006f18
 8000abc:	08006f20 	.word	0x08006f20

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b094      	sub	sp, #80	@ 0x50
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0318 	add.w	r3, r7, #24
 8000aca:	2238      	movs	r2, #56	@ 0x38
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f005 fbbd 	bl	800624e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ae6:	f001 fe3f 	bl	8002768 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000aea:	2322      	movs	r3, #34	@ 0x22
 8000aec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2340      	movs	r3, #64	@ 0x40
 8000af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afc:	2302      	movs	r3, #2
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b00:	2302      	movs	r3, #2
 8000b02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fed7 	bl	80028d0 <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000b28:	f000 f818 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b30:	2303      	movs	r3, #3
 8000b32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2102      	movs	r1, #2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 f9d5 	bl	8002ef4 <HAL_RCC_ClockConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b50:	f000 f804 	bl	8000b5c <Error_Handler>
  }
}
 8000b54:	bf00      	nop
 8000b56:	3750      	adds	r7, #80	@ 0x50
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <Error_Handler+0x8>

08000b68 <new_req>:
#include "rplidar.h"
#include <stdio.h>
#include <string.h>

/* Request -------------------------------------------------------------------*/
descriptor new_req(UART_HandleTypeDef *huart, const uint8_t cmd) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	4613      	mov	r3, r2
 8000b74:	71fb      	strb	r3, [r7, #7]
	request req_struct;
	descriptor desc_res;
	req_struct.start_flag = START_FLAG1;
 8000b76:	23a5      	movs	r3, #165	@ 0xa5
 8000b78:	773b      	strb	r3, [r7, #28]
	req_struct.command = cmd;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	777b      	strb	r3, [r7, #29]
	if (cmd > 0x80) {
		//todo
	}
	HAL_UART_Transmit(huart, (uint8_t *)&req_struct, sizeof(req_struct), 100);
 8000b7e:	f107 011c 	add.w	r1, r7, #28
 8000b82:	2364      	movs	r3, #100	@ 0x64
 8000b84:	2202      	movs	r2, #2
 8000b86:	68b8      	ldr	r0, [r7, #8]
 8000b88:	f003 fcd4 	bl	8004534 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, (uint8_t *)&desc_res, sizeof(desc_res), 1000);
 8000b8c:	f107 0114 	add.w	r1, r7, #20
 8000b90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b94:	2207      	movs	r2, #7
 8000b96:	68b8      	ldr	r0, [r7, #8]
 8000b98:	f003 fd5a 	bl	8004650 <HAL_UART_Receive>
	return desc_res;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	6010      	str	r0, [r2, #0]
 8000ba8:	8899      	ldrh	r1, [r3, #4]
 8000baa:	799b      	ldrb	r3, [r3, #6]
 8000bac:	8091      	strh	r1, [r2, #4]
 8000bae:	7193      	strb	r3, [r2, #6]
}
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <stop>:
	//HAL_UART_Receive(huart, pData, data_size, 1000);
	HAL_UART_Receive(huart, pData, 5, 1000);
}

/* No response */
void stop(UART_HandleTypeDef *huart) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
	new_req(huart, STOP);
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2225      	movs	r2, #37	@ 0x25
 8000bc4:	68f9      	ldr	r1, [r7, #12]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ffce 	bl	8000b68 <new_req>
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000bda:	4a1c      	ldr	r2, [pc, #112]	@ (8000c4c <MX_SPI1_Init+0x78>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000be0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000be4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bec:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000bee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bf2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000c02:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000c22:	2207      	movs	r2, #7
 8000c24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000c2e:	2208      	movs	r2, #8
 8000c30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_SPI1_Init+0x74>)
 8000c34:	f002 fdb6 	bl	80037a4 <HAL_SPI_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f7ff ff8d 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200058ec 	.word	0x200058ec
 8000c4c:	40013000 	.word	0x40013000

08000c50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ccc <HAL_SPI_MspInit+0x7c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d128      	bne.n	8000cc4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c76:	4a16      	ldr	r2, [pc, #88]	@ (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	4a10      	ldr	r2, [pc, #64]	@ (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ca2:	23f0      	movs	r3, #240	@ 0xf0
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc0:	f001 faa8 	bl	8002214 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	@ 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40013000 	.word	0x40013000
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cde:	4a0e      	ldr	r2, [pc, #56]	@ (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf6:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d0a:	f001 fdd1 	bl	80028b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <NMI_Handler+0x4>

08000d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <MemManage_Handler+0x4>

08000d34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d72:	f000 fc11 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d80:	4802      	ldr	r0, [pc, #8]	@ (8000d8c <DMA1_Channel5_IRQHandler+0x10>)
 8000d82:	f000 ff3c 	bl	8001bfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20005b14 	.word	0x20005b14

08000d90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d94:	4802      	ldr	r0, [pc, #8]	@ (8000da0 <USART1_IRQHandler+0x10>)
 8000d96:	f003 fd23 	bl	80047e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200059ec 	.word	0x200059ec

08000da4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dcc:	605a      	str	r2, [r3, #4]
  return 0;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_isatty>:

int _isatty(int file)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000de4:	2301      	movs	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b085      	sub	sp, #20
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	@ (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	@ (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f005 fa56 	bl	80062ec <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2001c000 	.word	0x2001c000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	20005950 	.word	0x20005950
 8000e74:	20005fa0 	.word	0x20005fa0

08000e78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <SystemInit+0x20>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e82:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <SystemInit+0x20>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <MX_TIM2_Init+0xb0>)
 8000ec2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ec6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ec8:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <MX_TIM2_Init+0xb0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <MX_TIM2_Init+0xb0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <MX_TIM2_Init+0xb0>)
 8000ed6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <MX_TIM2_Init+0xb0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <MX_TIM2_Init+0xb0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ee8:	4818      	ldr	r0, [pc, #96]	@ (8000f4c <MX_TIM2_Init+0xb0>)
 8000eea:	f002 fd06 	bl	80038fa <HAL_TIM_PWM_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ef4:	f7ff fe32 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	4811      	ldr	r0, [pc, #68]	@ (8000f4c <MX_TIM2_Init+0xb0>)
 8000f08:	f003 fa36 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000f12:	f7ff fe23 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f16:	2360      	movs	r3, #96	@ 0x60
 8000f18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <MX_TIM2_Init+0xb0>)
 8000f2e:	f002 fd3b 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000f38:	f7ff fe10 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <MX_TIM2_Init+0xb0>)
 8000f3e:	f000 f893 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	@ 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20005954 	.word	0x20005954

08000f50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f74:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <MX_TIM3_Init+0xac>)
 8000f76:	4a22      	ldr	r2, [pc, #136]	@ (8001000 <MX_TIM3_Init+0xb0>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <MX_TIM3_Init+0xac>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <MX_TIM3_Init+0xac>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <MX_TIM3_Init+0xac>)
 8000f88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <MX_TIM3_Init+0xac>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <MX_TIM3_Init+0xac>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f9a:	4818      	ldr	r0, [pc, #96]	@ (8000ffc <MX_TIM3_Init+0xac>)
 8000f9c:	f002 fcad 	bl	80038fa <HAL_TIM_PWM_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000fa6:	f7ff fdd9 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4810      	ldr	r0, [pc, #64]	@ (8000ffc <MX_TIM3_Init+0xac>)
 8000fba:	f003 f9dd 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000fc4:	f7ff fdca 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc8:	2360      	movs	r3, #96	@ 0x60
 8000fca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fd8:	463b      	mov	r3, r7
 8000fda:	220c      	movs	r2, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <MX_TIM3_Init+0xac>)
 8000fe0:	f002 fce2 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000fea:	f7ff fdb7 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fee:	4803      	ldr	r0, [pc, #12]	@ (8000ffc <MX_TIM3_Init+0xac>)
 8000ff0:	f000 f83a 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	@ 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200059a0 	.word	0x200059a0
 8001000:	40000400 	.word	0x40000400

08001004 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001014:	d10c      	bne.n	8001030 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_TIM_PWM_MspInit+0x5c>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101a:	4a11      	ldr	r2, [pc, #68]	@ (8001060 <HAL_TIM_PWM_MspInit+0x5c>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6593      	str	r3, [r2, #88]	@ 0x58
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_TIM_PWM_MspInit+0x5c>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800102e:	e010      	b.n	8001052 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <HAL_TIM_PWM_MspInit+0x60>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d10b      	bne.n	8001052 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <HAL_TIM_PWM_MspInit+0x5c>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103e:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <HAL_TIM_PWM_MspInit+0x5c>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6593      	str	r3, [r2, #88]	@ 0x58
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_TIM_PWM_MspInit+0x5c>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	40000400 	.word	0x40000400

08001068 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001088:	d11d      	bne.n	80010c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <HAL_TIM_MspPostInit+0xa8>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a20      	ldr	r2, [pc, #128]	@ (8001110 <HAL_TIM_MspPostInit+0xa8>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <HAL_TIM_MspPostInit+0xa8>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LEDS_Pin;
 80010a2:	2301      	movs	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010b2:	2301      	movs	r3, #1
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LEDS_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c0:	f001 f8a8 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010c4:	e020      	b.n	8001108 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <HAL_TIM_MspPostInit+0xac>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d11b      	bne.n	8001108 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <HAL_TIM_MspPostInit+0xa8>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001110 <HAL_TIM_MspPostInit+0xa8>)
 80010d6:	f043 0302 	orr.w	r3, r3, #2
 80010da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <HAL_TIM_MspPostInit+0xa8>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_LED_Pin;
 80010e8:	2380      	movs	r3, #128	@ 0x80
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 80010f8:	230a      	movs	r3, #10
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LIDAR_LED_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	@ (8001118 <HAL_TIM_MspPostInit+0xb0>)
 8001104:	f001 f886 	bl	8002214 <HAL_GPIO_Init>
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	@ 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000
 8001114:	40000400 	.word	0x40000400
 8001118:	48000400 	.word	0x48000400

0800111c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001120:	4b22      	ldr	r3, [pc, #136]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 8001122:	4a23      	ldr	r2, [pc, #140]	@ (80011b0 <MX_USART1_UART_Init+0x94>)
 8001124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001126:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800113a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800115e:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001164:	4811      	ldr	r0, [pc, #68]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 8001166:	f003 f995 	bl	8004494 <HAL_UART_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001170:	f7ff fcf4 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001174:	2100      	movs	r1, #0
 8001176:	480d      	ldr	r0, [pc, #52]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 8001178:	f004 fdfa 	bl	8005d70 <HAL_UARTEx_SetTxFifoThreshold>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001182:	f7ff fceb 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001186:	2100      	movs	r1, #0
 8001188:	4808      	ldr	r0, [pc, #32]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 800118a:	f004 fe2f 	bl	8005dec <HAL_UARTEx_SetRxFifoThreshold>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001194:	f7ff fce2 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	@ (80011ac <MX_USART1_UART_Init+0x90>)
 800119a:	f004 fdb0 	bl	8005cfe <HAL_UARTEx_DisableFifoMode>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011a4:	f7ff fcda 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200059ec 	.word	0x200059ec
 80011b0:	40013800 	.word	0x40013800

080011b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b8:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 80011ba:	4a23      	ldr	r2, [pc, #140]	@ (8001248 <MX_USART2_UART_Init+0x94>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ea:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f6:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fc:	4811      	ldr	r0, [pc, #68]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 80011fe:	f003 f949 	bl	8004494 <HAL_UART_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001208:	f7ff fca8 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120c:	2100      	movs	r1, #0
 800120e:	480d      	ldr	r0, [pc, #52]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 8001210:	f004 fdae 	bl	8005d70 <HAL_UARTEx_SetTxFifoThreshold>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800121a:	f7ff fc9f 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800121e:	2100      	movs	r1, #0
 8001220:	4808      	ldr	r0, [pc, #32]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 8001222:	f004 fde3 	bl	8005dec <HAL_UARTEx_SetRxFifoThreshold>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800122c:	f7ff fc96 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	@ (8001244 <MX_USART2_UART_Init+0x90>)
 8001232:	f004 fd64 	bl	8005cfe <HAL_UARTEx_DisableFifoMode>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800123c:	f7ff fc8e 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20005a80 	.word	0x20005a80
 8001248:	40004400 	.word	0x40004400

0800124c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b0a0      	sub	sp, #128	@ 0x80
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	2250      	movs	r2, #80	@ 0x50
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f004 ffee 	bl	800624e <memset>
  if(uartHandle->Instance==USART1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a57      	ldr	r2, [pc, #348]	@ (80013d4 <HAL_UART_MspInit+0x188>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d16a      	bne.n	8001352 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800127c:	2301      	movs	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4618      	mov	r0, r3
 800128a:	f002 f84f 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001294:	f7ff fc62 	bl	8000b5c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001298:	4b4f      	ldr	r3, [pc, #316]	@ (80013d8 <HAL_UART_MspInit+0x18c>)
 800129a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129c:	4a4e      	ldr	r2, [pc, #312]	@ (80013d8 <HAL_UART_MspInit+0x18c>)
 800129e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a4:	4b4c      	ldr	r3, [pc, #304]	@ (80013d8 <HAL_UART_MspInit+0x18c>)
 80012a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b49      	ldr	r3, [pc, #292]	@ (80013d8 <HAL_UART_MspInit+0x18c>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b4:	4a48      	ldr	r2, [pc, #288]	@ (80013d8 <HAL_UART_MspInit+0x18c>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012bc:	4b46      	ldr	r3, [pc, #280]	@ (80013d8 <HAL_UART_MspInit+0x18c>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LIDAR_TX_Pin|LIDAR_RX_Pin;
 80012c8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012da:	2307      	movs	r3, #7
 80012dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e8:	f000 ff94 	bl	8002214 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80012ec:	4b3b      	ldr	r3, [pc, #236]	@ (80013dc <HAL_UART_MspInit+0x190>)
 80012ee:	4a3c      	ldr	r2, [pc, #240]	@ (80013e0 <HAL_UART_MspInit+0x194>)
 80012f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80012f2:	4b3a      	ldr	r3, [pc, #232]	@ (80013dc <HAL_UART_MspInit+0x190>)
 80012f4:	2218      	movs	r2, #24
 80012f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f8:	4b38      	ldr	r3, [pc, #224]	@ (80013dc <HAL_UART_MspInit+0x190>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012fe:	4b37      	ldr	r3, [pc, #220]	@ (80013dc <HAL_UART_MspInit+0x190>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001304:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <HAL_UART_MspInit+0x190>)
 8001306:	2280      	movs	r2, #128	@ 0x80
 8001308:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800130a:	4b34      	ldr	r3, [pc, #208]	@ (80013dc <HAL_UART_MspInit+0x190>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001310:	4b32      	ldr	r3, [pc, #200]	@ (80013dc <HAL_UART_MspInit+0x190>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001316:	4b31      	ldr	r3, [pc, #196]	@ (80013dc <HAL_UART_MspInit+0x190>)
 8001318:	2220      	movs	r2, #32
 800131a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800131c:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <HAL_UART_MspInit+0x190>)
 800131e:	2200      	movs	r2, #0
 8001320:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001322:	482e      	ldr	r0, [pc, #184]	@ (80013dc <HAL_UART_MspInit+0x190>)
 8001324:	f000 fa88 	bl	8001838 <HAL_DMA_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800132e:	f7ff fc15 	bl	8000b5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a29      	ldr	r2, [pc, #164]	@ (80013dc <HAL_UART_MspInit+0x190>)
 8001336:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800133a:	4a28      	ldr	r2, [pc, #160]	@ (80013dc <HAL_UART_MspInit+0x190>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2025      	movs	r0, #37	@ 0x25
 8001346:	f000 fa42 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800134a:	2025      	movs	r0, #37	@ 0x25
 800134c:	f000 fa59 	bl	8001802 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001350:	e03b      	b.n	80013ca <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART2)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <HAL_UART_MspInit+0x198>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d136      	bne.n	80013ca <HAL_UART_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800135c:	2302      	movs	r3, #2
 800135e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4618      	mov	r0, r3
 800136a:	f001 ffdf 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_UART_MspInit+0x12c>
      Error_Handler();
 8001374:	f7ff fbf2 	bl	8000b5c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <HAL_UART_MspInit+0x18c>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137c:	4a16      	ldr	r2, [pc, #88]	@ (80013d8 <HAL_UART_MspInit+0x18c>)
 800137e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001382:	6593      	str	r3, [r2, #88]	@ 0x58
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <HAL_UART_MspInit+0x18c>)
 8001386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HAL_UART_MspInit+0x18c>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001394:	4a10      	ldr	r2, [pc, #64]	@ (80013d8 <HAL_UART_MspInit+0x18c>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139c:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <HAL_UART_MspInit+0x18c>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80013a8:	230c      	movs	r3, #12
 80013aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b8:	2307      	movs	r3, #7
 80013ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013c0:	4619      	mov	r1, r3
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c6:	f000 ff25 	bl	8002214 <HAL_GPIO_Init>
}
 80013ca:	bf00      	nop
 80013cc:	3780      	adds	r7, #128	@ 0x80
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40013800 	.word	0x40013800
 80013d8:	40021000 	.word	0x40021000
 80013dc:	20005b14 	.word	0x20005b14
 80013e0:	40020058 	.word	0x40020058
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80013ec:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_USB_PCD_Init+0x48>)
 80013ee:	4a11      	ldr	r2, [pc, #68]	@ (8001434 <MX_USB_PCD_Init+0x4c>)
 80013f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_USB_PCD_Init+0x48>)
 80013f4:	2208      	movs	r2, #8
 80013f6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <MX_USB_PCD_Init+0x48>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_USB_PCD_Init+0x48>)
 8001400:	2202      	movs	r2, #2
 8001402:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_USB_PCD_Init+0x48>)
 8001406:	2200      	movs	r2, #0
 8001408:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_USB_PCD_Init+0x48>)
 800140c:	2200      	movs	r2, #0
 800140e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_USB_PCD_Init+0x48>)
 8001412:	2200      	movs	r2, #0
 8001414:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_USB_PCD_Init+0x48>)
 8001418:	2200      	movs	r2, #0
 800141a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_USB_PCD_Init+0x48>)
 800141e:	f001 f8ab 	bl	8002578 <HAL_PCD_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001428:	f7ff fb98 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20005b74 	.word	0x20005b74
 8001434:	40005c00 	.word	0x40005c00

08001438 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b098      	sub	sp, #96	@ 0x60
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	2250      	movs	r2, #80	@ 0x50
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f004 ff00 	bl	800624e <memset>
  if(pcdHandle->Instance==USB)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a11      	ldr	r2, [pc, #68]	@ (8001498 <HAL_PCD_MspInit+0x60>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d11a      	bne.n	800148e <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001458:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800145c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800145e:	2300      	movs	r3, #0
 8001460:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	4618      	mov	r0, r3
 8001468:	f001 ff60 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8001472:	f7ff fb73 	bl	8000b5c <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_PCD_MspInit+0x64>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147a:	4a08      	ldr	r2, [pc, #32]	@ (800149c <HAL_PCD_MspInit+0x64>)
 800147c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001480:	6593      	str	r3, [r2, #88]	@ 0x58
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_PCD_MspInit+0x64>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001486:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800148e:	bf00      	nop
 8001490:	3760      	adds	r7, #96	@ 0x60
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40005c00 	.word	0x40005c00
 800149c:	40021000 	.word	0x40021000

080014a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014a0:	480d      	ldr	r0, [pc, #52]	@ (80014d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a4:	f7ff fce8 	bl	8000e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <LoopForever+0x6>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	@ (80014e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <LoopForever+0xe>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	@ (80014ec <LoopForever+0x16>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f004 ff13 	bl	80062f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014d2:	f7ff fa1d 	bl	8000910 <main>

080014d6 <LoopForever>:

LoopForever:
    b LoopForever
 80014d6:	e7fe      	b.n	80014d6 <LoopForever>
  ldr   r0, =_estack
 80014d8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014e4:	08006fac 	.word	0x08006fac
  ldr r2, =_sbss
 80014e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014ec:	20005fa0 	.word	0x20005fa0

080014f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_2_IRQHandler>

080014f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 f95b 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001502:	200f      	movs	r0, #15
 8001504:	f000 f80e 	bl	8001524 <HAL_InitTick>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	e001      	b.n	8001518 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001514:	f7ff fbde 	bl	8000cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001518:	79fb      	ldrb	r3, [r7, #7]

}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <HAL_InitTick+0x68>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d022      	beq.n	800157e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <HAL_InitTick+0x6c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <HAL_InitTick+0x68>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001544:	fbb1 f3f3 	udiv	r3, r1, r3
 8001548:	fbb2 f3f3 	udiv	r3, r2, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f966 	bl	800181e <HAL_SYSTICK_Config>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10f      	bne.n	8001578 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	d809      	bhi.n	8001572 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155e:	2200      	movs	r2, #0
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001566:	f000 f932 	bl	80017ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_InitTick+0x70>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e007      	b.n	8001582 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	e004      	b.n	8001582 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e001      	b.n	8001582 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000008 	.word	0x20000008
 8001590:	20000000 	.word	0x20000000
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <HAL_IncTick+0x1c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <HAL_IncTick+0x20>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a03      	ldr	r2, [pc, #12]	@ (80015b4 <HAL_IncTick+0x1c>)
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	20005e50 	.word	0x20005e50
 80015b8:	20000008 	.word	0x20000008

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	@ (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20005e50 	.word	0x20005e50

080015d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015dc:	f7ff ffee 	bl	80015bc <HAL_GetTick>
 80015e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015ec:	d004      	beq.n	80015f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_Delay+0x40>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015f8:	bf00      	nop
 80015fa:	f7ff ffdf 	bl	80015bc <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	429a      	cmp	r2, r3
 8001608:	d8f7      	bhi.n	80015fa <HAL_Delay+0x26>
  {
  }
}
 800160a:	bf00      	nop
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000008 	.word	0x20000008

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	@ (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	@ (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	@ (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	@ (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	@ 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	@ 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001798:	f7ff ff8e 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff29 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff40 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff90 	bl	800170c <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5f 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff33 	bl	800167c <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa4 	bl	8001774 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e08d      	b.n	8001966 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	4b47      	ldr	r3, [pc, #284]	@ (8001970 <HAL_DMA_Init+0x138>)
 8001852:	429a      	cmp	r2, r3
 8001854:	d80f      	bhi.n	8001876 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	4b45      	ldr	r3, [pc, #276]	@ (8001974 <HAL_DMA_Init+0x13c>)
 800185e:	4413      	add	r3, r2
 8001860:	4a45      	ldr	r2, [pc, #276]	@ (8001978 <HAL_DMA_Init+0x140>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	009a      	lsls	r2, r3, #2
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a42      	ldr	r2, [pc, #264]	@ (800197c <HAL_DMA_Init+0x144>)
 8001872:	641a      	str	r2, [r3, #64]	@ 0x40
 8001874:	e00e      	b.n	8001894 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	4b40      	ldr	r3, [pc, #256]	@ (8001980 <HAL_DMA_Init+0x148>)
 800187e:	4413      	add	r3, r2
 8001880:	4a3d      	ldr	r2, [pc, #244]	@ (8001978 <HAL_DMA_Init+0x140>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	091b      	lsrs	r3, r3, #4
 8001888:	009a      	lsls	r2, r3, #2
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a3c      	ldr	r2, [pc, #240]	@ (8001984 <HAL_DMA_Init+0x14c>)
 8001892:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80018aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fa76 	bl	8001dd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018f4:	d102      	bne.n	80018fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001910:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d010      	beq.n	800193c <HAL_DMA_Init+0x104>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d80c      	bhi.n	800193c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fa96 	bl	8001e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	e008      	b.n	800194e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40020407 	.word	0x40020407
 8001974:	bffdfff8 	.word	0xbffdfff8
 8001978:	cccccccd 	.word	0xcccccccd
 800197c:	40020000 	.word	0x40020000
 8001980:	bffdfbf8 	.word	0xbffdfbf8
 8001984:	40020400 	.word	0x40020400

08001988 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_DMA_Start_IT+0x20>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e066      	b.n	8001a76 <HAL_DMA_Start_IT+0xee>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d155      	bne.n	8001a68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0201 	bic.w	r2, r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	68b9      	ldr	r1, [r7, #8]
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 f9bb 	bl	8001d5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d008      	beq.n	8001a00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 020e 	orr.w	r2, r2, #14
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e00f      	b.n	8001a20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0204 	bic.w	r2, r2, #4
 8001a0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 020a 	orr.w	r2, r2, #10
 8001a1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a3c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0201 	orr.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	e005      	b.n	8001a74 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a70:	2302      	movs	r3, #2
 8001a72:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d005      	beq.n	8001aa2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2204      	movs	r2, #4
 8001a9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	e037      	b.n	8001b12 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 020e 	bic.w	r2, r2, #14
 8001ab0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001abc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ac0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	f003 021f 	and.w	r2, r3, #31
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001aee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00c      	beq.n	8001b12 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b06:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b10:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d00d      	beq.n	8001b64 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	e047      	b.n	8001bf4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 020e 	bic.w	r2, r2, #14
 8001b72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b98:	f003 021f 	and.w	r2, r3, #31
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bb0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00c      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bc8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001bd2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
    }
  }
  return status;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2204      	movs	r2, #4
 8001c20:	409a      	lsls	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d026      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x7a>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d021      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d107      	bne.n	8001c52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0204 	bic.w	r2, r2, #4
 8001c50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	f003 021f 	and.w	r2, r3, #31
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	2104      	movs	r1, #4
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d071      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c76:	e06c      	b.n	8001d52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	2202      	movs	r2, #2
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d02e      	beq.n	8001cea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d029      	beq.n	8001cea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10b      	bne.n	8001cbc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 020a 	bic.w	r2, r2, #10
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	2102      	movs	r1, #2
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d038      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ce8:	e033      	b.n	8001d52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d02a      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d025      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 020e 	bic.w	r2, r2, #14
 8001d16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d004      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
}
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d84:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f003 021f 	and.w	r2, r3, #31
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	2101      	movs	r1, #1
 8001d94:	fa01 f202 	lsl.w	r2, r1, r2
 8001d98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d108      	bne.n	8001dbc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dba:	e007      	b.n	8001dcc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	60da      	str	r2, [r3, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d802      	bhi.n	8001df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001dec:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e001      	b.n	8001df6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001df4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	3b08      	subs	r3, #8
 8001e02:	4a12      	ldr	r2, [pc, #72]	@ (8001e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	009a      	lsls	r2, r3, #2
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a0b      	ldr	r2, [pc, #44]	@ (8001e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001e32:	bf00      	nop
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40020407 	.word	0x40020407
 8001e44:	40020800 	.word	0x40020800
 8001e48:	40020820 	.word	0x40020820
 8001e4c:	cccccccd 	.word	0xcccccccd
 8001e50:	40020880 	.word	0x40020880

08001e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a08      	ldr	r2, [pc, #32]	@ (8001e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e76:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	2201      	movs	r2, #1
 8001e82:	409a      	lsls	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	1000823f 	.word	0x1000823f
 8001e98:	40020940 	.word	0x40020940

08001e9c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e147      	b.n	800213e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe fbe4 	bl	8000690 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0210 	bic.w	r2, r2, #16
 8001ed6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed8:	f7ff fb70 	bl	80015bc <HAL_GetTick>
 8001edc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001ede:	e012      	b.n	8001f06 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001ee0:	f7ff fb6c 	bl	80015bc <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b0a      	cmp	r3, #10
 8001eec:	d90b      	bls.n	8001f06 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2203      	movs	r2, #3
 8001efe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e11b      	b.n	800213e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d0e5      	beq.n	8001ee0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f24:	f7ff fb4a 	bl	80015bc <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001f2a:	e012      	b.n	8001f52 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001f2c:	f7ff fb46 	bl	80015bc <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b0a      	cmp	r3, #10
 8001f38:	d90b      	bls.n	8001f52 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3e:	f043 0201 	orr.w	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2203      	movs	r2, #3
 8001f4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0f5      	b.n	800213e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0e5      	beq.n	8001f2c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0202 	orr.w	r2, r2, #2
 8001f6e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a74      	ldr	r2, [pc, #464]	@ (8002148 <HAL_FDCAN_Init+0x2ac>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d103      	bne.n	8001f82 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001f7a:	4a74      	ldr	r2, [pc, #464]	@ (800214c <HAL_FDCAN_Init+0x2b0>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7c1b      	ldrb	r3, [r3, #16]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d108      	bne.n	8001f9c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f98:	619a      	str	r2, [r3, #24]
 8001f9a:	e007      	b.n	8001fac <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001faa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7c5b      	ldrb	r3, [r3, #17]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d108      	bne.n	8001fc6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fc2:	619a      	str	r2, [r3, #24]
 8001fc4:	e007      	b.n	8001fd6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001fd4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7c9b      	ldrb	r3, [r3, #18]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d108      	bne.n	8001ff0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699a      	ldr	r2, [r3, #24]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fec:	619a      	str	r2, [r3, #24]
 8001fee:	e007      	b.n	8002000 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001ffe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002024:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0210 	bic.w	r2, r2, #16
 8002034:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d108      	bne.n	8002050 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0204 	orr.w	r2, r2, #4
 800204c:	619a      	str	r2, [r3, #24]
 800204e:	e02c      	b.n	80020aa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d028      	beq.n	80020aa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d01c      	beq.n	800209a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800206e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0210 	orr.w	r2, r2, #16
 800207e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d110      	bne.n	80020aa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	619a      	str	r2, [r3, #24]
 8002098:	e007      	b.n	80020aa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699a      	ldr	r2, [r3, #24]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0220 	orr.w	r2, r2, #32
 80020a8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80020ba:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80020c2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80020d2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80020d4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020de:	d115      	bne.n	800210c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ea:	3b01      	subs	r3, #1
 80020ec:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80020ee:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f4:	3b01      	subs	r3, #1
 80020f6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80020f8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002100:	3b01      	subs	r3, #1
 8002102:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002108:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800210a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f814 	bl	8002150 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40006400 	.word	0x40006400
 800214c:	40006500 	.word	0x40006500

08002150 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002158:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800215a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a2b      	ldr	r2, [pc, #172]	@ (8002210 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d103      	bne.n	800216e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800216c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800217c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021a2:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021aa:	061a      	lsls	r2, r3, #24
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	e005      	b.n	80021f0 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3304      	adds	r3, #4
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d3f3      	bcc.n	80021e4 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	4000a400 	.word	0x4000a400
 8002210:	40006800 	.word	0x40006800

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002222:	e15a      	b.n	80024da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 814c 	beq.w	80024d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d005      	beq.n	8002254 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002250:	2b02      	cmp	r3, #2
 8002252:	d130      	bne.n	80022b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228a:	2201      	movs	r2, #1
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 0201 	and.w	r2, r3, #1
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d017      	beq.n	80022f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d123      	bne.n	8002346 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	6939      	ldr	r1, [r7, #16]
 8002342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0203 	and.w	r2, r3, #3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80a6 	beq.w	80024d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002388:	4b5b      	ldr	r3, [pc, #364]	@ (80024f8 <HAL_GPIO_Init+0x2e4>)
 800238a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238c:	4a5a      	ldr	r2, [pc, #360]	@ (80024f8 <HAL_GPIO_Init+0x2e4>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6613      	str	r3, [r2, #96]	@ 0x60
 8002394:	4b58      	ldr	r3, [pc, #352]	@ (80024f8 <HAL_GPIO_Init+0x2e4>)
 8002396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a0:	4a56      	ldr	r2, [pc, #344]	@ (80024fc <HAL_GPIO_Init+0x2e8>)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023ca:	d01f      	beq.n	800240c <HAL_GPIO_Init+0x1f8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a4c      	ldr	r2, [pc, #304]	@ (8002500 <HAL_GPIO_Init+0x2ec>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d019      	beq.n	8002408 <HAL_GPIO_Init+0x1f4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a4b      	ldr	r2, [pc, #300]	@ (8002504 <HAL_GPIO_Init+0x2f0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d013      	beq.n	8002404 <HAL_GPIO_Init+0x1f0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a4a      	ldr	r2, [pc, #296]	@ (8002508 <HAL_GPIO_Init+0x2f4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00d      	beq.n	8002400 <HAL_GPIO_Init+0x1ec>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a49      	ldr	r2, [pc, #292]	@ (800250c <HAL_GPIO_Init+0x2f8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d007      	beq.n	80023fc <HAL_GPIO_Init+0x1e8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a48      	ldr	r2, [pc, #288]	@ (8002510 <HAL_GPIO_Init+0x2fc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_GPIO_Init+0x1e4>
 80023f4:	2305      	movs	r3, #5
 80023f6:	e00a      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 80023f8:	2306      	movs	r3, #6
 80023fa:	e008      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 80023fc:	2304      	movs	r3, #4
 80023fe:	e006      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 8002400:	2303      	movs	r3, #3
 8002402:	e004      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 8002404:	2302      	movs	r3, #2
 8002406:	e002      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 800240c:	2300      	movs	r3, #0
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	f002 0203 	and.w	r2, r2, #3
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	4093      	lsls	r3, r2
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241e:	4937      	ldr	r1, [pc, #220]	@ (80024fc <HAL_GPIO_Init+0x2e8>)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800242c:	4b39      	ldr	r3, [pc, #228]	@ (8002514 <HAL_GPIO_Init+0x300>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002450:	4a30      	ldr	r2, [pc, #192]	@ (8002514 <HAL_GPIO_Init+0x300>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002456:	4b2f      	ldr	r3, [pc, #188]	@ (8002514 <HAL_GPIO_Init+0x300>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800247a:	4a26      	ldr	r2, [pc, #152]	@ (8002514 <HAL_GPIO_Init+0x300>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002480:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <HAL_GPIO_Init+0x300>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002514 <HAL_GPIO_Init+0x300>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <HAL_GPIO_Init+0x300>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ce:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <HAL_GPIO_Init+0x300>)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f ae9d 	bne.w	8002224 <HAL_GPIO_Init+0x10>
  }
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010000 	.word	0x40010000
 8002500:	48000400 	.word	0x48000400
 8002504:	48000800 	.word	0x48000800
 8002508:	48000c00 	.word	0x48000c00
 800250c:	48001000 	.word	0x48001000
 8002510:	48001400 	.word	0x48001400
 8002514:	40010400 	.word	0x40010400

08002518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	887b      	ldrh	r3, [r7, #2]
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e001      	b.n	800253a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002564:	e002      	b.n	800256c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0c0      	b.n	800270c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe ff4a 	bl	8001438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 fcfb 	bl	8005fac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e03e      	b.n	800263a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	440b      	add	r3, r1
 80025ca:	3311      	adds	r3, #17
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	440b      	add	r3, r1
 80025de:	3310      	adds	r3, #16
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	3313      	adds	r3, #19
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	3320      	adds	r3, #32
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	3324      	adds	r3, #36	@ 0x24
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	3301      	adds	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	791b      	ldrb	r3, [r3, #4]
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	429a      	cmp	r2, r3
 8002642:	d3bb      	bcc.n	80025bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]
 8002648:	e044      	b.n	80026d4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800264a:	7bfa      	ldrb	r2, [r7, #15]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	3301      	adds	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	791b      	ldrb	r3, [r3, #4]
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d3b5      	bcc.n	800264a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80026ea:	f003 fc7a 	bl	8005fe2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7a9b      	ldrb	r3, [r3, #10]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d102      	bne.n	800270a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f805 	bl	8002714 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002738:	b29b      	uxth	r3, r3
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800274c:	b29b      	uxth	r3, r3
 800274e:	f043 0302 	orr.w	r3, r3, #2
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d141      	bne.n	80027fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002776:	4b4b      	ldr	r3, [pc, #300]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800277e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002782:	d131      	bne.n	80027e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002784:	4b47      	ldr	r3, [pc, #284]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800278a:	4a46      	ldr	r2, [pc, #280]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002790:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002794:	4b43      	ldr	r3, [pc, #268]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800279c:	4a41      	ldr	r2, [pc, #260]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800279e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027a4:	4b40      	ldr	r3, [pc, #256]	@ (80028a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2232      	movs	r2, #50	@ 0x32
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	4a3f      	ldr	r2, [pc, #252]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	0c9b      	lsrs	r3, r3, #18
 80027b6:	3301      	adds	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ba:	e002      	b.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3b01      	subs	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c2:	4b38      	ldr	r3, [pc, #224]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ce:	d102      	bne.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f2      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027d6:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e2:	d158      	bne.n	8002896 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e057      	b.n	8002898 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027e8:	4b2e      	ldr	r3, [pc, #184]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027ee:	4a2d      	ldr	r2, [pc, #180]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80027f8:	e04d      	b.n	8002896 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002800:	d141      	bne.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002802:	4b28      	ldr	r3, [pc, #160]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800280a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800280e:	d131      	bne.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002810:	4b24      	ldr	r3, [pc, #144]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002816:	4a23      	ldr	r2, [pc, #140]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002820:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002828:	4a1e      	ldr	r2, [pc, #120]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800282a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800282e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002830:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2232      	movs	r2, #50	@ 0x32
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	4a1c      	ldr	r2, [pc, #112]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	0c9b      	lsrs	r3, r3, #18
 8002842:	3301      	adds	r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002846:	e002      	b.n	800284e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3b01      	subs	r3, #1
 800284c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800284e:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800285a:	d102      	bne.n	8002862 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f2      	bne.n	8002848 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800286e:	d112      	bne.n	8002896 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e011      	b.n	8002898 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002874:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800287a:	4a0a      	ldr	r2, [pc, #40]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002880:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002884:	e007      	b.n	8002896 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002886:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800288e:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002890:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002894:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40007000 	.word	0x40007000
 80028a8:	20000000 	.word	0x20000000
 80028ac:	431bde83 	.word	0x431bde83

080028b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a04      	ldr	r2, [pc, #16]	@ (80028cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028be:	6093      	str	r3, [r2, #8]
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40007000 	.word	0x40007000

080028d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e2fe      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d075      	beq.n	80029da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ee:	4b97      	ldr	r3, [pc, #604]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f8:	4b94      	ldr	r3, [pc, #592]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2b0c      	cmp	r3, #12
 8002906:	d102      	bne.n	800290e <HAL_RCC_OscConfig+0x3e>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d002      	beq.n	8002914 <HAL_RCC_OscConfig+0x44>
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d10b      	bne.n	800292c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	4b8d      	ldr	r3, [pc, #564]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d05b      	beq.n	80029d8 <HAL_RCC_OscConfig+0x108>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d157      	bne.n	80029d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e2d9      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002934:	d106      	bne.n	8002944 <HAL_RCC_OscConfig+0x74>
 8002936:	4b85      	ldr	r3, [pc, #532]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a84      	ldr	r2, [pc, #528]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 800293c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e01d      	b.n	8002980 <HAL_RCC_OscConfig+0xb0>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0x98>
 800294e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a7e      	ldr	r2, [pc, #504]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a7b      	ldr	r2, [pc, #492]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0xb0>
 8002968:	4b78      	ldr	r3, [pc, #480]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a77      	ldr	r2, [pc, #476]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 800296e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b75      	ldr	r3, [pc, #468]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a74      	ldr	r2, [pc, #464]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 800297a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800297e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d013      	beq.n	80029b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fe18 	bl	80015bc <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe fe14 	bl	80015bc <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	@ 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e29e      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0xc0>
 80029ae:	e014      	b.n	80029da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fe04 	bl	80015bc <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b8:	f7fe fe00 	bl	80015bc <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	@ 0x64
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e28a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ca:	4b60      	ldr	r3, [pc, #384]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0xe8>
 80029d6:	e000      	b.n	80029da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d075      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e6:	4b59      	ldr	r3, [pc, #356]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f0:	4b56      	ldr	r3, [pc, #344]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b0c      	cmp	r3, #12
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_OscConfig+0x136>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d002      	beq.n	8002a0c <HAL_RCC_OscConfig+0x13c>
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d11f      	bne.n	8002a4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_OscConfig+0x154>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e25d      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a24:	4b49      	ldr	r3, [pc, #292]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	4946      	ldr	r1, [pc, #280]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a38:	4b45      	ldr	r3, [pc, #276]	@ (8002b50 <HAL_RCC_OscConfig+0x280>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe fd71 	bl	8001524 <HAL_InitTick>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d043      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e249      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d023      	beq.n	8002a9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a54:	4b3d      	ldr	r3, [pc, #244]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a3c      	ldr	r2, [pc, #240]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe fdac 	bl	80015bc <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a68:	f7fe fda8 	bl	80015bc <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e232      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a7a:	4b34      	ldr	r3, [pc, #208]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	061b      	lsls	r3, r3, #24
 8002a94:	492d      	ldr	r1, [pc, #180]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
 8002a9a:	e01a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002aa2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fd88 	bl	80015bc <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7fe fd84 	bl	80015bc <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e20e      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac2:	4b22      	ldr	r3, [pc, #136]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x1e0>
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d041      	beq.n	8002b62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01c      	beq.n	8002b20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae6:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aec:	4a17      	ldr	r2, [pc, #92]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7fe fd61 	bl	80015bc <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afe:	f7fe fd5d 	bl	80015bc <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e1e7      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b10:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0ef      	beq.n	8002afe <HAL_RCC_OscConfig+0x22e>
 8002b1e:	e020      	b.n	8002b62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b20:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b26:	4a09      	ldr	r2, [pc, #36]	@ (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe fd44 	bl	80015bc <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b36:	e00d      	b.n	8002b54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b38:	f7fe fd40 	bl	80015bc <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d906      	bls.n	8002b54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1ca      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b54:	4b8c      	ldr	r3, [pc, #560]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1ea      	bne.n	8002b38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80a6 	beq.w	8002cbc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b70:	2300      	movs	r3, #0
 8002b72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b74:	4b84      	ldr	r3, [pc, #528]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_OscConfig+0x2b4>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x2b6>
 8002b84:	2300      	movs	r3, #0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00d      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b96:	4b7c      	ldr	r3, [pc, #496]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba6:	4b79      	ldr	r3, [pc, #484]	@ (8002d8c <HAL_RCC_OscConfig+0x4bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d118      	bne.n	8002be4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb2:	4b76      	ldr	r3, [pc, #472]	@ (8002d8c <HAL_RCC_OscConfig+0x4bc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a75      	ldr	r2, [pc, #468]	@ (8002d8c <HAL_RCC_OscConfig+0x4bc>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbe:	f7fe fcfd 	bl	80015bc <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc6:	f7fe fcf9 	bl	80015bc <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e183      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd8:	4b6c      	ldr	r3, [pc, #432]	@ (8002d8c <HAL_RCC_OscConfig+0x4bc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d108      	bne.n	8002bfe <HAL_RCC_OscConfig+0x32e>
 8002bec:	4b66      	ldr	r3, [pc, #408]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf2:	4a65      	ldr	r2, [pc, #404]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bfc:	e024      	b.n	8002c48 <HAL_RCC_OscConfig+0x378>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d110      	bne.n	8002c28 <HAL_RCC_OscConfig+0x358>
 8002c06:	4b60      	ldr	r3, [pc, #384]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0c:	4a5e      	ldr	r2, [pc, #376]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002c0e:	f043 0304 	orr.w	r3, r3, #4
 8002c12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c16:	4b5c      	ldr	r3, [pc, #368]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1c:	4a5a      	ldr	r2, [pc, #360]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c26:	e00f      	b.n	8002c48 <HAL_RCC_OscConfig+0x378>
 8002c28:	4b57      	ldr	r3, [pc, #348]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c2e:	4a56      	ldr	r2, [pc, #344]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c38:	4b53      	ldr	r3, [pc, #332]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3e:	4a52      	ldr	r2, [pc, #328]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d016      	beq.n	8002c7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7fe fcb4 	bl	80015bc <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7fe fcb0 	bl	80015bc <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e138      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6e:	4b46      	ldr	r3, [pc, #280]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ed      	beq.n	8002c58 <HAL_RCC_OscConfig+0x388>
 8002c7c:	e015      	b.n	8002caa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7e:	f7fe fc9d 	bl	80015bc <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7fe fc99 	bl	80015bc <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e121      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c9c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1ed      	bne.n	8002c86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002caa:	7ffb      	ldrb	r3, [r7, #31]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb0:	4b35      	ldr	r3, [pc, #212]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb4:	4a34      	ldr	r2, [pc, #208]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d03c      	beq.n	8002d42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce0:	f7fe fc6c 	bl	80015bc <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ce8:	f7fe fc68 	bl	80015bc <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e0f2      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cfa:	4b23      	ldr	r3, [pc, #140]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ef      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x418>
 8002d08:	e01b      	b.n	8002d42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d10:	4a1d      	ldr	r2, [pc, #116]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fc4f 	bl	80015bc <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d22:	f7fe fc4b 	bl	80015bc <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e0d5      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d34:	4b14      	ldr	r3, [pc, #80]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1ef      	bne.n	8002d22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80c9 	beq.w	8002ede <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	f000 8083 	beq.w	8002e60 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d15e      	bne.n	8002e20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a08      	ldr	r2, [pc, #32]	@ (8002d88 <HAL_RCC_OscConfig+0x4b8>)
 8002d68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fc25 	bl	80015bc <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d74:	e00c      	b.n	8002d90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d76:	f7fe fc21 	bl	80015bc <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d905      	bls.n	8002d90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0ab      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d90:	4b55      	ldr	r3, [pc, #340]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ec      	bne.n	8002d76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9c:	4b52      	ldr	r3, [pc, #328]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	4b52      	ldr	r3, [pc, #328]	@ (8002eec <HAL_RCC_OscConfig+0x61c>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6a11      	ldr	r1, [r2, #32]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dac:	3a01      	subs	r2, #1
 8002dae:	0112      	lsls	r2, r2, #4
 8002db0:	4311      	orrs	r1, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002db6:	0212      	lsls	r2, r2, #8
 8002db8:	4311      	orrs	r1, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002dbe:	0852      	lsrs	r2, r2, #1
 8002dc0:	3a01      	subs	r2, #1
 8002dc2:	0552      	lsls	r2, r2, #21
 8002dc4:	4311      	orrs	r1, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002dca:	0852      	lsrs	r2, r2, #1
 8002dcc:	3a01      	subs	r2, #1
 8002dce:	0652      	lsls	r2, r2, #25
 8002dd0:	4311      	orrs	r1, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002dd6:	06d2      	lsls	r2, r2, #27
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	4943      	ldr	r1, [pc, #268]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de0:	4b41      	ldr	r3, [pc, #260]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a40      	ldr	r2, [pc, #256]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dec:	4b3e      	ldr	r3, [pc, #248]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4a3d      	ldr	r2, [pc, #244]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002df6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fe fbe0 	bl	80015bc <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe fbdc 	bl	80015bc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e066      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e12:	4b35      	ldr	r3, [pc, #212]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0x530>
 8002e1e:	e05e      	b.n	8002ede <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b31      	ldr	r3, [pc, #196]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a30      	ldr	r2, [pc, #192]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fbc6 	bl	80015bc <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fe fbc2 	bl	80015bc <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e04c      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e46:	4b28      	ldr	r3, [pc, #160]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e52:	4b25      	ldr	r3, [pc, #148]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	4924      	ldr	r1, [pc, #144]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002e58:	4b25      	ldr	r3, [pc, #148]	@ (8002ef0 <HAL_RCC_OscConfig+0x620>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60cb      	str	r3, [r1, #12]
 8002e5e:	e03e      	b.n	8002ede <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e039      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee8 <HAL_RCC_OscConfig+0x618>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f003 0203 	and.w	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d12c      	bne.n	8002eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d123      	bne.n	8002eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d11b      	bne.n	8002eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d113      	bne.n	8002eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d109      	bne.n	8002eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d001      	beq.n	8002ede <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	019f800c 	.word	0x019f800c
 8002ef0:	feeefffc 	.word	0xfeeefffc

08002ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e11e      	b.n	800314a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b91      	ldr	r3, [pc, #580]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d910      	bls.n	8002f3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b8e      	ldr	r3, [pc, #568]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 020f 	bic.w	r2, r3, #15
 8002f22:	498c      	ldr	r1, [pc, #560]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b8a      	ldr	r3, [pc, #552]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e106      	b.n	800314a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d073      	beq.n	8003030 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d129      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f50:	4b81      	ldr	r3, [pc, #516]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0f4      	b.n	800314a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f60:	f000 f99e 	bl	80032a0 <RCC_GetSysClockFreqFromPLLSource>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4a7c      	ldr	r2, [pc, #496]	@ (800315c <HAL_RCC_ClockConfig+0x268>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d93f      	bls.n	8002fee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d033      	beq.n	8002fee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d12f      	bne.n	8002fee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f8e:	4b72      	ldr	r3, [pc, #456]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f96:	4a70      	ldr	r2, [pc, #448]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8002f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f9e:	2380      	movs	r3, #128	@ 0x80
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e024      	b.n	8002fee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fac:	4b6a      	ldr	r3, [pc, #424]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0c6      	b.n	800314a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fbc:	4b66      	ldr	r3, [pc, #408]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0be      	b.n	800314a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002fcc:	f000 f8ce 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4a61      	ldr	r2, [pc, #388]	@ (800315c <HAL_RCC_ClockConfig+0x268>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d909      	bls.n	8002fee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fda:	4b5f      	ldr	r3, [pc, #380]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fe2:	4a5d      	ldr	r2, [pc, #372]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8002fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fe8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002fea:	2380      	movs	r3, #128	@ 0x80
 8002fec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b5a      	ldr	r3, [pc, #360]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4957      	ldr	r1, [pc, #348]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003000:	f7fe fadc 	bl	80015bc <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7fe fad8 	bl	80015bc <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e095      	b.n	800314a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b4e      	ldr	r3, [pc, #312]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d023      	beq.n	8003084 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003048:	4b43      	ldr	r3, [pc, #268]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4a42      	ldr	r2, [pc, #264]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 800304e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003052:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003060:	4b3d      	ldr	r3, [pc, #244]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003068:	4a3b      	ldr	r2, [pc, #236]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 800306a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800306e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003070:	4b39      	ldr	r3, [pc, #228]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4936      	ldr	r1, [pc, #216]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
 8003082:	e008      	b.n	8003096 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b80      	cmp	r3, #128	@ 0x80
 8003088:	d105      	bne.n	8003096 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800308a:	4b33      	ldr	r3, [pc, #204]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	4a32      	ldr	r2, [pc, #200]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8003090:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003094:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003096:	4b2f      	ldr	r3, [pc, #188]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d21d      	bcs.n	80030e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 020f 	bic.w	r2, r3, #15
 80030ac:	4929      	ldr	r1, [pc, #164]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030b4:	f7fe fa82 	bl	80015bc <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fe fa7e 	bl	80015bc <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e03b      	b.n	800314a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b20      	ldr	r3, [pc, #128]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d1ed      	bne.n	80030bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4917      	ldr	r1, [pc, #92]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310a:	4b13      	ldr	r3, [pc, #76]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	490f      	ldr	r1, [pc, #60]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800311e:	f000 f825 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8003122:	4602      	mov	r2, r0
 8003124:	4b0c      	ldr	r3, [pc, #48]	@ (8003158 <HAL_RCC_ClockConfig+0x264>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	490c      	ldr	r1, [pc, #48]	@ (8003160 <HAL_RCC_ClockConfig+0x26c>)
 8003130:	5ccb      	ldrb	r3, [r1, r3]
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	4a0a      	ldr	r2, [pc, #40]	@ (8003164 <HAL_RCC_ClockConfig+0x270>)
 800313c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800313e:	4b0a      	ldr	r3, [pc, #40]	@ (8003168 <HAL_RCC_ClockConfig+0x274>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe f9ee 	bl	8001524 <HAL_InitTick>
 8003148:	4603      	mov	r3, r0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40022000 	.word	0x40022000
 8003158:	40021000 	.word	0x40021000
 800315c:	04c4b400 	.word	0x04c4b400
 8003160:	08006f28 	.word	0x08006f28
 8003164:	20000000 	.word	0x20000000
 8003168:	20000004 	.word	0x20000004

0800316c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003172:	4b2c      	ldr	r3, [pc, #176]	@ (8003224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b04      	cmp	r3, #4
 800317c:	d102      	bne.n	8003184 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800317e:	4b2a      	ldr	r3, [pc, #168]	@ (8003228 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	e047      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003184:	4b27      	ldr	r3, [pc, #156]	@ (8003224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b08      	cmp	r3, #8
 800318e:	d102      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003190:	4b26      	ldr	r3, [pc, #152]	@ (800322c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e03e      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003196:	4b23      	ldr	r3, [pc, #140]	@ (8003224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b0c      	cmp	r3, #12
 80031a0:	d136      	bne.n	8003210 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031a2:	4b20      	ldr	r3, [pc, #128]	@ (8003224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	3301      	adds	r3, #1
 80031b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d10c      	bne.n	80031da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031c0:	4a1a      	ldr	r2, [pc, #104]	@ (800322c <HAL_RCC_GetSysClockFreq+0xc0>)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	4a16      	ldr	r2, [pc, #88]	@ (8003224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ca:	68d2      	ldr	r2, [r2, #12]
 80031cc:	0a12      	lsrs	r2, r2, #8
 80031ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	617b      	str	r3, [r7, #20]
      break;
 80031d8:	e00c      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031da:	4a13      	ldr	r2, [pc, #76]	@ (8003228 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e2:	4a10      	ldr	r2, [pc, #64]	@ (8003224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e4:	68d2      	ldr	r2, [r2, #12]
 80031e6:	0a12      	lsrs	r2, r2, #8
 80031e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
      break;
 80031f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	0e5b      	lsrs	r3, r3, #25
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	3301      	adds	r3, #1
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	e001      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003214:	693b      	ldr	r3, [r7, #16]
}
 8003216:	4618      	mov	r0, r3
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	00f42400 	.word	0x00f42400
 800322c:	007a1200 	.word	0x007a1200

08003230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003234:	4b03      	ldr	r3, [pc, #12]	@ (8003244 <HAL_RCC_GetHCLKFreq+0x14>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000000 	.word	0x20000000

08003248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800324c:	f7ff fff0 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b06      	ldr	r3, [pc, #24]	@ (800326c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	0a1b      	lsrs	r3, r3, #8
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	4904      	ldr	r1, [pc, #16]	@ (8003270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	08006f38 	.word	0x08006f38

08003274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003278:	f7ff ffda 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	0adb      	lsrs	r3, r3, #11
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	4904      	ldr	r1, [pc, #16]	@ (800329c <HAL_RCC_GetPCLK2Freq+0x28>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000
 800329c:	08006f38 	.word	0x08006f38

080032a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	3301      	adds	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d10c      	bne.n	80032de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032c4:	4a17      	ldr	r2, [pc, #92]	@ (8003324 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	4a14      	ldr	r2, [pc, #80]	@ (8003320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032ce:	68d2      	ldr	r2, [r2, #12]
 80032d0:	0a12      	lsrs	r2, r2, #8
 80032d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032d6:	fb02 f303 	mul.w	r3, r2, r3
 80032da:	617b      	str	r3, [r7, #20]
    break;
 80032dc:	e00c      	b.n	80032f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032de:	4a12      	ldr	r2, [pc, #72]	@ (8003328 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032e8:	68d2      	ldr	r2, [r2, #12]
 80032ea:	0a12      	lsrs	r2, r2, #8
 80032ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032f0:	fb02 f303 	mul.w	r3, r2, r3
 80032f4:	617b      	str	r3, [r7, #20]
    break;
 80032f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032f8:	4b09      	ldr	r3, [pc, #36]	@ (8003320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	0e5b      	lsrs	r3, r3, #25
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	3301      	adds	r3, #1
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003312:	687b      	ldr	r3, [r7, #4]
}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40021000 	.word	0x40021000
 8003324:	007a1200 	.word	0x007a1200
 8003328:	00f42400 	.word	0x00f42400

0800332c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003334:	2300      	movs	r3, #0
 8003336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003338:	2300      	movs	r3, #0
 800333a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8098 	beq.w	800347a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800334a:	2300      	movs	r3, #0
 800334c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334e:	4b43      	ldr	r3, [pc, #268]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10d      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335a:	4b40      	ldr	r3, [pc, #256]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335e:	4a3f      	ldr	r2, [pc, #252]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003364:	6593      	str	r3, [r2, #88]	@ 0x58
 8003366:	4b3d      	ldr	r3, [pc, #244]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003372:	2301      	movs	r3, #1
 8003374:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003376:	4b3a      	ldr	r3, [pc, #232]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a39      	ldr	r2, [pc, #228]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003380:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003382:	f7fe f91b 	bl	80015bc <HAL_GetTick>
 8003386:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003388:	e009      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338a:	f7fe f917 	bl	80015bc <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d902      	bls.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	74fb      	strb	r3, [r7, #19]
        break;
 800339c:	e005      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800339e:	4b30      	ldr	r3, [pc, #192]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0ef      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d159      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033b0:	4b2a      	ldr	r3, [pc, #168]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01e      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d019      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033cc:	4b23      	ldr	r3, [pc, #140]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d8:	4b20      	ldr	r3, [pc, #128]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033de:	4a1f      	ldr	r2, [pc, #124]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e8:	4b1c      	ldr	r3, [pc, #112]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ee:	4a1b      	ldr	r2, [pc, #108]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f8:	4a18      	ldr	r2, [pc, #96]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe f8d7 	bl	80015bc <HAL_GetTick>
 800340e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003410:	e00b      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003412:	f7fe f8d3 	bl	80015bc <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003420:	4293      	cmp	r3, r2
 8003422:	d902      	bls.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	74fb      	strb	r3, [r7, #19]
            break;
 8003428:	e006      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342a:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ec      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10b      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800343e:	4b07      	ldr	r3, [pc, #28]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003444:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344c:	4903      	ldr	r1, [pc, #12]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003454:	e008      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	74bb      	strb	r3, [r7, #18]
 800345a:	e005      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800345c:	40021000 	.word	0x40021000
 8003460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003468:	7c7b      	ldrb	r3, [r7, #17]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4ba7      	ldr	r3, [pc, #668]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003472:	4aa6      	ldr	r2, [pc, #664]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003478:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003486:	4ba1      	ldr	r3, [pc, #644]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348c:	f023 0203 	bic.w	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	499d      	ldr	r1, [pc, #628]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a8:	4b98      	ldr	r3, [pc, #608]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	f023 020c 	bic.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4995      	ldr	r1, [pc, #596]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ca:	4b90      	ldr	r3, [pc, #576]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	498c      	ldr	r1, [pc, #560]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ec:	4b87      	ldr	r3, [pc, #540]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	4984      	ldr	r1, [pc, #528]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350e:	4b7f      	ldr	r3, [pc, #508]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	497b      	ldr	r1, [pc, #492]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003530:	4b76      	ldr	r3, [pc, #472]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003536:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	4973      	ldr	r1, [pc, #460]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003552:	4b6e      	ldr	r3, [pc, #440]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003558:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	496a      	ldr	r1, [pc, #424]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003574:	4b65      	ldr	r3, [pc, #404]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4962      	ldr	r1, [pc, #392]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003596:	4b5d      	ldr	r3, [pc, #372]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	4959      	ldr	r1, [pc, #356]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035b8:	4b54      	ldr	r3, [pc, #336]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035be:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c6:	4951      	ldr	r1, [pc, #324]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d015      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035da:	4b4c      	ldr	r3, [pc, #304]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	4948      	ldr	r1, [pc, #288]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035f8:	d105      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fa:	4b44      	ldr	r3, [pc, #272]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	4a43      	ldr	r2, [pc, #268]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003600:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003604:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800360e:	2b00      	cmp	r3, #0
 8003610:	d015      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003612:	4b3e      	ldr	r3, [pc, #248]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003618:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003620:	493a      	ldr	r1, [pc, #232]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003630:	d105      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003632:	4b36      	ldr	r3, [pc, #216]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	4a35      	ldr	r2, [pc, #212]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003638:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800363c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d015      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800364a:	4b30      	ldr	r3, [pc, #192]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003650:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003658:	492c      	ldr	r1, [pc, #176]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003668:	d105      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366a:	4b28      	ldr	r3, [pc, #160]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a27      	ldr	r2, [pc, #156]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003670:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003674:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d015      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003682:	4b22      	ldr	r3, [pc, #136]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003688:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003690:	491e      	ldr	r1, [pc, #120]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036a0:	d105      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a2:	4b1a      	ldr	r3, [pc, #104]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4a19      	ldr	r2, [pc, #100]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ac:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d015      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036ba:	4b14      	ldr	r3, [pc, #80]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	4910      	ldr	r1, [pc, #64]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036d8:	d105      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036da:	4b0c      	ldr	r3, [pc, #48]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4a0b      	ldr	r2, [pc, #44]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036e4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d018      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036f2:	4b06      	ldr	r3, [pc, #24]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	4902      	ldr	r1, [pc, #8]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	e001      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800370c:	40021000 	.word	0x40021000
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003716:	d105      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003718:	4b21      	ldr	r3, [pc, #132]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a20      	ldr	r2, [pc, #128]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800371e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003722:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d015      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003730:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003736:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	4918      	ldr	r1, [pc, #96]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374e:	d105      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003750:	4b13      	ldr	r3, [pc, #76]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800375a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d015      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003768:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800376a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800376e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003776:	490a      	ldr	r1, [pc, #40]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003782:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003786:	d105      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003788:	4b05      	ldr	r3, [pc, #20]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4a04      	ldr	r2, [pc, #16]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800378e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003792:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003794:	7cbb      	ldrb	r3, [r7, #18]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000

080037a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e09d      	b.n	80038f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d108      	bne.n	80037d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037c6:	d009      	beq.n	80037dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	61da      	str	r2, [r3, #28]
 80037ce:	e005      	b.n	80037dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd fa2a 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003812:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800381c:	d902      	bls.n	8003824 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	e002      	b.n	800382a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003828:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003832:	d007      	beq.n	8003844 <HAL_SPI_Init+0xa0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800383c:	d002      	beq.n	8003844 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003886:	ea42 0103 	orr.w	r1, r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	0c1b      	lsrs	r3, r3, #16
 80038a0:	f003 0204 	and.w	r2, r3, #4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80038c0:	ea42 0103 	orr.w	r1, r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e049      	b.n	80039a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7fd fb6f 	bl	8001004 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f000 f949 	bl	8003bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e0ff      	b.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b14      	cmp	r3, #20
 80039d2:	f200 80f0 	bhi.w	8003bb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039d6:	a201      	add	r2, pc, #4	@ (adr r2, 80039dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a31 	.word	0x08003a31
 80039e0:	08003bb7 	.word	0x08003bb7
 80039e4:	08003bb7 	.word	0x08003bb7
 80039e8:	08003bb7 	.word	0x08003bb7
 80039ec:	08003a71 	.word	0x08003a71
 80039f0:	08003bb7 	.word	0x08003bb7
 80039f4:	08003bb7 	.word	0x08003bb7
 80039f8:	08003bb7 	.word	0x08003bb7
 80039fc:	08003ab3 	.word	0x08003ab3
 8003a00:	08003bb7 	.word	0x08003bb7
 8003a04:	08003bb7 	.word	0x08003bb7
 8003a08:	08003bb7 	.word	0x08003bb7
 8003a0c:	08003af3 	.word	0x08003af3
 8003a10:	08003bb7 	.word	0x08003bb7
 8003a14:	08003bb7 	.word	0x08003bb7
 8003a18:	08003bb7 	.word	0x08003bb7
 8003a1c:	08003b35 	.word	0x08003b35
 8003a20:	08003bb7 	.word	0x08003bb7
 8003a24:	08003bb7 	.word	0x08003bb7
 8003a28:	08003bb7 	.word	0x08003bb7
 8003a2c:	08003b75 	.word	0x08003b75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f974 	bl	8003d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0208 	orr.w	r2, r2, #8
 8003a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0204 	bic.w	r2, r2, #4
 8003a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6999      	ldr	r1, [r3, #24]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	619a      	str	r2, [r3, #24]
      break;
 8003a6e:	e0a5      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f9ee 	bl	8003e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6999      	ldr	r1, [r3, #24]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	021a      	lsls	r2, r3, #8
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	619a      	str	r2, [r3, #24]
      break;
 8003ab0:	e084      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fa61 	bl	8003f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0208 	orr.w	r2, r2, #8
 8003acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0204 	bic.w	r2, r2, #4
 8003adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69d9      	ldr	r1, [r3, #28]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	61da      	str	r2, [r3, #28]
      break;
 8003af0:	e064      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fad3 	bl	80040a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69d9      	ldr	r1, [r3, #28]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	021a      	lsls	r2, r3, #8
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	61da      	str	r2, [r3, #28]
      break;
 8003b32:	e043      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fb46 	bl	80041cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0208 	orr.w	r2, r2, #8
 8003b4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0204 	bic.w	r2, r2, #4
 8003b5e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003b72:	e023      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fb90 	bl	80042a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b9e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003bb4:	e002      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop

08003bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a48      	ldr	r2, [pc, #288]	@ (8003d04 <TIM_Base_SetConfig+0x134>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <TIM_Base_SetConfig+0x40>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bee:	d00f      	beq.n	8003c10 <TIM_Base_SetConfig+0x40>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a45      	ldr	r2, [pc, #276]	@ (8003d08 <TIM_Base_SetConfig+0x138>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <TIM_Base_SetConfig+0x40>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a44      	ldr	r2, [pc, #272]	@ (8003d0c <TIM_Base_SetConfig+0x13c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_Base_SetConfig+0x40>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a43      	ldr	r2, [pc, #268]	@ (8003d10 <TIM_Base_SetConfig+0x140>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_Base_SetConfig+0x40>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a42      	ldr	r2, [pc, #264]	@ (8003d14 <TIM_Base_SetConfig+0x144>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d108      	bne.n	8003c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a37      	ldr	r2, [pc, #220]	@ (8003d04 <TIM_Base_SetConfig+0x134>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01f      	beq.n	8003c6a <TIM_Base_SetConfig+0x9a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c30:	d01b      	beq.n	8003c6a <TIM_Base_SetConfig+0x9a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a34      	ldr	r2, [pc, #208]	@ (8003d08 <TIM_Base_SetConfig+0x138>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d017      	beq.n	8003c6a <TIM_Base_SetConfig+0x9a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a33      	ldr	r2, [pc, #204]	@ (8003d0c <TIM_Base_SetConfig+0x13c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <TIM_Base_SetConfig+0x9a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a32      	ldr	r2, [pc, #200]	@ (8003d10 <TIM_Base_SetConfig+0x140>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00f      	beq.n	8003c6a <TIM_Base_SetConfig+0x9a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a32      	ldr	r2, [pc, #200]	@ (8003d18 <TIM_Base_SetConfig+0x148>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00b      	beq.n	8003c6a <TIM_Base_SetConfig+0x9a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a31      	ldr	r2, [pc, #196]	@ (8003d1c <TIM_Base_SetConfig+0x14c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <TIM_Base_SetConfig+0x9a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a30      	ldr	r2, [pc, #192]	@ (8003d20 <TIM_Base_SetConfig+0x150>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_Base_SetConfig+0x9a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a2b      	ldr	r2, [pc, #172]	@ (8003d14 <TIM_Base_SetConfig+0x144>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d108      	bne.n	8003c7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a18      	ldr	r2, [pc, #96]	@ (8003d04 <TIM_Base_SetConfig+0x134>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <TIM_Base_SetConfig+0x100>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a19      	ldr	r2, [pc, #100]	@ (8003d10 <TIM_Base_SetConfig+0x140>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00f      	beq.n	8003cd0 <TIM_Base_SetConfig+0x100>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a19      	ldr	r2, [pc, #100]	@ (8003d18 <TIM_Base_SetConfig+0x148>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <TIM_Base_SetConfig+0x100>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a18      	ldr	r2, [pc, #96]	@ (8003d1c <TIM_Base_SetConfig+0x14c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_Base_SetConfig+0x100>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a17      	ldr	r2, [pc, #92]	@ (8003d20 <TIM_Base_SetConfig+0x150>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0x100>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a12      	ldr	r2, [pc, #72]	@ (8003d14 <TIM_Base_SetConfig+0x144>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d103      	bne.n	8003cd8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d105      	bne.n	8003cf6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f023 0201 	bic.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	611a      	str	r2, [r3, #16]
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000800 	.word	0x40000800
 8003d10:	40013400 	.word	0x40013400
 8003d14:	40015000 	.word	0x40015000
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800

08003d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f023 0201 	bic.w	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 0302 	bic.w	r3, r3, #2
 8003d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a30      	ldr	r2, [pc, #192]	@ (8003e40 <TIM_OC1_SetConfig+0x11c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <TIM_OC1_SetConfig+0x88>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a2f      	ldr	r2, [pc, #188]	@ (8003e44 <TIM_OC1_SetConfig+0x120>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00f      	beq.n	8003dac <TIM_OC1_SetConfig+0x88>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8003e48 <TIM_OC1_SetConfig+0x124>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00b      	beq.n	8003dac <TIM_OC1_SetConfig+0x88>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a2d      	ldr	r2, [pc, #180]	@ (8003e4c <TIM_OC1_SetConfig+0x128>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <TIM_OC1_SetConfig+0x88>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e50 <TIM_OC1_SetConfig+0x12c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_OC1_SetConfig+0x88>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a2b      	ldr	r2, [pc, #172]	@ (8003e54 <TIM_OC1_SetConfig+0x130>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d10c      	bne.n	8003dc6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f023 0308 	bic.w	r3, r3, #8
 8003db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e40 <TIM_OC1_SetConfig+0x11c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <TIM_OC1_SetConfig+0xd2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e44 <TIM_OC1_SetConfig+0x120>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00f      	beq.n	8003df6 <TIM_OC1_SetConfig+0xd2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003e48 <TIM_OC1_SetConfig+0x124>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00b      	beq.n	8003df6 <TIM_OC1_SetConfig+0xd2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e4c <TIM_OC1_SetConfig+0x128>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <TIM_OC1_SetConfig+0xd2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a19      	ldr	r2, [pc, #100]	@ (8003e50 <TIM_OC1_SetConfig+0x12c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <TIM_OC1_SetConfig+0xd2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a18      	ldr	r2, [pc, #96]	@ (8003e54 <TIM_OC1_SetConfig+0x130>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d111      	bne.n	8003e1a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	621a      	str	r2, [r3, #32]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40013400 	.word	0x40013400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40014400 	.word	0x40014400
 8003e50:	40014800 	.word	0x40014800
 8003e54:	40015000 	.word	0x40015000

08003e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f023 0210 	bic.w	r2, r3, #16
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0320 	bic.w	r3, r3, #32
 8003ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8003f68 <TIM_OC2_SetConfig+0x110>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <TIM_OC2_SetConfig+0x74>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a2b      	ldr	r2, [pc, #172]	@ (8003f6c <TIM_OC2_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_OC2_SetConfig+0x74>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8003f70 <TIM_OC2_SetConfig+0x118>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d10d      	bne.n	8003ee8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ee6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a1f      	ldr	r2, [pc, #124]	@ (8003f68 <TIM_OC2_SetConfig+0x110>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <TIM_OC2_SetConfig+0xc0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f6c <TIM_OC2_SetConfig+0x114>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00f      	beq.n	8003f18 <TIM_OC2_SetConfig+0xc0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a1e      	ldr	r2, [pc, #120]	@ (8003f74 <TIM_OC2_SetConfig+0x11c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <TIM_OC2_SetConfig+0xc0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a1d      	ldr	r2, [pc, #116]	@ (8003f78 <TIM_OC2_SetConfig+0x120>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d007      	beq.n	8003f18 <TIM_OC2_SetConfig+0xc0>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f7c <TIM_OC2_SetConfig+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_OC2_SetConfig+0xc0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a17      	ldr	r2, [pc, #92]	@ (8003f70 <TIM_OC2_SetConfig+0x118>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d113      	bne.n	8003f40 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	621a      	str	r2, [r3, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	40013400 	.word	0x40013400
 8003f70:	40015000 	.word	0x40015000
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800

08003f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0303 	bic.w	r3, r3, #3
 8003fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800408c <TIM_OC3_SetConfig+0x10c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_OC3_SetConfig+0x72>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8004090 <TIM_OC3_SetConfig+0x110>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_OC3_SetConfig+0x72>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a29      	ldr	r2, [pc, #164]	@ (8004094 <TIM_OC3_SetConfig+0x114>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d10d      	bne.n	800400e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800400c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1e      	ldr	r2, [pc, #120]	@ (800408c <TIM_OC3_SetConfig+0x10c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <TIM_OC3_SetConfig+0xbe>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1d      	ldr	r2, [pc, #116]	@ (8004090 <TIM_OC3_SetConfig+0x110>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00f      	beq.n	800403e <TIM_OC3_SetConfig+0xbe>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1d      	ldr	r2, [pc, #116]	@ (8004098 <TIM_OC3_SetConfig+0x118>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00b      	beq.n	800403e <TIM_OC3_SetConfig+0xbe>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1c      	ldr	r2, [pc, #112]	@ (800409c <TIM_OC3_SetConfig+0x11c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d007      	beq.n	800403e <TIM_OC3_SetConfig+0xbe>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a1b      	ldr	r2, [pc, #108]	@ (80040a0 <TIM_OC3_SetConfig+0x120>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <TIM_OC3_SetConfig+0xbe>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a16      	ldr	r2, [pc, #88]	@ (8004094 <TIM_OC3_SetConfig+0x114>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d113      	bne.n	8004066 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	621a      	str	r2, [r3, #32]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40013400 	.word	0x40013400
 8004094:	40015000 	.word	0x40015000
 8004098:	40014000 	.word	0x40014000
 800409c:	40014400 	.word	0x40014400
 80040a0:	40014800 	.word	0x40014800

080040a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a2c      	ldr	r2, [pc, #176]	@ (80041b4 <TIM_OC4_SetConfig+0x110>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <TIM_OC4_SetConfig+0x74>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a2b      	ldr	r2, [pc, #172]	@ (80041b8 <TIM_OC4_SetConfig+0x114>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_OC4_SetConfig+0x74>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a2a      	ldr	r2, [pc, #168]	@ (80041bc <TIM_OC4_SetConfig+0x118>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d10d      	bne.n	8004134 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800411e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	031b      	lsls	r3, r3, #12
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004132:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a1f      	ldr	r2, [pc, #124]	@ (80041b4 <TIM_OC4_SetConfig+0x110>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <TIM_OC4_SetConfig+0xc0>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a1e      	ldr	r2, [pc, #120]	@ (80041b8 <TIM_OC4_SetConfig+0x114>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00f      	beq.n	8004164 <TIM_OC4_SetConfig+0xc0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a1e      	ldr	r2, [pc, #120]	@ (80041c0 <TIM_OC4_SetConfig+0x11c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00b      	beq.n	8004164 <TIM_OC4_SetConfig+0xc0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a1d      	ldr	r2, [pc, #116]	@ (80041c4 <TIM_OC4_SetConfig+0x120>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d007      	beq.n	8004164 <TIM_OC4_SetConfig+0xc0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a1c      	ldr	r2, [pc, #112]	@ (80041c8 <TIM_OC4_SetConfig+0x124>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_OC4_SetConfig+0xc0>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a17      	ldr	r2, [pc, #92]	@ (80041bc <TIM_OC4_SetConfig+0x118>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d113      	bne.n	800418c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800416a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004172:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	019b      	lsls	r3, r3, #6
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	019b      	lsls	r3, r3, #6
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	40013400 	.word	0x40013400
 80041bc:	40015000 	.word	0x40015000
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40014400 	.word	0x40014400
 80041c8:	40014800 	.word	0x40014800

080041cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004210:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	041b      	lsls	r3, r3, #16
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a19      	ldr	r2, [pc, #100]	@ (8004288 <TIM_OC5_SetConfig+0xbc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <TIM_OC5_SetConfig+0x82>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a18      	ldr	r2, [pc, #96]	@ (800428c <TIM_OC5_SetConfig+0xc0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00f      	beq.n	800424e <TIM_OC5_SetConfig+0x82>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a17      	ldr	r2, [pc, #92]	@ (8004290 <TIM_OC5_SetConfig+0xc4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00b      	beq.n	800424e <TIM_OC5_SetConfig+0x82>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a16      	ldr	r2, [pc, #88]	@ (8004294 <TIM_OC5_SetConfig+0xc8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <TIM_OC5_SetConfig+0x82>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a15      	ldr	r2, [pc, #84]	@ (8004298 <TIM_OC5_SetConfig+0xcc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_OC5_SetConfig+0x82>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a14      	ldr	r2, [pc, #80]	@ (800429c <TIM_OC5_SetConfig+0xd0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d109      	bne.n	8004262 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004254:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	621a      	str	r2, [r3, #32]
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40013400 	.word	0x40013400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800
 800429c:	40015000 	.word	0x40015000

080042a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	051b      	lsls	r3, r3, #20
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004360 <TIM_OC6_SetConfig+0xc0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <TIM_OC6_SetConfig+0x84>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a19      	ldr	r2, [pc, #100]	@ (8004364 <TIM_OC6_SetConfig+0xc4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00f      	beq.n	8004324 <TIM_OC6_SetConfig+0x84>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a18      	ldr	r2, [pc, #96]	@ (8004368 <TIM_OC6_SetConfig+0xc8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00b      	beq.n	8004324 <TIM_OC6_SetConfig+0x84>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a17      	ldr	r2, [pc, #92]	@ (800436c <TIM_OC6_SetConfig+0xcc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d007      	beq.n	8004324 <TIM_OC6_SetConfig+0x84>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a16      	ldr	r2, [pc, #88]	@ (8004370 <TIM_OC6_SetConfig+0xd0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_OC6_SetConfig+0x84>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a15      	ldr	r2, [pc, #84]	@ (8004374 <TIM_OC6_SetConfig+0xd4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d109      	bne.n	8004338 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800432a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	029b      	lsls	r3, r3, #10
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40013400 	.word	0x40013400
 8004368:	40014000 	.word	0x40014000
 800436c:	40014400 	.word	0x40014400
 8004370:	40014800 	.word	0x40014800
 8004374:	40015000 	.word	0x40015000

08004378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800438c:	2302      	movs	r3, #2
 800438e:	e06f      	b.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a31      	ldr	r2, [pc, #196]	@ (800447c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d009      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a30      	ldr	r2, [pc, #192]	@ (8004480 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d004      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004484 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d108      	bne.n	80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80043d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80043e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1e      	ldr	r2, [pc, #120]	@ (800447c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d01d      	beq.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004410:	d018      	beq.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1c      	ldr	r2, [pc, #112]	@ (8004488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d013      	beq.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1a      	ldr	r2, [pc, #104]	@ (800448c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00e      	beq.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a15      	ldr	r2, [pc, #84]	@ (8004480 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d009      	beq.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a16      	ldr	r2, [pc, #88]	@ (8004490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a11      	ldr	r2, [pc, #68]	@ (8004484 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d10c      	bne.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800444a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	4313      	orrs	r3, r2
 8004454:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40013400 	.word	0x40013400
 8004484:	40015000 	.word	0x40015000
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800
 8004490:	40014000 	.word	0x40014000

08004494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e042      	b.n	800452c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fc fec7 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2224      	movs	r2, #36	@ 0x24
 80044c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0201 	bic.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 ffb2 	bl	8005448 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fcb3 	bl	8004e50 <UART_SetConfig>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e01b      	b.n	800452c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f001 f831 	bl	800558c <UART_CheckIdleState>
 800452a:	4603      	mov	r3, r0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	@ 0x28
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454a:	2b20      	cmp	r3, #32
 800454c:	d17b      	bne.n	8004646 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_UART_Transmit+0x26>
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e074      	b.n	8004648 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2221      	movs	r2, #33	@ 0x21
 800456a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800456e:	f7fd f825 	bl	80015bc <HAL_GetTick>
 8004572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	88fa      	ldrh	r2, [r7, #6]
 8004580:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458c:	d108      	bne.n	80045a0 <HAL_UART_Transmit+0x6c>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e003      	b.n	80045a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045a8:	e030      	b.n	800460c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2200      	movs	r2, #0
 80045b2:	2180      	movs	r1, #128	@ 0x80
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f001 f893 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e03d      	b.n	8004648 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10b      	bne.n	80045ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	3302      	adds	r3, #2
 80045e6:	61bb      	str	r3, [r7, #24]
 80045e8:	e007      	b.n	80045fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	781a      	ldrb	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	3301      	adds	r3, #1
 80045f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1c8      	bne.n	80045aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2200      	movs	r2, #0
 8004620:	2140      	movs	r1, #64	@ 0x40
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f001 f85c 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e006      	b.n	8004648 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e000      	b.n	8004648 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004646:	2302      	movs	r3, #2
  }
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	@ 0x28
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	4613      	mov	r3, r2
 800465e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004666:	2b20      	cmp	r3, #32
 8004668:	f040 80b5 	bne.w	80047d6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_UART_Receive+0x28>
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e0ad      	b.n	80047d8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2222      	movs	r2, #34	@ 0x22
 8004688:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004692:	f7fc ff93 	bl	80015bc <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046b0:	d10e      	bne.n	80046d0 <HAL_UART_Receive+0x80>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <HAL_UART_Receive+0x76>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80046c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046c4:	e02d      	b.n	8004722 <HAL_UART_Receive+0xd2>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	22ff      	movs	r2, #255	@ 0xff
 80046ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046ce:	e028      	b.n	8004722 <HAL_UART_Receive+0xd2>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10d      	bne.n	80046f4 <HAL_UART_Receive+0xa4>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <HAL_UART_Receive+0x9a>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	22ff      	movs	r2, #255	@ 0xff
 80046e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046e8:	e01b      	b.n	8004722 <HAL_UART_Receive+0xd2>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	227f      	movs	r2, #127	@ 0x7f
 80046ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046f2:	e016      	b.n	8004722 <HAL_UART_Receive+0xd2>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046fc:	d10d      	bne.n	800471a <HAL_UART_Receive+0xca>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <HAL_UART_Receive+0xc0>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	227f      	movs	r2, #127	@ 0x7f
 800470a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800470e:	e008      	b.n	8004722 <HAL_UART_Receive+0xd2>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	223f      	movs	r2, #63	@ 0x3f
 8004714:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004718:	e003      	b.n	8004722 <HAL_UART_Receive+0xd2>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004728:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004732:	d108      	bne.n	8004746 <HAL_UART_Receive+0xf6>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	e003      	b.n	800474e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800474e:	e036      	b.n	80047be <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2200      	movs	r2, #0
 8004758:	2120      	movs	r1, #32
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 ffc0 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e032      	b.n	80047d8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10c      	bne.n	8004792 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	b29a      	uxth	r2, r3
 8004780:	8a7b      	ldrh	r3, [r7, #18]
 8004782:	4013      	ands	r3, r2
 8004784:	b29a      	uxth	r2, r3
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	3302      	adds	r3, #2
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	e00c      	b.n	80047ac <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	b2da      	uxtb	r2, r3
 800479a:	8a7b      	ldrh	r3, [r7, #18]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	4013      	ands	r3, r2
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	3301      	adds	r3, #1
 80047aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1c2      	bne.n	8004750 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e000      	b.n	80047d8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
  }
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3720      	adds	r7, #32
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b0ba      	sub	sp, #232	@ 0xe8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004806:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800480a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800480e:	4013      	ands	r3, r2
 8004810:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d11b      	bne.n	8004854 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800481c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d015      	beq.n	8004854 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 82e3 	beq.w	8004e10 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4798      	blx	r3
      }
      return;
 8004852:	e2dd      	b.n	8004e10 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8123 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800485e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004862:	4b8d      	ldr	r3, [pc, #564]	@ (8004a98 <HAL_UART_IRQHandler+0x2b8>)
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800486a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800486e:	4b8b      	ldr	r3, [pc, #556]	@ (8004a9c <HAL_UART_IRQHandler+0x2bc>)
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8116 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d011      	beq.n	80048a8 <HAL_UART_IRQHandler+0xc8>
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2201      	movs	r2, #1
 8004896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489e:	f043 0201 	orr.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d011      	beq.n	80048d8 <HAL_UART_IRQHandler+0xf8>
 80048b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2202      	movs	r2, #2
 80048c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ce:	f043 0204 	orr.w	r2, r3, #4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d011      	beq.n	8004908 <HAL_UART_IRQHandler+0x128>
 80048e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2204      	movs	r2, #4
 80048f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fe:	f043 0202 	orr.w	r2, r3, #2
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d017      	beq.n	8004944 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004920:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004924:	4b5c      	ldr	r3, [pc, #368]	@ (8004a98 <HAL_UART_IRQHandler+0x2b8>)
 8004926:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00b      	beq.n	8004944 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2208      	movs	r2, #8
 8004932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493a:	f043 0208 	orr.w	r2, r3, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800494c:	2b00      	cmp	r3, #0
 800494e:	d012      	beq.n	8004976 <HAL_UART_IRQHandler+0x196>
 8004950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004954:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00c      	beq.n	8004976 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8249 	beq.w	8004e14 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800499a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800499e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ca:	2b40      	cmp	r3, #64	@ 0x40
 80049cc:	d005      	beq.n	80049da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d054      	beq.n	8004a84 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 ffd5 	bl	800598a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ea:	2b40      	cmp	r3, #64	@ 0x40
 80049ec:	d146      	bne.n	8004a7c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1d9      	bne.n	80049ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d017      	beq.n	8004a74 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a4a:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <HAL_UART_IRQHandler+0x2c0>)
 8004a4c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fd f86b 	bl	8001b30 <HAL_DMA_Abort_IT>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d019      	beq.n	8004a94 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a72:	e00f      	b.n	8004a94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f9e1 	bl	8004e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7a:	e00b      	b.n	8004a94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f9dd 	bl	8004e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a82:	e007      	b.n	8004a94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f9d9 	bl	8004e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004a92:	e1bf      	b.n	8004e14 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	bf00      	nop
    return;
 8004a96:	e1bd      	b.n	8004e14 <HAL_UART_IRQHandler+0x634>
 8004a98:	10000001 	.word	0x10000001
 8004a9c:	04000120 	.word	0x04000120
 8004aa0:	08005c41 	.word	0x08005c41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	f040 8153 	bne.w	8004d54 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 814c 	beq.w	8004d54 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8145 	beq.w	8004d54 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2210      	movs	r2, #16
 8004ad0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004adc:	2b40      	cmp	r3, #64	@ 0x40
 8004ade:	f040 80bb 	bne.w	8004c58 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004af0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 818f 	beq.w	8004e18 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b04:	429a      	cmp	r2, r3
 8004b06:	f080 8187 	bcs.w	8004e18 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 8087 	bne.w	8004c36 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1da      	bne.n	8004b28 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3308      	adds	r3, #8
 8004b78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e1      	bne.n	8004b72 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e3      	bne.n	8004bae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c04:	f023 0310 	bic.w	r3, r3, #16
 8004c08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e4      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fc ff24 	bl	8001a7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7fb fe0f 	bl	8000874 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c56:	e0df      	b.n	8004e18 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80d1 	beq.w	8004e1c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004c7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 80cc 	beq.w	8004e1c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ca8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e4      	bne.n	8004c84 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ce2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e1      	bne.n	8004cba <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0310 	bic.w	r3, r3, #16
 8004d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	69b9      	ldr	r1, [r7, #24]
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	617b      	str	r3, [r7, #20]
   return(result);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e4      	bne.n	8004d0a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7fb fd91 	bl	8000874 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d52:	e063      	b.n	8004e1c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <HAL_UART_IRQHandler+0x59e>
 8004d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 ffa3 	bl	8005cc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d7c:	e051      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d014      	beq.n	8004db4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d105      	bne.n	8004da2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d03a      	beq.n	8004e20 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
    }
    return;
 8004db2:	e035      	b.n	8004e20 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d009      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x5f4>
 8004dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 ff4d 	bl	8005c6c <UART_EndTransmit_IT>
    return;
 8004dd2:	e026      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <HAL_UART_IRQHandler+0x614>
 8004de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 ff7c 	bl	8005cea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004df2:	e016      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d010      	beq.n	8004e22 <HAL_UART_IRQHandler+0x642>
 8004e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	da0c      	bge.n	8004e22 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 ff64 	bl	8005cd6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e0e:	e008      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
      return;
 8004e10:	bf00      	nop
 8004e12:	e006      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
    return;
 8004e14:	bf00      	nop
 8004e16:	e004      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
      return;
 8004e18:	bf00      	nop
 8004e1a:	e002      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
      return;
 8004e1c:	bf00      	nop
 8004e1e:	e000      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
    return;
 8004e20:	bf00      	nop
  }
}
 8004e22:	37e8      	adds	r7, #232	@ 0xe8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e54:	b08c      	sub	sp, #48	@ 0x30
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4baa      	ldr	r3, [pc, #680]	@ (8005128 <UART_SetConfig+0x2d8>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a9f      	ldr	r2, [pc, #636]	@ (800512c <UART_SetConfig+0x2dc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004ec6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	f023 010f 	bic.w	r1, r3, #15
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a90      	ldr	r2, [pc, #576]	@ (8005130 <UART_SetConfig+0x2e0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d125      	bne.n	8004f40 <UART_SetConfig+0xf0>
 8004ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8005134 <UART_SetConfig+0x2e4>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d81a      	bhi.n	8004f38 <UART_SetConfig+0xe8>
 8004f02:	a201      	add	r2, pc, #4	@ (adr r2, 8004f08 <UART_SetConfig+0xb8>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f29 	.word	0x08004f29
 8004f10:	08004f21 	.word	0x08004f21
 8004f14:	08004f31 	.word	0x08004f31
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1e:	e116      	b.n	800514e <UART_SetConfig+0x2fe>
 8004f20:	2302      	movs	r3, #2
 8004f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f26:	e112      	b.n	800514e <UART_SetConfig+0x2fe>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2e:	e10e      	b.n	800514e <UART_SetConfig+0x2fe>
 8004f30:	2308      	movs	r3, #8
 8004f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f36:	e10a      	b.n	800514e <UART_SetConfig+0x2fe>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3e:	e106      	b.n	800514e <UART_SetConfig+0x2fe>
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a7c      	ldr	r2, [pc, #496]	@ (8005138 <UART_SetConfig+0x2e8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d138      	bne.n	8004fbc <UART_SetConfig+0x16c>
 8004f4a:	4b7a      	ldr	r3, [pc, #488]	@ (8005134 <UART_SetConfig+0x2e4>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f50:	f003 030c 	and.w	r3, r3, #12
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	d82d      	bhi.n	8004fb4 <UART_SetConfig+0x164>
 8004f58:	a201      	add	r2, pc, #4	@ (adr r2, 8004f60 <UART_SetConfig+0x110>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f95 	.word	0x08004f95
 8004f64:	08004fb5 	.word	0x08004fb5
 8004f68:	08004fb5 	.word	0x08004fb5
 8004f6c:	08004fb5 	.word	0x08004fb5
 8004f70:	08004fa5 	.word	0x08004fa5
 8004f74:	08004fb5 	.word	0x08004fb5
 8004f78:	08004fb5 	.word	0x08004fb5
 8004f7c:	08004fb5 	.word	0x08004fb5
 8004f80:	08004f9d 	.word	0x08004f9d
 8004f84:	08004fb5 	.word	0x08004fb5
 8004f88:	08004fb5 	.word	0x08004fb5
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fad 	.word	0x08004fad
 8004f94:	2300      	movs	r3, #0
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9a:	e0d8      	b.n	800514e <UART_SetConfig+0x2fe>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fa2:	e0d4      	b.n	800514e <UART_SetConfig+0x2fe>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004faa:	e0d0      	b.n	800514e <UART_SetConfig+0x2fe>
 8004fac:	2308      	movs	r3, #8
 8004fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fb2:	e0cc      	b.n	800514e <UART_SetConfig+0x2fe>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fba:	e0c8      	b.n	800514e <UART_SetConfig+0x2fe>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a5e      	ldr	r2, [pc, #376]	@ (800513c <UART_SetConfig+0x2ec>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d125      	bne.n	8005012 <UART_SetConfig+0x1c2>
 8004fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8005134 <UART_SetConfig+0x2e4>)
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fcc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fd0:	2b30      	cmp	r3, #48	@ 0x30
 8004fd2:	d016      	beq.n	8005002 <UART_SetConfig+0x1b2>
 8004fd4:	2b30      	cmp	r3, #48	@ 0x30
 8004fd6:	d818      	bhi.n	800500a <UART_SetConfig+0x1ba>
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d00a      	beq.n	8004ff2 <UART_SetConfig+0x1a2>
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d814      	bhi.n	800500a <UART_SetConfig+0x1ba>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <UART_SetConfig+0x19a>
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d008      	beq.n	8004ffa <UART_SetConfig+0x1aa>
 8004fe8:	e00f      	b.n	800500a <UART_SetConfig+0x1ba>
 8004fea:	2300      	movs	r3, #0
 8004fec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff0:	e0ad      	b.n	800514e <UART_SetConfig+0x2fe>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff8:	e0a9      	b.n	800514e <UART_SetConfig+0x2fe>
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005000:	e0a5      	b.n	800514e <UART_SetConfig+0x2fe>
 8005002:	2308      	movs	r3, #8
 8005004:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005008:	e0a1      	b.n	800514e <UART_SetConfig+0x2fe>
 800500a:	2310      	movs	r3, #16
 800500c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005010:	e09d      	b.n	800514e <UART_SetConfig+0x2fe>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a4a      	ldr	r2, [pc, #296]	@ (8005140 <UART_SetConfig+0x2f0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d125      	bne.n	8005068 <UART_SetConfig+0x218>
 800501c:	4b45      	ldr	r3, [pc, #276]	@ (8005134 <UART_SetConfig+0x2e4>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005022:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005026:	2bc0      	cmp	r3, #192	@ 0xc0
 8005028:	d016      	beq.n	8005058 <UART_SetConfig+0x208>
 800502a:	2bc0      	cmp	r3, #192	@ 0xc0
 800502c:	d818      	bhi.n	8005060 <UART_SetConfig+0x210>
 800502e:	2b80      	cmp	r3, #128	@ 0x80
 8005030:	d00a      	beq.n	8005048 <UART_SetConfig+0x1f8>
 8005032:	2b80      	cmp	r3, #128	@ 0x80
 8005034:	d814      	bhi.n	8005060 <UART_SetConfig+0x210>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <UART_SetConfig+0x1f0>
 800503a:	2b40      	cmp	r3, #64	@ 0x40
 800503c:	d008      	beq.n	8005050 <UART_SetConfig+0x200>
 800503e:	e00f      	b.n	8005060 <UART_SetConfig+0x210>
 8005040:	2300      	movs	r3, #0
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005046:	e082      	b.n	800514e <UART_SetConfig+0x2fe>
 8005048:	2302      	movs	r3, #2
 800504a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504e:	e07e      	b.n	800514e <UART_SetConfig+0x2fe>
 8005050:	2304      	movs	r3, #4
 8005052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005056:	e07a      	b.n	800514e <UART_SetConfig+0x2fe>
 8005058:	2308      	movs	r3, #8
 800505a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505e:	e076      	b.n	800514e <UART_SetConfig+0x2fe>
 8005060:	2310      	movs	r3, #16
 8005062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005066:	e072      	b.n	800514e <UART_SetConfig+0x2fe>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a35      	ldr	r2, [pc, #212]	@ (8005144 <UART_SetConfig+0x2f4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d12a      	bne.n	80050c8 <UART_SetConfig+0x278>
 8005072:	4b30      	ldr	r3, [pc, #192]	@ (8005134 <UART_SetConfig+0x2e4>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005078:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800507c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005080:	d01a      	beq.n	80050b8 <UART_SetConfig+0x268>
 8005082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005086:	d81b      	bhi.n	80050c0 <UART_SetConfig+0x270>
 8005088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508c:	d00c      	beq.n	80050a8 <UART_SetConfig+0x258>
 800508e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005092:	d815      	bhi.n	80050c0 <UART_SetConfig+0x270>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <UART_SetConfig+0x250>
 8005098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800509c:	d008      	beq.n	80050b0 <UART_SetConfig+0x260>
 800509e:	e00f      	b.n	80050c0 <UART_SetConfig+0x270>
 80050a0:	2300      	movs	r3, #0
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a6:	e052      	b.n	800514e <UART_SetConfig+0x2fe>
 80050a8:	2302      	movs	r3, #2
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ae:	e04e      	b.n	800514e <UART_SetConfig+0x2fe>
 80050b0:	2304      	movs	r3, #4
 80050b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b6:	e04a      	b.n	800514e <UART_SetConfig+0x2fe>
 80050b8:	2308      	movs	r3, #8
 80050ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050be:	e046      	b.n	800514e <UART_SetConfig+0x2fe>
 80050c0:	2310      	movs	r3, #16
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050c6:	e042      	b.n	800514e <UART_SetConfig+0x2fe>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a17      	ldr	r2, [pc, #92]	@ (800512c <UART_SetConfig+0x2dc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d13a      	bne.n	8005148 <UART_SetConfig+0x2f8>
 80050d2:	4b18      	ldr	r3, [pc, #96]	@ (8005134 <UART_SetConfig+0x2e4>)
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050e0:	d01a      	beq.n	8005118 <UART_SetConfig+0x2c8>
 80050e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050e6:	d81b      	bhi.n	8005120 <UART_SetConfig+0x2d0>
 80050e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ec:	d00c      	beq.n	8005108 <UART_SetConfig+0x2b8>
 80050ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050f2:	d815      	bhi.n	8005120 <UART_SetConfig+0x2d0>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <UART_SetConfig+0x2b0>
 80050f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050fc:	d008      	beq.n	8005110 <UART_SetConfig+0x2c0>
 80050fe:	e00f      	b.n	8005120 <UART_SetConfig+0x2d0>
 8005100:	2300      	movs	r3, #0
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005106:	e022      	b.n	800514e <UART_SetConfig+0x2fe>
 8005108:	2302      	movs	r3, #2
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510e:	e01e      	b.n	800514e <UART_SetConfig+0x2fe>
 8005110:	2304      	movs	r3, #4
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005116:	e01a      	b.n	800514e <UART_SetConfig+0x2fe>
 8005118:	2308      	movs	r3, #8
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800511e:	e016      	b.n	800514e <UART_SetConfig+0x2fe>
 8005120:	2310      	movs	r3, #16
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005126:	e012      	b.n	800514e <UART_SetConfig+0x2fe>
 8005128:	cfff69f3 	.word	0xcfff69f3
 800512c:	40008000 	.word	0x40008000
 8005130:	40013800 	.word	0x40013800
 8005134:	40021000 	.word	0x40021000
 8005138:	40004400 	.word	0x40004400
 800513c:	40004800 	.word	0x40004800
 8005140:	40004c00 	.word	0x40004c00
 8005144:	40005000 	.word	0x40005000
 8005148:	2310      	movs	r3, #16
 800514a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4aae      	ldr	r2, [pc, #696]	@ (800540c <UART_SetConfig+0x5bc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	f040 8097 	bne.w	8005288 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800515a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800515e:	2b08      	cmp	r3, #8
 8005160:	d823      	bhi.n	80051aa <UART_SetConfig+0x35a>
 8005162:	a201      	add	r2, pc, #4	@ (adr r2, 8005168 <UART_SetConfig+0x318>)
 8005164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005168:	0800518d 	.word	0x0800518d
 800516c:	080051ab 	.word	0x080051ab
 8005170:	08005195 	.word	0x08005195
 8005174:	080051ab 	.word	0x080051ab
 8005178:	0800519b 	.word	0x0800519b
 800517c:	080051ab 	.word	0x080051ab
 8005180:	080051ab 	.word	0x080051ab
 8005184:	080051ab 	.word	0x080051ab
 8005188:	080051a3 	.word	0x080051a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800518c:	f7fe f85c 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 8005190:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005192:	e010      	b.n	80051b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005194:	4b9e      	ldr	r3, [pc, #632]	@ (8005410 <UART_SetConfig+0x5c0>)
 8005196:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005198:	e00d      	b.n	80051b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800519a:	f7fd ffe7 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800519e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051a0:	e009      	b.n	80051b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051a8:	e005      	b.n	80051b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8130 	beq.w	800541e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	4a94      	ldr	r2, [pc, #592]	@ (8005414 <UART_SetConfig+0x5c4>)
 80051c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c8:	461a      	mov	r2, r3
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	4413      	add	r3, r2
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d305      	bcc.n	80051ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d903      	bls.n	80051f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051f4:	e113      	b.n	800541e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	2200      	movs	r2, #0
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	60fa      	str	r2, [r7, #12]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	4a84      	ldr	r2, [pc, #528]	@ (8005414 <UART_SetConfig+0x5c4>)
 8005204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005208:	b29b      	uxth	r3, r3
 800520a:	2200      	movs	r2, #0
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005214:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005218:	f7fb f852 	bl	80002c0 <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4610      	mov	r0, r2
 8005222:	4619      	mov	r1, r3
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	020b      	lsls	r3, r1, #8
 800522e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005232:	0202      	lsls	r2, r0, #8
 8005234:	6979      	ldr	r1, [r7, #20]
 8005236:	6849      	ldr	r1, [r1, #4]
 8005238:	0849      	lsrs	r1, r1, #1
 800523a:	2000      	movs	r0, #0
 800523c:	460c      	mov	r4, r1
 800523e:	4605      	mov	r5, r0
 8005240:	eb12 0804 	adds.w	r8, r2, r4
 8005244:	eb43 0905 	adc.w	r9, r3, r5
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	469a      	mov	sl, r3
 8005250:	4693      	mov	fp, r2
 8005252:	4652      	mov	r2, sl
 8005254:	465b      	mov	r3, fp
 8005256:	4640      	mov	r0, r8
 8005258:	4649      	mov	r1, r9
 800525a:	f7fb f831 	bl	80002c0 <__aeabi_uldivmod>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4613      	mov	r3, r2
 8005264:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800526c:	d308      	bcc.n	8005280 <UART_SetConfig+0x430>
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005274:	d204      	bcs.n	8005280 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6a3a      	ldr	r2, [r7, #32]
 800527c:	60da      	str	r2, [r3, #12]
 800527e:	e0ce      	b.n	800541e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005286:	e0ca      	b.n	800541e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005290:	d166      	bne.n	8005360 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005292:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005296:	2b08      	cmp	r3, #8
 8005298:	d827      	bhi.n	80052ea <UART_SetConfig+0x49a>
 800529a:	a201      	add	r2, pc, #4	@ (adr r2, 80052a0 <UART_SetConfig+0x450>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052c5 	.word	0x080052c5
 80052a4:	080052cd 	.word	0x080052cd
 80052a8:	080052d5 	.word	0x080052d5
 80052ac:	080052eb 	.word	0x080052eb
 80052b0:	080052db 	.word	0x080052db
 80052b4:	080052eb 	.word	0x080052eb
 80052b8:	080052eb 	.word	0x080052eb
 80052bc:	080052eb 	.word	0x080052eb
 80052c0:	080052e3 	.word	0x080052e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c4:	f7fd ffc0 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 80052c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052ca:	e014      	b.n	80052f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052cc:	f7fd ffd2 	bl	8003274 <HAL_RCC_GetPCLK2Freq>
 80052d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052d2:	e010      	b.n	80052f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d4:	4b4e      	ldr	r3, [pc, #312]	@ (8005410 <UART_SetConfig+0x5c0>)
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052d8:	e00d      	b.n	80052f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052da:	f7fd ff47 	bl	800316c <HAL_RCC_GetSysClockFreq>
 80052de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052e0:	e009      	b.n	80052f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052e8:	e005      	b.n	80052f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 8090 	beq.w	800541e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	4a44      	ldr	r2, [pc, #272]	@ (8005414 <UART_SetConfig+0x5c4>)
 8005304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005308:	461a      	mov	r2, r3
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005310:	005a      	lsls	r2, r3, #1
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	441a      	add	r2, r3
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	2b0f      	cmp	r3, #15
 8005328:	d916      	bls.n	8005358 <UART_SetConfig+0x508>
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005330:	d212      	bcs.n	8005358 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f023 030f 	bic.w	r3, r3, #15
 800533a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	085b      	lsrs	r3, r3, #1
 8005340:	b29b      	uxth	r3, r3
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	b29a      	uxth	r2, r3
 8005348:	8bfb      	ldrh	r3, [r7, #30]
 800534a:	4313      	orrs	r3, r2
 800534c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	8bfa      	ldrh	r2, [r7, #30]
 8005354:	60da      	str	r2, [r3, #12]
 8005356:	e062      	b.n	800541e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800535e:	e05e      	b.n	800541e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005360:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005364:	2b08      	cmp	r3, #8
 8005366:	d828      	bhi.n	80053ba <UART_SetConfig+0x56a>
 8005368:	a201      	add	r2, pc, #4	@ (adr r2, 8005370 <UART_SetConfig+0x520>)
 800536a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536e:	bf00      	nop
 8005370:	08005395 	.word	0x08005395
 8005374:	0800539d 	.word	0x0800539d
 8005378:	080053a5 	.word	0x080053a5
 800537c:	080053bb 	.word	0x080053bb
 8005380:	080053ab 	.word	0x080053ab
 8005384:	080053bb 	.word	0x080053bb
 8005388:	080053bb 	.word	0x080053bb
 800538c:	080053bb 	.word	0x080053bb
 8005390:	080053b3 	.word	0x080053b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005394:	f7fd ff58 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 8005398:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800539a:	e014      	b.n	80053c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800539c:	f7fd ff6a 	bl	8003274 <HAL_RCC_GetPCLK2Freq>
 80053a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053a2:	e010      	b.n	80053c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005410 <UART_SetConfig+0x5c0>)
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053a8:	e00d      	b.n	80053c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053aa:	f7fd fedf 	bl	800316c <HAL_RCC_GetSysClockFreq>
 80053ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053b0:	e009      	b.n	80053c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053b8:	e005      	b.n	80053c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053c4:	bf00      	nop
    }

    if (pclk != 0U)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d028      	beq.n	800541e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d0:	4a10      	ldr	r2, [pc, #64]	@ (8005414 <UART_SetConfig+0x5c4>)
 80053d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d6:	461a      	mov	r2, r3
 80053d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053da:	fbb3 f2f2 	udiv	r2, r3, r2
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	085b      	lsrs	r3, r3, #1
 80053e4:	441a      	add	r2, r3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	2b0f      	cmp	r3, #15
 80053f4:	d910      	bls.n	8005418 <UART_SetConfig+0x5c8>
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053fc:	d20c      	bcs.n	8005418 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	b29a      	uxth	r2, r3
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60da      	str	r2, [r3, #12]
 8005408:	e009      	b.n	800541e <UART_SetConfig+0x5ce>
 800540a:	bf00      	nop
 800540c:	40008000 	.word	0x40008000
 8005410:	00f42400 	.word	0x00f42400
 8005414:	08006f40 	.word	0x08006f40
      }
      else
      {
        ret = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2201      	movs	r2, #1
 8005422:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2201      	movs	r2, #1
 800542a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2200      	movs	r2, #0
 8005432:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2200      	movs	r2, #0
 8005438:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800543a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800543e:	4618      	mov	r0, r3
 8005440:	3730      	adds	r7, #48	@ 0x30
 8005442:	46bd      	mov	sp, r7
 8005444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01a      	beq.n	800555e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005546:	d10a      	bne.n	800555e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
  }
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b098      	sub	sp, #96	@ 0x60
 8005590:	af02      	add	r7, sp, #8
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800559c:	f7fc f80e 	bl	80015bc <HAL_GetTick>
 80055a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d12f      	bne.n	8005610 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b8:	2200      	movs	r2, #0
 80055ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f88e 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d022      	beq.n	8005610 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055de:	653b      	str	r3, [r7, #80]	@ 0x50
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e6      	bne.n	80055ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e063      	b.n	80056d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b04      	cmp	r3, #4
 800561c:	d149      	bne.n	80056b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800561e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005626:	2200      	movs	r2, #0
 8005628:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f857 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d03c      	beq.n	80056b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	623b      	str	r3, [r7, #32]
   return(result);
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800564c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005656:	633b      	str	r3, [r7, #48]	@ 0x30
 8005658:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800565c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e6      	bne.n	8005638 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3308      	adds	r3, #8
 8005670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	60fb      	str	r3, [r7, #12]
   return(result);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800568a:	61fa      	str	r2, [r7, #28]
 800568c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	69b9      	ldr	r1, [r7, #24]
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	617b      	str	r3, [r7, #20]
   return(result);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e5      	bne.n	800566a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e012      	b.n	80056d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3758      	adds	r7, #88	@ 0x58
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f0:	e04f      	b.n	8005792 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056f8:	d04b      	beq.n	8005792 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fa:	f7fb ff5f 	bl	80015bc <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	429a      	cmp	r2, r3
 8005708:	d302      	bcc.n	8005710 <UART_WaitOnFlagUntilTimeout+0x30>
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e04e      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	d037      	beq.n	8005792 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b80      	cmp	r3, #128	@ 0x80
 8005726:	d034      	beq.n	8005792 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b40      	cmp	r3, #64	@ 0x40
 800572c:	d031      	beq.n	8005792 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b08      	cmp	r3, #8
 800573a:	d110      	bne.n	800575e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2208      	movs	r2, #8
 8005742:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f920 	bl	800598a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2208      	movs	r2, #8
 800574e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e029      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800576c:	d111      	bne.n	8005792 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005776:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f906 	bl	800598a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2220      	movs	r2, #32
 8005782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e00f      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4013      	ands	r3, r2
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	429a      	cmp	r2, r3
 80057a0:	bf0c      	ite	eq
 80057a2:	2301      	moveq	r3, #1
 80057a4:	2300      	movne	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	461a      	mov	r2, r3
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d0a0      	beq.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b096      	sub	sp, #88	@ 0x58
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	88fa      	ldrh	r2, [r7, #6]
 80057d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2222      	movs	r2, #34	@ 0x22
 80057e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d02d      	beq.n	800584e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f8:	4a40      	ldr	r2, [pc, #256]	@ (80058fc <UART_Start_Receive_DMA+0x140>)
 80057fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005802:	4a3f      	ldr	r2, [pc, #252]	@ (8005900 <UART_Start_Receive_DMA+0x144>)
 8005804:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800580c:	4a3d      	ldr	r2, [pc, #244]	@ (8005904 <UART_Start_Receive_DMA+0x148>)
 800580e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005816:	2200      	movs	r2, #0
 8005818:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3324      	adds	r3, #36	@ 0x24
 8005826:	4619      	mov	r1, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582c:	461a      	mov	r2, r3
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	f7fc f8aa 	bl	8001988 <HAL_DMA_Start_IT>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2210      	movs	r2, #16
 800583e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e051      	b.n	80058f2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d018      	beq.n	8005888 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800586a:	657b      	str	r3, [r7, #84]	@ 0x54
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005874:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005876:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800587a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e6      	bne.n	8005856 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3308      	adds	r3, #8
 800588e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	653b      	str	r3, [r7, #80]	@ 0x50
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3308      	adds	r3, #8
 80058a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80058a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80058aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80058b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e5      	bne.n	8005888 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3308      	adds	r3, #8
 80058c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	613b      	str	r3, [r7, #16]
   return(result);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3308      	adds	r3, #8
 80058da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058dc:	623a      	str	r2, [r7, #32]
 80058de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	69f9      	ldr	r1, [r7, #28]
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e5      	bne.n	80058bc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3758      	adds	r7, #88	@ 0x58
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	08005a57 	.word	0x08005a57
 8005900:	08005b83 	.word	0x08005b83
 8005904:	08005bc1 	.word	0x08005bc1

08005908 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005908:	b480      	push	{r7}
 800590a:	b08f      	sub	sp, #60	@ 0x3c
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	61fb      	str	r3, [r7, #28]
   return(result);
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005924:	637b      	str	r3, [r7, #52]	@ 0x34
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005930:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e6      	bne.n	8005910 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3308      	adds	r3, #8
 8005948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	60bb      	str	r3, [r7, #8]
   return(result);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005958:	633b      	str	r3, [r7, #48]	@ 0x30
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3308      	adds	r3, #8
 8005960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005962:	61ba      	str	r2, [r7, #24]
 8005964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6979      	ldr	r1, [r7, #20]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	613b      	str	r3, [r7, #16]
   return(result);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e5      	bne.n	8005942 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800597e:	bf00      	nop
 8005980:	373c      	adds	r7, #60	@ 0x3c
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800598a:	b480      	push	{r7}
 800598c:	b095      	sub	sp, #84	@ 0x54
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80059b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e6      	bne.n	8005992 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3308      	adds	r3, #8
 80059ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059da:	f023 0301 	bic.w	r3, r3, #1
 80059de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3308      	adds	r3, #8
 80059e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e3      	bne.n	80059c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d118      	bne.n	8005a36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f023 0310 	bic.w	r3, r3, #16
 8005a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6979      	ldr	r1, [r7, #20]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e6      	bne.n	8005a04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a4a:	bf00      	nop
 8005a4c:	3754      	adds	r7, #84	@ 0x54
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b09c      	sub	sp, #112	@ 0x70
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a62:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d171      	bne.n	8005b56 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a82:	e853 3f00 	ldrex	r3, [r3]
 8005a86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a9a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e6      	bne.n	8005a7a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abe:	f023 0301 	bic.w	r3, r3, #1
 8005ac2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005acc:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ace:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e5      	bne.n	8005aac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	623b      	str	r3, [r7, #32]
   return(result);
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005af6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3308      	adds	r3, #8
 8005afe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b00:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e5      	bne.n	8005ae0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b16:	2220      	movs	r2, #32
 8005b18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d118      	bne.n	8005b56 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f023 0310 	bic.w	r3, r3, #16
 8005b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	69b9      	ldr	r1, [r7, #24]
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e6      	bne.n	8005b24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b58:	2200      	movs	r2, #0
 8005b5a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d107      	bne.n	8005b74 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b6e:	f7fa fe81 	bl	8000874 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b72:	e002      	b.n	8005b7a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005b74:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b76:	f7fa feb9 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 8005b7a:	bf00      	nop
 8005b7c:	3770      	adds	r7, #112	@ 0x70
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d109      	bne.n	8005bb2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	4619      	mov	r1, r3
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f7fa fe62 	bl	8000874 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bb0:	e002      	b.n	8005bb8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7fa fe90 	bl	80008d8 <HAL_UART_RxHalfCpltCallback>
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bcc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be8:	2b80      	cmp	r3, #128	@ 0x80
 8005bea:	d109      	bne.n	8005c00 <UART_DMAError+0x40>
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	2b21      	cmp	r3, #33	@ 0x21
 8005bf0:	d106      	bne.n	8005c00 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005bfa:	6978      	ldr	r0, [r7, #20]
 8005bfc:	f7ff fe84 	bl	8005908 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0a:	2b40      	cmp	r3, #64	@ 0x40
 8005c0c:	d109      	bne.n	8005c22 <UART_DMAError+0x62>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b22      	cmp	r3, #34	@ 0x22
 8005c12:	d106      	bne.n	8005c22 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005c1c:	6978      	ldr	r0, [r7, #20]
 8005c1e:	f7ff feb4 	bl	800598a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c28:	f043 0210 	orr.w	r2, r3, #16
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c32:	6978      	ldr	r0, [r7, #20]
 8005c34:	f7ff f902 	bl	8004e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c38:	bf00      	nop
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff f8ec 	bl	8004e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c88:	61fb      	str	r3, [r7, #28]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6979      	ldr	r1, [r7, #20]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e6      	bne.n	8005c74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff f8b7 	bl	8004e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cba:	bf00      	nop
 8005cbc:	3720      	adds	r7, #32
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e027      	b.n	8005d64 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2224      	movs	r2, #36	@ 0x24
 8005d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0201 	bic.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005d42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e02d      	b.n	8005de4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2224      	movs	r2, #36	@ 0x24
 8005d94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f8a3 	bl	8005f10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e02d      	b.n	8005e60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2224      	movs	r2, #36	@ 0x24
 8005e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0201 	bic.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f865 	bl	8005f10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08c      	sub	sp, #48	@ 0x30
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d142      	bne.n	8005f06 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e03b      	b.n	8005f08 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	68b9      	ldr	r1, [r7, #8]
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7ff fc8a 	bl	80057bc <UART_Start_Receive_DMA>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005eae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d124      	bne.n	8005f00 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d11d      	bne.n	8005efa <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2210      	movs	r2, #16
 8005ec4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f043 0310 	orr.w	r3, r3, #16
 8005eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6a39      	ldr	r1, [r7, #32]
 8005eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e6      	bne.n	8005ec6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8005ef8:	e002      	b.n	8005f00 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005f00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f04:	e000      	b.n	8005f08 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005f06:	2302      	movs	r3, #2
  }
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3730      	adds	r7, #48	@ 0x30
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d108      	bne.n	8005f32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f30:	e031      	b.n	8005f96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f32:	2308      	movs	r3, #8
 8005f34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f36:	2308      	movs	r3, #8
 8005f38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	0e5b      	lsrs	r3, r3, #25
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	0f5b      	lsrs	r3, r3, #29
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f5a:	7bbb      	ldrb	r3, [r7, #14]
 8005f5c:	7b3a      	ldrb	r2, [r7, #12]
 8005f5e:	4911      	ldr	r1, [pc, #68]	@ (8005fa4 <UARTEx_SetNbDataToProcess+0x94>)
 8005f60:	5c8a      	ldrb	r2, [r1, r2]
 8005f62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f66:	7b3a      	ldrb	r2, [r7, #12]
 8005f68:	490f      	ldr	r1, [pc, #60]	@ (8005fa8 <UARTEx_SetNbDataToProcess+0x98>)
 8005f6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	7b7a      	ldrb	r2, [r7, #13]
 8005f7c:	4909      	ldr	r1, [pc, #36]	@ (8005fa4 <UARTEx_SetNbDataToProcess+0x94>)
 8005f7e:	5c8a      	ldrb	r2, [r1, r2]
 8005f80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f84:	7b7a      	ldrb	r2, [r7, #13]
 8005f86:	4908      	ldr	r1, [pc, #32]	@ (8005fa8 <UARTEx_SetNbDataToProcess+0x98>)
 8005f88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	08006f58 	.word	0x08006f58
 8005fa8:	08006f60 	.word	0x08006f60

08005fac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fb4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005fb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	4013      	ands	r3, r2
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	1d3b      	adds	r3, r7, #4
 8005fec:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <std>:
 8006020:	2300      	movs	r3, #0
 8006022:	b510      	push	{r4, lr}
 8006024:	4604      	mov	r4, r0
 8006026:	e9c0 3300 	strd	r3, r3, [r0]
 800602a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800602e:	6083      	str	r3, [r0, #8]
 8006030:	8181      	strh	r1, [r0, #12]
 8006032:	6643      	str	r3, [r0, #100]	@ 0x64
 8006034:	81c2      	strh	r2, [r0, #14]
 8006036:	6183      	str	r3, [r0, #24]
 8006038:	4619      	mov	r1, r3
 800603a:	2208      	movs	r2, #8
 800603c:	305c      	adds	r0, #92	@ 0x5c
 800603e:	f000 f906 	bl	800624e <memset>
 8006042:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <std+0x58>)
 8006044:	6263      	str	r3, [r4, #36]	@ 0x24
 8006046:	4b0d      	ldr	r3, [pc, #52]	@ (800607c <std+0x5c>)
 8006048:	62a3      	str	r3, [r4, #40]	@ 0x28
 800604a:	4b0d      	ldr	r3, [pc, #52]	@ (8006080 <std+0x60>)
 800604c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800604e:	4b0d      	ldr	r3, [pc, #52]	@ (8006084 <std+0x64>)
 8006050:	6323      	str	r3, [r4, #48]	@ 0x30
 8006052:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <std+0x68>)
 8006054:	6224      	str	r4, [r4, #32]
 8006056:	429c      	cmp	r4, r3
 8006058:	d006      	beq.n	8006068 <std+0x48>
 800605a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800605e:	4294      	cmp	r4, r2
 8006060:	d002      	beq.n	8006068 <std+0x48>
 8006062:	33d0      	adds	r3, #208	@ 0xd0
 8006064:	429c      	cmp	r4, r3
 8006066:	d105      	bne.n	8006074 <std+0x54>
 8006068:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800606c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006070:	f000 b966 	b.w	8006340 <__retarget_lock_init_recursive>
 8006074:	bd10      	pop	{r4, pc}
 8006076:	bf00      	nop
 8006078:	080061c9 	.word	0x080061c9
 800607c:	080061eb 	.word	0x080061eb
 8006080:	08006223 	.word	0x08006223
 8006084:	08006247 	.word	0x08006247
 8006088:	20005e54 	.word	0x20005e54

0800608c <stdio_exit_handler>:
 800608c:	4a02      	ldr	r2, [pc, #8]	@ (8006098 <stdio_exit_handler+0xc>)
 800608e:	4903      	ldr	r1, [pc, #12]	@ (800609c <stdio_exit_handler+0x10>)
 8006090:	4803      	ldr	r0, [pc, #12]	@ (80060a0 <stdio_exit_handler+0x14>)
 8006092:	f000 b869 	b.w	8006168 <_fwalk_sglue>
 8006096:	bf00      	nop
 8006098:	2000000c 	.word	0x2000000c
 800609c:	08006bfd 	.word	0x08006bfd
 80060a0:	2000001c 	.word	0x2000001c

080060a4 <cleanup_stdio>:
 80060a4:	6841      	ldr	r1, [r0, #4]
 80060a6:	4b0c      	ldr	r3, [pc, #48]	@ (80060d8 <cleanup_stdio+0x34>)
 80060a8:	4299      	cmp	r1, r3
 80060aa:	b510      	push	{r4, lr}
 80060ac:	4604      	mov	r4, r0
 80060ae:	d001      	beq.n	80060b4 <cleanup_stdio+0x10>
 80060b0:	f000 fda4 	bl	8006bfc <_fflush_r>
 80060b4:	68a1      	ldr	r1, [r4, #8]
 80060b6:	4b09      	ldr	r3, [pc, #36]	@ (80060dc <cleanup_stdio+0x38>)
 80060b8:	4299      	cmp	r1, r3
 80060ba:	d002      	beq.n	80060c2 <cleanup_stdio+0x1e>
 80060bc:	4620      	mov	r0, r4
 80060be:	f000 fd9d 	bl	8006bfc <_fflush_r>
 80060c2:	68e1      	ldr	r1, [r4, #12]
 80060c4:	4b06      	ldr	r3, [pc, #24]	@ (80060e0 <cleanup_stdio+0x3c>)
 80060c6:	4299      	cmp	r1, r3
 80060c8:	d004      	beq.n	80060d4 <cleanup_stdio+0x30>
 80060ca:	4620      	mov	r0, r4
 80060cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d0:	f000 bd94 	b.w	8006bfc <_fflush_r>
 80060d4:	bd10      	pop	{r4, pc}
 80060d6:	bf00      	nop
 80060d8:	20005e54 	.word	0x20005e54
 80060dc:	20005ebc 	.word	0x20005ebc
 80060e0:	20005f24 	.word	0x20005f24

080060e4 <global_stdio_init.part.0>:
 80060e4:	b510      	push	{r4, lr}
 80060e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006114 <global_stdio_init.part.0+0x30>)
 80060e8:	4c0b      	ldr	r4, [pc, #44]	@ (8006118 <global_stdio_init.part.0+0x34>)
 80060ea:	4a0c      	ldr	r2, [pc, #48]	@ (800611c <global_stdio_init.part.0+0x38>)
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	4620      	mov	r0, r4
 80060f0:	2200      	movs	r2, #0
 80060f2:	2104      	movs	r1, #4
 80060f4:	f7ff ff94 	bl	8006020 <std>
 80060f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060fc:	2201      	movs	r2, #1
 80060fe:	2109      	movs	r1, #9
 8006100:	f7ff ff8e 	bl	8006020 <std>
 8006104:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006108:	2202      	movs	r2, #2
 800610a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800610e:	2112      	movs	r1, #18
 8006110:	f7ff bf86 	b.w	8006020 <std>
 8006114:	20005f8c 	.word	0x20005f8c
 8006118:	20005e54 	.word	0x20005e54
 800611c:	0800608d 	.word	0x0800608d

08006120 <__sfp_lock_acquire>:
 8006120:	4801      	ldr	r0, [pc, #4]	@ (8006128 <__sfp_lock_acquire+0x8>)
 8006122:	f000 b90e 	b.w	8006342 <__retarget_lock_acquire_recursive>
 8006126:	bf00      	nop
 8006128:	20005f95 	.word	0x20005f95

0800612c <__sfp_lock_release>:
 800612c:	4801      	ldr	r0, [pc, #4]	@ (8006134 <__sfp_lock_release+0x8>)
 800612e:	f000 b909 	b.w	8006344 <__retarget_lock_release_recursive>
 8006132:	bf00      	nop
 8006134:	20005f95 	.word	0x20005f95

08006138 <__sinit>:
 8006138:	b510      	push	{r4, lr}
 800613a:	4604      	mov	r4, r0
 800613c:	f7ff fff0 	bl	8006120 <__sfp_lock_acquire>
 8006140:	6a23      	ldr	r3, [r4, #32]
 8006142:	b11b      	cbz	r3, 800614c <__sinit+0x14>
 8006144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006148:	f7ff bff0 	b.w	800612c <__sfp_lock_release>
 800614c:	4b04      	ldr	r3, [pc, #16]	@ (8006160 <__sinit+0x28>)
 800614e:	6223      	str	r3, [r4, #32]
 8006150:	4b04      	ldr	r3, [pc, #16]	@ (8006164 <__sinit+0x2c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f5      	bne.n	8006144 <__sinit+0xc>
 8006158:	f7ff ffc4 	bl	80060e4 <global_stdio_init.part.0>
 800615c:	e7f2      	b.n	8006144 <__sinit+0xc>
 800615e:	bf00      	nop
 8006160:	080060a5 	.word	0x080060a5
 8006164:	20005f8c 	.word	0x20005f8c

08006168 <_fwalk_sglue>:
 8006168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800616c:	4607      	mov	r7, r0
 800616e:	4688      	mov	r8, r1
 8006170:	4614      	mov	r4, r2
 8006172:	2600      	movs	r6, #0
 8006174:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006178:	f1b9 0901 	subs.w	r9, r9, #1
 800617c:	d505      	bpl.n	800618a <_fwalk_sglue+0x22>
 800617e:	6824      	ldr	r4, [r4, #0]
 8006180:	2c00      	cmp	r4, #0
 8006182:	d1f7      	bne.n	8006174 <_fwalk_sglue+0xc>
 8006184:	4630      	mov	r0, r6
 8006186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d907      	bls.n	80061a0 <_fwalk_sglue+0x38>
 8006190:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006194:	3301      	adds	r3, #1
 8006196:	d003      	beq.n	80061a0 <_fwalk_sglue+0x38>
 8006198:	4629      	mov	r1, r5
 800619a:	4638      	mov	r0, r7
 800619c:	47c0      	blx	r8
 800619e:	4306      	orrs	r6, r0
 80061a0:	3568      	adds	r5, #104	@ 0x68
 80061a2:	e7e9      	b.n	8006178 <_fwalk_sglue+0x10>

080061a4 <iprintf>:
 80061a4:	b40f      	push	{r0, r1, r2, r3}
 80061a6:	b507      	push	{r0, r1, r2, lr}
 80061a8:	4906      	ldr	r1, [pc, #24]	@ (80061c4 <iprintf+0x20>)
 80061aa:	ab04      	add	r3, sp, #16
 80061ac:	6808      	ldr	r0, [r1, #0]
 80061ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80061b2:	6881      	ldr	r1, [r0, #8]
 80061b4:	9301      	str	r3, [sp, #4]
 80061b6:	f000 f9f7 	bl	80065a8 <_vfiprintf_r>
 80061ba:	b003      	add	sp, #12
 80061bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80061c0:	b004      	add	sp, #16
 80061c2:	4770      	bx	lr
 80061c4:	20000018 	.word	0x20000018

080061c8 <__sread>:
 80061c8:	b510      	push	{r4, lr}
 80061ca:	460c      	mov	r4, r1
 80061cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d0:	f000 f868 	bl	80062a4 <_read_r>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	bfab      	itete	ge
 80061d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061da:	89a3      	ldrhlt	r3, [r4, #12]
 80061dc:	181b      	addge	r3, r3, r0
 80061de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061e2:	bfac      	ite	ge
 80061e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061e6:	81a3      	strhlt	r3, [r4, #12]
 80061e8:	bd10      	pop	{r4, pc}

080061ea <__swrite>:
 80061ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ee:	461f      	mov	r7, r3
 80061f0:	898b      	ldrh	r3, [r1, #12]
 80061f2:	05db      	lsls	r3, r3, #23
 80061f4:	4605      	mov	r5, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	4616      	mov	r6, r2
 80061fa:	d505      	bpl.n	8006208 <__swrite+0x1e>
 80061fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006200:	2302      	movs	r3, #2
 8006202:	2200      	movs	r2, #0
 8006204:	f000 f83c 	bl	8006280 <_lseek_r>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800620e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006212:	81a3      	strh	r3, [r4, #12]
 8006214:	4632      	mov	r2, r6
 8006216:	463b      	mov	r3, r7
 8006218:	4628      	mov	r0, r5
 800621a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800621e:	f000 b853 	b.w	80062c8 <_write_r>

08006222 <__sseek>:
 8006222:	b510      	push	{r4, lr}
 8006224:	460c      	mov	r4, r1
 8006226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800622a:	f000 f829 	bl	8006280 <_lseek_r>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	bf15      	itete	ne
 8006234:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006236:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800623a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800623e:	81a3      	strheq	r3, [r4, #12]
 8006240:	bf18      	it	ne
 8006242:	81a3      	strhne	r3, [r4, #12]
 8006244:	bd10      	pop	{r4, pc}

08006246 <__sclose>:
 8006246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800624a:	f000 b809 	b.w	8006260 <_close_r>

0800624e <memset>:
 800624e:	4402      	add	r2, r0
 8006250:	4603      	mov	r3, r0
 8006252:	4293      	cmp	r3, r2
 8006254:	d100      	bne.n	8006258 <memset+0xa>
 8006256:	4770      	bx	lr
 8006258:	f803 1b01 	strb.w	r1, [r3], #1
 800625c:	e7f9      	b.n	8006252 <memset+0x4>
	...

08006260 <_close_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4d06      	ldr	r5, [pc, #24]	@ (800627c <_close_r+0x1c>)
 8006264:	2300      	movs	r3, #0
 8006266:	4604      	mov	r4, r0
 8006268:	4608      	mov	r0, r1
 800626a:	602b      	str	r3, [r5, #0]
 800626c:	f7fa fd9a 	bl	8000da4 <_close>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d102      	bne.n	800627a <_close_r+0x1a>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	b103      	cbz	r3, 800627a <_close_r+0x1a>
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	20005f90 	.word	0x20005f90

08006280 <_lseek_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4d07      	ldr	r5, [pc, #28]	@ (80062a0 <_lseek_r+0x20>)
 8006284:	4604      	mov	r4, r0
 8006286:	4608      	mov	r0, r1
 8006288:	4611      	mov	r1, r2
 800628a:	2200      	movs	r2, #0
 800628c:	602a      	str	r2, [r5, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	f7fa fdaf 	bl	8000df2 <_lseek>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_lseek_r+0x1e>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	b103      	cbz	r3, 800629e <_lseek_r+0x1e>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	20005f90 	.word	0x20005f90

080062a4 <_read_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4d07      	ldr	r5, [pc, #28]	@ (80062c4 <_read_r+0x20>)
 80062a8:	4604      	mov	r4, r0
 80062aa:	4608      	mov	r0, r1
 80062ac:	4611      	mov	r1, r2
 80062ae:	2200      	movs	r2, #0
 80062b0:	602a      	str	r2, [r5, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	f7fa fab6 	bl	8000824 <_read>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_read_r+0x1e>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_read_r+0x1e>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	20005f90 	.word	0x20005f90

080062c8 <_write_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4d07      	ldr	r5, [pc, #28]	@ (80062e8 <_write_r+0x20>)
 80062cc:	4604      	mov	r4, r0
 80062ce:	4608      	mov	r0, r1
 80062d0:	4611      	mov	r1, r2
 80062d2:	2200      	movs	r2, #0
 80062d4:	602a      	str	r2, [r5, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f7fa fab8 	bl	800084c <_write>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d102      	bne.n	80062e6 <_write_r+0x1e>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	b103      	cbz	r3, 80062e6 <_write_r+0x1e>
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
 80062e8:	20005f90 	.word	0x20005f90

080062ec <__errno>:
 80062ec:	4b01      	ldr	r3, [pc, #4]	@ (80062f4 <__errno+0x8>)
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000018 	.word	0x20000018

080062f8 <__libc_init_array>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006330 <__libc_init_array+0x38>)
 80062fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006334 <__libc_init_array+0x3c>)
 80062fe:	1b64      	subs	r4, r4, r5
 8006300:	10a4      	asrs	r4, r4, #2
 8006302:	2600      	movs	r6, #0
 8006304:	42a6      	cmp	r6, r4
 8006306:	d109      	bne.n	800631c <__libc_init_array+0x24>
 8006308:	4d0b      	ldr	r5, [pc, #44]	@ (8006338 <__libc_init_array+0x40>)
 800630a:	4c0c      	ldr	r4, [pc, #48]	@ (800633c <__libc_init_array+0x44>)
 800630c:	f000 fdc6 	bl	8006e9c <_init>
 8006310:	1b64      	subs	r4, r4, r5
 8006312:	10a4      	asrs	r4, r4, #2
 8006314:	2600      	movs	r6, #0
 8006316:	42a6      	cmp	r6, r4
 8006318:	d105      	bne.n	8006326 <__libc_init_array+0x2e>
 800631a:	bd70      	pop	{r4, r5, r6, pc}
 800631c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006320:	4798      	blx	r3
 8006322:	3601      	adds	r6, #1
 8006324:	e7ee      	b.n	8006304 <__libc_init_array+0xc>
 8006326:	f855 3b04 	ldr.w	r3, [r5], #4
 800632a:	4798      	blx	r3
 800632c:	3601      	adds	r6, #1
 800632e:	e7f2      	b.n	8006316 <__libc_init_array+0x1e>
 8006330:	08006fa4 	.word	0x08006fa4
 8006334:	08006fa4 	.word	0x08006fa4
 8006338:	08006fa4 	.word	0x08006fa4
 800633c:	08006fa8 	.word	0x08006fa8

08006340 <__retarget_lock_init_recursive>:
 8006340:	4770      	bx	lr

08006342 <__retarget_lock_acquire_recursive>:
 8006342:	4770      	bx	lr

08006344 <__retarget_lock_release_recursive>:
 8006344:	4770      	bx	lr

08006346 <memcpy>:
 8006346:	440a      	add	r2, r1
 8006348:	4291      	cmp	r1, r2
 800634a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800634e:	d100      	bne.n	8006352 <memcpy+0xc>
 8006350:	4770      	bx	lr
 8006352:	b510      	push	{r4, lr}
 8006354:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006358:	f803 4f01 	strb.w	r4, [r3, #1]!
 800635c:	4291      	cmp	r1, r2
 800635e:	d1f9      	bne.n	8006354 <memcpy+0xe>
 8006360:	bd10      	pop	{r4, pc}
	...

08006364 <_free_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4605      	mov	r5, r0
 8006368:	2900      	cmp	r1, #0
 800636a:	d041      	beq.n	80063f0 <_free_r+0x8c>
 800636c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006370:	1f0c      	subs	r4, r1, #4
 8006372:	2b00      	cmp	r3, #0
 8006374:	bfb8      	it	lt
 8006376:	18e4      	addlt	r4, r4, r3
 8006378:	f000 f8e0 	bl	800653c <__malloc_lock>
 800637c:	4a1d      	ldr	r2, [pc, #116]	@ (80063f4 <_free_r+0x90>)
 800637e:	6813      	ldr	r3, [r2, #0]
 8006380:	b933      	cbnz	r3, 8006390 <_free_r+0x2c>
 8006382:	6063      	str	r3, [r4, #4]
 8006384:	6014      	str	r4, [r2, #0]
 8006386:	4628      	mov	r0, r5
 8006388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800638c:	f000 b8dc 	b.w	8006548 <__malloc_unlock>
 8006390:	42a3      	cmp	r3, r4
 8006392:	d908      	bls.n	80063a6 <_free_r+0x42>
 8006394:	6820      	ldr	r0, [r4, #0]
 8006396:	1821      	adds	r1, r4, r0
 8006398:	428b      	cmp	r3, r1
 800639a:	bf01      	itttt	eq
 800639c:	6819      	ldreq	r1, [r3, #0]
 800639e:	685b      	ldreq	r3, [r3, #4]
 80063a0:	1809      	addeq	r1, r1, r0
 80063a2:	6021      	streq	r1, [r4, #0]
 80063a4:	e7ed      	b.n	8006382 <_free_r+0x1e>
 80063a6:	461a      	mov	r2, r3
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	b10b      	cbz	r3, 80063b0 <_free_r+0x4c>
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	d9fa      	bls.n	80063a6 <_free_r+0x42>
 80063b0:	6811      	ldr	r1, [r2, #0]
 80063b2:	1850      	adds	r0, r2, r1
 80063b4:	42a0      	cmp	r0, r4
 80063b6:	d10b      	bne.n	80063d0 <_free_r+0x6c>
 80063b8:	6820      	ldr	r0, [r4, #0]
 80063ba:	4401      	add	r1, r0
 80063bc:	1850      	adds	r0, r2, r1
 80063be:	4283      	cmp	r3, r0
 80063c0:	6011      	str	r1, [r2, #0]
 80063c2:	d1e0      	bne.n	8006386 <_free_r+0x22>
 80063c4:	6818      	ldr	r0, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	6053      	str	r3, [r2, #4]
 80063ca:	4408      	add	r0, r1
 80063cc:	6010      	str	r0, [r2, #0]
 80063ce:	e7da      	b.n	8006386 <_free_r+0x22>
 80063d0:	d902      	bls.n	80063d8 <_free_r+0x74>
 80063d2:	230c      	movs	r3, #12
 80063d4:	602b      	str	r3, [r5, #0]
 80063d6:	e7d6      	b.n	8006386 <_free_r+0x22>
 80063d8:	6820      	ldr	r0, [r4, #0]
 80063da:	1821      	adds	r1, r4, r0
 80063dc:	428b      	cmp	r3, r1
 80063de:	bf04      	itt	eq
 80063e0:	6819      	ldreq	r1, [r3, #0]
 80063e2:	685b      	ldreq	r3, [r3, #4]
 80063e4:	6063      	str	r3, [r4, #4]
 80063e6:	bf04      	itt	eq
 80063e8:	1809      	addeq	r1, r1, r0
 80063ea:	6021      	streq	r1, [r4, #0]
 80063ec:	6054      	str	r4, [r2, #4]
 80063ee:	e7ca      	b.n	8006386 <_free_r+0x22>
 80063f0:	bd38      	pop	{r3, r4, r5, pc}
 80063f2:	bf00      	nop
 80063f4:	20005f9c 	.word	0x20005f9c

080063f8 <sbrk_aligned>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	4e0f      	ldr	r6, [pc, #60]	@ (8006438 <sbrk_aligned+0x40>)
 80063fc:	460c      	mov	r4, r1
 80063fe:	6831      	ldr	r1, [r6, #0]
 8006400:	4605      	mov	r5, r0
 8006402:	b911      	cbnz	r1, 800640a <sbrk_aligned+0x12>
 8006404:	f000 fcb6 	bl	8006d74 <_sbrk_r>
 8006408:	6030      	str	r0, [r6, #0]
 800640a:	4621      	mov	r1, r4
 800640c:	4628      	mov	r0, r5
 800640e:	f000 fcb1 	bl	8006d74 <_sbrk_r>
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	d103      	bne.n	800641e <sbrk_aligned+0x26>
 8006416:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800641a:	4620      	mov	r0, r4
 800641c:	bd70      	pop	{r4, r5, r6, pc}
 800641e:	1cc4      	adds	r4, r0, #3
 8006420:	f024 0403 	bic.w	r4, r4, #3
 8006424:	42a0      	cmp	r0, r4
 8006426:	d0f8      	beq.n	800641a <sbrk_aligned+0x22>
 8006428:	1a21      	subs	r1, r4, r0
 800642a:	4628      	mov	r0, r5
 800642c:	f000 fca2 	bl	8006d74 <_sbrk_r>
 8006430:	3001      	adds	r0, #1
 8006432:	d1f2      	bne.n	800641a <sbrk_aligned+0x22>
 8006434:	e7ef      	b.n	8006416 <sbrk_aligned+0x1e>
 8006436:	bf00      	nop
 8006438:	20005f98 	.word	0x20005f98

0800643c <_malloc_r>:
 800643c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006440:	1ccd      	adds	r5, r1, #3
 8006442:	f025 0503 	bic.w	r5, r5, #3
 8006446:	3508      	adds	r5, #8
 8006448:	2d0c      	cmp	r5, #12
 800644a:	bf38      	it	cc
 800644c:	250c      	movcc	r5, #12
 800644e:	2d00      	cmp	r5, #0
 8006450:	4606      	mov	r6, r0
 8006452:	db01      	blt.n	8006458 <_malloc_r+0x1c>
 8006454:	42a9      	cmp	r1, r5
 8006456:	d904      	bls.n	8006462 <_malloc_r+0x26>
 8006458:	230c      	movs	r3, #12
 800645a:	6033      	str	r3, [r6, #0]
 800645c:	2000      	movs	r0, #0
 800645e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006538 <_malloc_r+0xfc>
 8006466:	f000 f869 	bl	800653c <__malloc_lock>
 800646a:	f8d8 3000 	ldr.w	r3, [r8]
 800646e:	461c      	mov	r4, r3
 8006470:	bb44      	cbnz	r4, 80064c4 <_malloc_r+0x88>
 8006472:	4629      	mov	r1, r5
 8006474:	4630      	mov	r0, r6
 8006476:	f7ff ffbf 	bl	80063f8 <sbrk_aligned>
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	4604      	mov	r4, r0
 800647e:	d158      	bne.n	8006532 <_malloc_r+0xf6>
 8006480:	f8d8 4000 	ldr.w	r4, [r8]
 8006484:	4627      	mov	r7, r4
 8006486:	2f00      	cmp	r7, #0
 8006488:	d143      	bne.n	8006512 <_malloc_r+0xd6>
 800648a:	2c00      	cmp	r4, #0
 800648c:	d04b      	beq.n	8006526 <_malloc_r+0xea>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	4639      	mov	r1, r7
 8006492:	4630      	mov	r0, r6
 8006494:	eb04 0903 	add.w	r9, r4, r3
 8006498:	f000 fc6c 	bl	8006d74 <_sbrk_r>
 800649c:	4581      	cmp	r9, r0
 800649e:	d142      	bne.n	8006526 <_malloc_r+0xea>
 80064a0:	6821      	ldr	r1, [r4, #0]
 80064a2:	1a6d      	subs	r5, r5, r1
 80064a4:	4629      	mov	r1, r5
 80064a6:	4630      	mov	r0, r6
 80064a8:	f7ff ffa6 	bl	80063f8 <sbrk_aligned>
 80064ac:	3001      	adds	r0, #1
 80064ae:	d03a      	beq.n	8006526 <_malloc_r+0xea>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	442b      	add	r3, r5
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	f8d8 3000 	ldr.w	r3, [r8]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	bb62      	cbnz	r2, 8006518 <_malloc_r+0xdc>
 80064be:	f8c8 7000 	str.w	r7, [r8]
 80064c2:	e00f      	b.n	80064e4 <_malloc_r+0xa8>
 80064c4:	6822      	ldr	r2, [r4, #0]
 80064c6:	1b52      	subs	r2, r2, r5
 80064c8:	d420      	bmi.n	800650c <_malloc_r+0xd0>
 80064ca:	2a0b      	cmp	r2, #11
 80064cc:	d917      	bls.n	80064fe <_malloc_r+0xc2>
 80064ce:	1961      	adds	r1, r4, r5
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	6025      	str	r5, [r4, #0]
 80064d4:	bf18      	it	ne
 80064d6:	6059      	strne	r1, [r3, #4]
 80064d8:	6863      	ldr	r3, [r4, #4]
 80064da:	bf08      	it	eq
 80064dc:	f8c8 1000 	streq.w	r1, [r8]
 80064e0:	5162      	str	r2, [r4, r5]
 80064e2:	604b      	str	r3, [r1, #4]
 80064e4:	4630      	mov	r0, r6
 80064e6:	f000 f82f 	bl	8006548 <__malloc_unlock>
 80064ea:	f104 000b 	add.w	r0, r4, #11
 80064ee:	1d23      	adds	r3, r4, #4
 80064f0:	f020 0007 	bic.w	r0, r0, #7
 80064f4:	1ac2      	subs	r2, r0, r3
 80064f6:	bf1c      	itt	ne
 80064f8:	1a1b      	subne	r3, r3, r0
 80064fa:	50a3      	strne	r3, [r4, r2]
 80064fc:	e7af      	b.n	800645e <_malloc_r+0x22>
 80064fe:	6862      	ldr	r2, [r4, #4]
 8006500:	42a3      	cmp	r3, r4
 8006502:	bf0c      	ite	eq
 8006504:	f8c8 2000 	streq.w	r2, [r8]
 8006508:	605a      	strne	r2, [r3, #4]
 800650a:	e7eb      	b.n	80064e4 <_malloc_r+0xa8>
 800650c:	4623      	mov	r3, r4
 800650e:	6864      	ldr	r4, [r4, #4]
 8006510:	e7ae      	b.n	8006470 <_malloc_r+0x34>
 8006512:	463c      	mov	r4, r7
 8006514:	687f      	ldr	r7, [r7, #4]
 8006516:	e7b6      	b.n	8006486 <_malloc_r+0x4a>
 8006518:	461a      	mov	r2, r3
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	42a3      	cmp	r3, r4
 800651e:	d1fb      	bne.n	8006518 <_malloc_r+0xdc>
 8006520:	2300      	movs	r3, #0
 8006522:	6053      	str	r3, [r2, #4]
 8006524:	e7de      	b.n	80064e4 <_malloc_r+0xa8>
 8006526:	230c      	movs	r3, #12
 8006528:	6033      	str	r3, [r6, #0]
 800652a:	4630      	mov	r0, r6
 800652c:	f000 f80c 	bl	8006548 <__malloc_unlock>
 8006530:	e794      	b.n	800645c <_malloc_r+0x20>
 8006532:	6005      	str	r5, [r0, #0]
 8006534:	e7d6      	b.n	80064e4 <_malloc_r+0xa8>
 8006536:	bf00      	nop
 8006538:	20005f9c 	.word	0x20005f9c

0800653c <__malloc_lock>:
 800653c:	4801      	ldr	r0, [pc, #4]	@ (8006544 <__malloc_lock+0x8>)
 800653e:	f7ff bf00 	b.w	8006342 <__retarget_lock_acquire_recursive>
 8006542:	bf00      	nop
 8006544:	20005f94 	.word	0x20005f94

08006548 <__malloc_unlock>:
 8006548:	4801      	ldr	r0, [pc, #4]	@ (8006550 <__malloc_unlock+0x8>)
 800654a:	f7ff befb 	b.w	8006344 <__retarget_lock_release_recursive>
 800654e:	bf00      	nop
 8006550:	20005f94 	.word	0x20005f94

08006554 <__sfputc_r>:
 8006554:	6893      	ldr	r3, [r2, #8]
 8006556:	3b01      	subs	r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	b410      	push	{r4}
 800655c:	6093      	str	r3, [r2, #8]
 800655e:	da08      	bge.n	8006572 <__sfputc_r+0x1e>
 8006560:	6994      	ldr	r4, [r2, #24]
 8006562:	42a3      	cmp	r3, r4
 8006564:	db01      	blt.n	800656a <__sfputc_r+0x16>
 8006566:	290a      	cmp	r1, #10
 8006568:	d103      	bne.n	8006572 <__sfputc_r+0x1e>
 800656a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800656e:	f000 bb6d 	b.w	8006c4c <__swbuf_r>
 8006572:	6813      	ldr	r3, [r2, #0]
 8006574:	1c58      	adds	r0, r3, #1
 8006576:	6010      	str	r0, [r2, #0]
 8006578:	7019      	strb	r1, [r3, #0]
 800657a:	4608      	mov	r0, r1
 800657c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006580:	4770      	bx	lr

08006582 <__sfputs_r>:
 8006582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006584:	4606      	mov	r6, r0
 8006586:	460f      	mov	r7, r1
 8006588:	4614      	mov	r4, r2
 800658a:	18d5      	adds	r5, r2, r3
 800658c:	42ac      	cmp	r4, r5
 800658e:	d101      	bne.n	8006594 <__sfputs_r+0x12>
 8006590:	2000      	movs	r0, #0
 8006592:	e007      	b.n	80065a4 <__sfputs_r+0x22>
 8006594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006598:	463a      	mov	r2, r7
 800659a:	4630      	mov	r0, r6
 800659c:	f7ff ffda 	bl	8006554 <__sfputc_r>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d1f3      	bne.n	800658c <__sfputs_r+0xa>
 80065a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065a8 <_vfiprintf_r>:
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	460d      	mov	r5, r1
 80065ae:	b09d      	sub	sp, #116	@ 0x74
 80065b0:	4614      	mov	r4, r2
 80065b2:	4698      	mov	r8, r3
 80065b4:	4606      	mov	r6, r0
 80065b6:	b118      	cbz	r0, 80065c0 <_vfiprintf_r+0x18>
 80065b8:	6a03      	ldr	r3, [r0, #32]
 80065ba:	b90b      	cbnz	r3, 80065c0 <_vfiprintf_r+0x18>
 80065bc:	f7ff fdbc 	bl	8006138 <__sinit>
 80065c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065c2:	07d9      	lsls	r1, r3, #31
 80065c4:	d405      	bmi.n	80065d2 <_vfiprintf_r+0x2a>
 80065c6:	89ab      	ldrh	r3, [r5, #12]
 80065c8:	059a      	lsls	r2, r3, #22
 80065ca:	d402      	bmi.n	80065d2 <_vfiprintf_r+0x2a>
 80065cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065ce:	f7ff feb8 	bl	8006342 <__retarget_lock_acquire_recursive>
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	071b      	lsls	r3, r3, #28
 80065d6:	d501      	bpl.n	80065dc <_vfiprintf_r+0x34>
 80065d8:	692b      	ldr	r3, [r5, #16]
 80065da:	b99b      	cbnz	r3, 8006604 <_vfiprintf_r+0x5c>
 80065dc:	4629      	mov	r1, r5
 80065de:	4630      	mov	r0, r6
 80065e0:	f000 fb72 	bl	8006cc8 <__swsetup_r>
 80065e4:	b170      	cbz	r0, 8006604 <_vfiprintf_r+0x5c>
 80065e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065e8:	07dc      	lsls	r4, r3, #31
 80065ea:	d504      	bpl.n	80065f6 <_vfiprintf_r+0x4e>
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065f0:	b01d      	add	sp, #116	@ 0x74
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	89ab      	ldrh	r3, [r5, #12]
 80065f8:	0598      	lsls	r0, r3, #22
 80065fa:	d4f7      	bmi.n	80065ec <_vfiprintf_r+0x44>
 80065fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065fe:	f7ff fea1 	bl	8006344 <__retarget_lock_release_recursive>
 8006602:	e7f3      	b.n	80065ec <_vfiprintf_r+0x44>
 8006604:	2300      	movs	r3, #0
 8006606:	9309      	str	r3, [sp, #36]	@ 0x24
 8006608:	2320      	movs	r3, #32
 800660a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800660e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006612:	2330      	movs	r3, #48	@ 0x30
 8006614:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067c4 <_vfiprintf_r+0x21c>
 8006618:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800661c:	f04f 0901 	mov.w	r9, #1
 8006620:	4623      	mov	r3, r4
 8006622:	469a      	mov	sl, r3
 8006624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006628:	b10a      	cbz	r2, 800662e <_vfiprintf_r+0x86>
 800662a:	2a25      	cmp	r2, #37	@ 0x25
 800662c:	d1f9      	bne.n	8006622 <_vfiprintf_r+0x7a>
 800662e:	ebba 0b04 	subs.w	fp, sl, r4
 8006632:	d00b      	beq.n	800664c <_vfiprintf_r+0xa4>
 8006634:	465b      	mov	r3, fp
 8006636:	4622      	mov	r2, r4
 8006638:	4629      	mov	r1, r5
 800663a:	4630      	mov	r0, r6
 800663c:	f7ff ffa1 	bl	8006582 <__sfputs_r>
 8006640:	3001      	adds	r0, #1
 8006642:	f000 80a7 	beq.w	8006794 <_vfiprintf_r+0x1ec>
 8006646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006648:	445a      	add	r2, fp
 800664a:	9209      	str	r2, [sp, #36]	@ 0x24
 800664c:	f89a 3000 	ldrb.w	r3, [sl]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 809f 	beq.w	8006794 <_vfiprintf_r+0x1ec>
 8006656:	2300      	movs	r3, #0
 8006658:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800665c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006660:	f10a 0a01 	add.w	sl, sl, #1
 8006664:	9304      	str	r3, [sp, #16]
 8006666:	9307      	str	r3, [sp, #28]
 8006668:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800666c:	931a      	str	r3, [sp, #104]	@ 0x68
 800666e:	4654      	mov	r4, sl
 8006670:	2205      	movs	r2, #5
 8006672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006676:	4853      	ldr	r0, [pc, #332]	@ (80067c4 <_vfiprintf_r+0x21c>)
 8006678:	f7f9 fdd2 	bl	8000220 <memchr>
 800667c:	9a04      	ldr	r2, [sp, #16]
 800667e:	b9d8      	cbnz	r0, 80066b8 <_vfiprintf_r+0x110>
 8006680:	06d1      	lsls	r1, r2, #27
 8006682:	bf44      	itt	mi
 8006684:	2320      	movmi	r3, #32
 8006686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800668a:	0713      	lsls	r3, r2, #28
 800668c:	bf44      	itt	mi
 800668e:	232b      	movmi	r3, #43	@ 0x2b
 8006690:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006694:	f89a 3000 	ldrb.w	r3, [sl]
 8006698:	2b2a      	cmp	r3, #42	@ 0x2a
 800669a:	d015      	beq.n	80066c8 <_vfiprintf_r+0x120>
 800669c:	9a07      	ldr	r2, [sp, #28]
 800669e:	4654      	mov	r4, sl
 80066a0:	2000      	movs	r0, #0
 80066a2:	f04f 0c0a 	mov.w	ip, #10
 80066a6:	4621      	mov	r1, r4
 80066a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ac:	3b30      	subs	r3, #48	@ 0x30
 80066ae:	2b09      	cmp	r3, #9
 80066b0:	d94b      	bls.n	800674a <_vfiprintf_r+0x1a2>
 80066b2:	b1b0      	cbz	r0, 80066e2 <_vfiprintf_r+0x13a>
 80066b4:	9207      	str	r2, [sp, #28]
 80066b6:	e014      	b.n	80066e2 <_vfiprintf_r+0x13a>
 80066b8:	eba0 0308 	sub.w	r3, r0, r8
 80066bc:	fa09 f303 	lsl.w	r3, r9, r3
 80066c0:	4313      	orrs	r3, r2
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	46a2      	mov	sl, r4
 80066c6:	e7d2      	b.n	800666e <_vfiprintf_r+0xc6>
 80066c8:	9b03      	ldr	r3, [sp, #12]
 80066ca:	1d19      	adds	r1, r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	9103      	str	r1, [sp, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bfbb      	ittet	lt
 80066d4:	425b      	neglt	r3, r3
 80066d6:	f042 0202 	orrlt.w	r2, r2, #2
 80066da:	9307      	strge	r3, [sp, #28]
 80066dc:	9307      	strlt	r3, [sp, #28]
 80066de:	bfb8      	it	lt
 80066e0:	9204      	strlt	r2, [sp, #16]
 80066e2:	7823      	ldrb	r3, [r4, #0]
 80066e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80066e6:	d10a      	bne.n	80066fe <_vfiprintf_r+0x156>
 80066e8:	7863      	ldrb	r3, [r4, #1]
 80066ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ec:	d132      	bne.n	8006754 <_vfiprintf_r+0x1ac>
 80066ee:	9b03      	ldr	r3, [sp, #12]
 80066f0:	1d1a      	adds	r2, r3, #4
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	9203      	str	r2, [sp, #12]
 80066f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066fa:	3402      	adds	r4, #2
 80066fc:	9305      	str	r3, [sp, #20]
 80066fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80067d4 <_vfiprintf_r+0x22c>
 8006702:	7821      	ldrb	r1, [r4, #0]
 8006704:	2203      	movs	r2, #3
 8006706:	4650      	mov	r0, sl
 8006708:	f7f9 fd8a 	bl	8000220 <memchr>
 800670c:	b138      	cbz	r0, 800671e <_vfiprintf_r+0x176>
 800670e:	9b04      	ldr	r3, [sp, #16]
 8006710:	eba0 000a 	sub.w	r0, r0, sl
 8006714:	2240      	movs	r2, #64	@ 0x40
 8006716:	4082      	lsls	r2, r0
 8006718:	4313      	orrs	r3, r2
 800671a:	3401      	adds	r4, #1
 800671c:	9304      	str	r3, [sp, #16]
 800671e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006722:	4829      	ldr	r0, [pc, #164]	@ (80067c8 <_vfiprintf_r+0x220>)
 8006724:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006728:	2206      	movs	r2, #6
 800672a:	f7f9 fd79 	bl	8000220 <memchr>
 800672e:	2800      	cmp	r0, #0
 8006730:	d03f      	beq.n	80067b2 <_vfiprintf_r+0x20a>
 8006732:	4b26      	ldr	r3, [pc, #152]	@ (80067cc <_vfiprintf_r+0x224>)
 8006734:	bb1b      	cbnz	r3, 800677e <_vfiprintf_r+0x1d6>
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	3307      	adds	r3, #7
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	3308      	adds	r3, #8
 8006740:	9303      	str	r3, [sp, #12]
 8006742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006744:	443b      	add	r3, r7
 8006746:	9309      	str	r3, [sp, #36]	@ 0x24
 8006748:	e76a      	b.n	8006620 <_vfiprintf_r+0x78>
 800674a:	fb0c 3202 	mla	r2, ip, r2, r3
 800674e:	460c      	mov	r4, r1
 8006750:	2001      	movs	r0, #1
 8006752:	e7a8      	b.n	80066a6 <_vfiprintf_r+0xfe>
 8006754:	2300      	movs	r3, #0
 8006756:	3401      	adds	r4, #1
 8006758:	9305      	str	r3, [sp, #20]
 800675a:	4619      	mov	r1, r3
 800675c:	f04f 0c0a 	mov.w	ip, #10
 8006760:	4620      	mov	r0, r4
 8006762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006766:	3a30      	subs	r2, #48	@ 0x30
 8006768:	2a09      	cmp	r2, #9
 800676a:	d903      	bls.n	8006774 <_vfiprintf_r+0x1cc>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0c6      	beq.n	80066fe <_vfiprintf_r+0x156>
 8006770:	9105      	str	r1, [sp, #20]
 8006772:	e7c4      	b.n	80066fe <_vfiprintf_r+0x156>
 8006774:	fb0c 2101 	mla	r1, ip, r1, r2
 8006778:	4604      	mov	r4, r0
 800677a:	2301      	movs	r3, #1
 800677c:	e7f0      	b.n	8006760 <_vfiprintf_r+0x1b8>
 800677e:	ab03      	add	r3, sp, #12
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	462a      	mov	r2, r5
 8006784:	4b12      	ldr	r3, [pc, #72]	@ (80067d0 <_vfiprintf_r+0x228>)
 8006786:	a904      	add	r1, sp, #16
 8006788:	4630      	mov	r0, r6
 800678a:	f3af 8000 	nop.w
 800678e:	4607      	mov	r7, r0
 8006790:	1c78      	adds	r0, r7, #1
 8006792:	d1d6      	bne.n	8006742 <_vfiprintf_r+0x19a>
 8006794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006796:	07d9      	lsls	r1, r3, #31
 8006798:	d405      	bmi.n	80067a6 <_vfiprintf_r+0x1fe>
 800679a:	89ab      	ldrh	r3, [r5, #12]
 800679c:	059a      	lsls	r2, r3, #22
 800679e:	d402      	bmi.n	80067a6 <_vfiprintf_r+0x1fe>
 80067a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067a2:	f7ff fdcf 	bl	8006344 <__retarget_lock_release_recursive>
 80067a6:	89ab      	ldrh	r3, [r5, #12]
 80067a8:	065b      	lsls	r3, r3, #25
 80067aa:	f53f af1f 	bmi.w	80065ec <_vfiprintf_r+0x44>
 80067ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067b0:	e71e      	b.n	80065f0 <_vfiprintf_r+0x48>
 80067b2:	ab03      	add	r3, sp, #12
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	462a      	mov	r2, r5
 80067b8:	4b05      	ldr	r3, [pc, #20]	@ (80067d0 <_vfiprintf_r+0x228>)
 80067ba:	a904      	add	r1, sp, #16
 80067bc:	4630      	mov	r0, r6
 80067be:	f000 f879 	bl	80068b4 <_printf_i>
 80067c2:	e7e4      	b.n	800678e <_vfiprintf_r+0x1e6>
 80067c4:	08006f68 	.word	0x08006f68
 80067c8:	08006f72 	.word	0x08006f72
 80067cc:	00000000 	.word	0x00000000
 80067d0:	08006583 	.word	0x08006583
 80067d4:	08006f6e 	.word	0x08006f6e

080067d8 <_printf_common>:
 80067d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067dc:	4616      	mov	r6, r2
 80067de:	4698      	mov	r8, r3
 80067e0:	688a      	ldr	r2, [r1, #8]
 80067e2:	690b      	ldr	r3, [r1, #16]
 80067e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067e8:	4293      	cmp	r3, r2
 80067ea:	bfb8      	it	lt
 80067ec:	4613      	movlt	r3, r2
 80067ee:	6033      	str	r3, [r6, #0]
 80067f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067f4:	4607      	mov	r7, r0
 80067f6:	460c      	mov	r4, r1
 80067f8:	b10a      	cbz	r2, 80067fe <_printf_common+0x26>
 80067fa:	3301      	adds	r3, #1
 80067fc:	6033      	str	r3, [r6, #0]
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	0699      	lsls	r1, r3, #26
 8006802:	bf42      	ittt	mi
 8006804:	6833      	ldrmi	r3, [r6, #0]
 8006806:	3302      	addmi	r3, #2
 8006808:	6033      	strmi	r3, [r6, #0]
 800680a:	6825      	ldr	r5, [r4, #0]
 800680c:	f015 0506 	ands.w	r5, r5, #6
 8006810:	d106      	bne.n	8006820 <_printf_common+0x48>
 8006812:	f104 0a19 	add.w	sl, r4, #25
 8006816:	68e3      	ldr	r3, [r4, #12]
 8006818:	6832      	ldr	r2, [r6, #0]
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	42ab      	cmp	r3, r5
 800681e:	dc26      	bgt.n	800686e <_printf_common+0x96>
 8006820:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006824:	6822      	ldr	r2, [r4, #0]
 8006826:	3b00      	subs	r3, #0
 8006828:	bf18      	it	ne
 800682a:	2301      	movne	r3, #1
 800682c:	0692      	lsls	r2, r2, #26
 800682e:	d42b      	bmi.n	8006888 <_printf_common+0xb0>
 8006830:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006834:	4641      	mov	r1, r8
 8006836:	4638      	mov	r0, r7
 8006838:	47c8      	blx	r9
 800683a:	3001      	adds	r0, #1
 800683c:	d01e      	beq.n	800687c <_printf_common+0xa4>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	6922      	ldr	r2, [r4, #16]
 8006842:	f003 0306 	and.w	r3, r3, #6
 8006846:	2b04      	cmp	r3, #4
 8006848:	bf02      	ittt	eq
 800684a:	68e5      	ldreq	r5, [r4, #12]
 800684c:	6833      	ldreq	r3, [r6, #0]
 800684e:	1aed      	subeq	r5, r5, r3
 8006850:	68a3      	ldr	r3, [r4, #8]
 8006852:	bf0c      	ite	eq
 8006854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006858:	2500      	movne	r5, #0
 800685a:	4293      	cmp	r3, r2
 800685c:	bfc4      	itt	gt
 800685e:	1a9b      	subgt	r3, r3, r2
 8006860:	18ed      	addgt	r5, r5, r3
 8006862:	2600      	movs	r6, #0
 8006864:	341a      	adds	r4, #26
 8006866:	42b5      	cmp	r5, r6
 8006868:	d11a      	bne.n	80068a0 <_printf_common+0xc8>
 800686a:	2000      	movs	r0, #0
 800686c:	e008      	b.n	8006880 <_printf_common+0xa8>
 800686e:	2301      	movs	r3, #1
 8006870:	4652      	mov	r2, sl
 8006872:	4641      	mov	r1, r8
 8006874:	4638      	mov	r0, r7
 8006876:	47c8      	blx	r9
 8006878:	3001      	adds	r0, #1
 800687a:	d103      	bne.n	8006884 <_printf_common+0xac>
 800687c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006884:	3501      	adds	r5, #1
 8006886:	e7c6      	b.n	8006816 <_printf_common+0x3e>
 8006888:	18e1      	adds	r1, r4, r3
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	2030      	movs	r0, #48	@ 0x30
 800688e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006892:	4422      	add	r2, r4
 8006894:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006898:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800689c:	3302      	adds	r3, #2
 800689e:	e7c7      	b.n	8006830 <_printf_common+0x58>
 80068a0:	2301      	movs	r3, #1
 80068a2:	4622      	mov	r2, r4
 80068a4:	4641      	mov	r1, r8
 80068a6:	4638      	mov	r0, r7
 80068a8:	47c8      	blx	r9
 80068aa:	3001      	adds	r0, #1
 80068ac:	d0e6      	beq.n	800687c <_printf_common+0xa4>
 80068ae:	3601      	adds	r6, #1
 80068b0:	e7d9      	b.n	8006866 <_printf_common+0x8e>
	...

080068b4 <_printf_i>:
 80068b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	7e0f      	ldrb	r7, [r1, #24]
 80068ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068bc:	2f78      	cmp	r7, #120	@ 0x78
 80068be:	4691      	mov	r9, r2
 80068c0:	4680      	mov	r8, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	469a      	mov	sl, r3
 80068c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068ca:	d807      	bhi.n	80068dc <_printf_i+0x28>
 80068cc:	2f62      	cmp	r7, #98	@ 0x62
 80068ce:	d80a      	bhi.n	80068e6 <_printf_i+0x32>
 80068d0:	2f00      	cmp	r7, #0
 80068d2:	f000 80d2 	beq.w	8006a7a <_printf_i+0x1c6>
 80068d6:	2f58      	cmp	r7, #88	@ 0x58
 80068d8:	f000 80b9 	beq.w	8006a4e <_printf_i+0x19a>
 80068dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068e4:	e03a      	b.n	800695c <_printf_i+0xa8>
 80068e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068ea:	2b15      	cmp	r3, #21
 80068ec:	d8f6      	bhi.n	80068dc <_printf_i+0x28>
 80068ee:	a101      	add	r1, pc, #4	@ (adr r1, 80068f4 <_printf_i+0x40>)
 80068f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068f4:	0800694d 	.word	0x0800694d
 80068f8:	08006961 	.word	0x08006961
 80068fc:	080068dd 	.word	0x080068dd
 8006900:	080068dd 	.word	0x080068dd
 8006904:	080068dd 	.word	0x080068dd
 8006908:	080068dd 	.word	0x080068dd
 800690c:	08006961 	.word	0x08006961
 8006910:	080068dd 	.word	0x080068dd
 8006914:	080068dd 	.word	0x080068dd
 8006918:	080068dd 	.word	0x080068dd
 800691c:	080068dd 	.word	0x080068dd
 8006920:	08006a61 	.word	0x08006a61
 8006924:	0800698b 	.word	0x0800698b
 8006928:	08006a1b 	.word	0x08006a1b
 800692c:	080068dd 	.word	0x080068dd
 8006930:	080068dd 	.word	0x080068dd
 8006934:	08006a83 	.word	0x08006a83
 8006938:	080068dd 	.word	0x080068dd
 800693c:	0800698b 	.word	0x0800698b
 8006940:	080068dd 	.word	0x080068dd
 8006944:	080068dd 	.word	0x080068dd
 8006948:	08006a23 	.word	0x08006a23
 800694c:	6833      	ldr	r3, [r6, #0]
 800694e:	1d1a      	adds	r2, r3, #4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6032      	str	r2, [r6, #0]
 8006954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006958:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800695c:	2301      	movs	r3, #1
 800695e:	e09d      	b.n	8006a9c <_printf_i+0x1e8>
 8006960:	6833      	ldr	r3, [r6, #0]
 8006962:	6820      	ldr	r0, [r4, #0]
 8006964:	1d19      	adds	r1, r3, #4
 8006966:	6031      	str	r1, [r6, #0]
 8006968:	0606      	lsls	r6, r0, #24
 800696a:	d501      	bpl.n	8006970 <_printf_i+0xbc>
 800696c:	681d      	ldr	r5, [r3, #0]
 800696e:	e003      	b.n	8006978 <_printf_i+0xc4>
 8006970:	0645      	lsls	r5, r0, #25
 8006972:	d5fb      	bpl.n	800696c <_printf_i+0xb8>
 8006974:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006978:	2d00      	cmp	r5, #0
 800697a:	da03      	bge.n	8006984 <_printf_i+0xd0>
 800697c:	232d      	movs	r3, #45	@ 0x2d
 800697e:	426d      	negs	r5, r5
 8006980:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006984:	4859      	ldr	r0, [pc, #356]	@ (8006aec <_printf_i+0x238>)
 8006986:	230a      	movs	r3, #10
 8006988:	e011      	b.n	80069ae <_printf_i+0xfa>
 800698a:	6821      	ldr	r1, [r4, #0]
 800698c:	6833      	ldr	r3, [r6, #0]
 800698e:	0608      	lsls	r0, r1, #24
 8006990:	f853 5b04 	ldr.w	r5, [r3], #4
 8006994:	d402      	bmi.n	800699c <_printf_i+0xe8>
 8006996:	0649      	lsls	r1, r1, #25
 8006998:	bf48      	it	mi
 800699a:	b2ad      	uxthmi	r5, r5
 800699c:	2f6f      	cmp	r7, #111	@ 0x6f
 800699e:	4853      	ldr	r0, [pc, #332]	@ (8006aec <_printf_i+0x238>)
 80069a0:	6033      	str	r3, [r6, #0]
 80069a2:	bf14      	ite	ne
 80069a4:	230a      	movne	r3, #10
 80069a6:	2308      	moveq	r3, #8
 80069a8:	2100      	movs	r1, #0
 80069aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069ae:	6866      	ldr	r6, [r4, #4]
 80069b0:	60a6      	str	r6, [r4, #8]
 80069b2:	2e00      	cmp	r6, #0
 80069b4:	bfa2      	ittt	ge
 80069b6:	6821      	ldrge	r1, [r4, #0]
 80069b8:	f021 0104 	bicge.w	r1, r1, #4
 80069bc:	6021      	strge	r1, [r4, #0]
 80069be:	b90d      	cbnz	r5, 80069c4 <_printf_i+0x110>
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	d04b      	beq.n	8006a5c <_printf_i+0x1a8>
 80069c4:	4616      	mov	r6, r2
 80069c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80069ca:	fb03 5711 	mls	r7, r3, r1, r5
 80069ce:	5dc7      	ldrb	r7, [r0, r7]
 80069d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069d4:	462f      	mov	r7, r5
 80069d6:	42bb      	cmp	r3, r7
 80069d8:	460d      	mov	r5, r1
 80069da:	d9f4      	bls.n	80069c6 <_printf_i+0x112>
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d10b      	bne.n	80069f8 <_printf_i+0x144>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	07df      	lsls	r7, r3, #31
 80069e4:	d508      	bpl.n	80069f8 <_printf_i+0x144>
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	6861      	ldr	r1, [r4, #4]
 80069ea:	4299      	cmp	r1, r3
 80069ec:	bfde      	ittt	le
 80069ee:	2330      	movle	r3, #48	@ 0x30
 80069f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069f4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80069f8:	1b92      	subs	r2, r2, r6
 80069fa:	6122      	str	r2, [r4, #16]
 80069fc:	f8cd a000 	str.w	sl, [sp]
 8006a00:	464b      	mov	r3, r9
 8006a02:	aa03      	add	r2, sp, #12
 8006a04:	4621      	mov	r1, r4
 8006a06:	4640      	mov	r0, r8
 8006a08:	f7ff fee6 	bl	80067d8 <_printf_common>
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d14a      	bne.n	8006aa6 <_printf_i+0x1f2>
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a14:	b004      	add	sp, #16
 8006a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	f043 0320 	orr.w	r3, r3, #32
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	4833      	ldr	r0, [pc, #204]	@ (8006af0 <_printf_i+0x23c>)
 8006a24:	2778      	movs	r7, #120	@ 0x78
 8006a26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	6831      	ldr	r1, [r6, #0]
 8006a2e:	061f      	lsls	r7, r3, #24
 8006a30:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a34:	d402      	bmi.n	8006a3c <_printf_i+0x188>
 8006a36:	065f      	lsls	r7, r3, #25
 8006a38:	bf48      	it	mi
 8006a3a:	b2ad      	uxthmi	r5, r5
 8006a3c:	6031      	str	r1, [r6, #0]
 8006a3e:	07d9      	lsls	r1, r3, #31
 8006a40:	bf44      	itt	mi
 8006a42:	f043 0320 	orrmi.w	r3, r3, #32
 8006a46:	6023      	strmi	r3, [r4, #0]
 8006a48:	b11d      	cbz	r5, 8006a52 <_printf_i+0x19e>
 8006a4a:	2310      	movs	r3, #16
 8006a4c:	e7ac      	b.n	80069a8 <_printf_i+0xf4>
 8006a4e:	4827      	ldr	r0, [pc, #156]	@ (8006aec <_printf_i+0x238>)
 8006a50:	e7e9      	b.n	8006a26 <_printf_i+0x172>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	f023 0320 	bic.w	r3, r3, #32
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	e7f6      	b.n	8006a4a <_printf_i+0x196>
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	e7bd      	b.n	80069dc <_printf_i+0x128>
 8006a60:	6833      	ldr	r3, [r6, #0]
 8006a62:	6825      	ldr	r5, [r4, #0]
 8006a64:	6961      	ldr	r1, [r4, #20]
 8006a66:	1d18      	adds	r0, r3, #4
 8006a68:	6030      	str	r0, [r6, #0]
 8006a6a:	062e      	lsls	r6, r5, #24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	d501      	bpl.n	8006a74 <_printf_i+0x1c0>
 8006a70:	6019      	str	r1, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <_printf_i+0x1c6>
 8006a74:	0668      	lsls	r0, r5, #25
 8006a76:	d5fb      	bpl.n	8006a70 <_printf_i+0x1bc>
 8006a78:	8019      	strh	r1, [r3, #0]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	4616      	mov	r6, r2
 8006a80:	e7bc      	b.n	80069fc <_printf_i+0x148>
 8006a82:	6833      	ldr	r3, [r6, #0]
 8006a84:	1d1a      	adds	r2, r3, #4
 8006a86:	6032      	str	r2, [r6, #0]
 8006a88:	681e      	ldr	r6, [r3, #0]
 8006a8a:	6862      	ldr	r2, [r4, #4]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7f9 fbc6 	bl	8000220 <memchr>
 8006a94:	b108      	cbz	r0, 8006a9a <_printf_i+0x1e6>
 8006a96:	1b80      	subs	r0, r0, r6
 8006a98:	6060      	str	r0, [r4, #4]
 8006a9a:	6863      	ldr	r3, [r4, #4]
 8006a9c:	6123      	str	r3, [r4, #16]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006aa4:	e7aa      	b.n	80069fc <_printf_i+0x148>
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	4649      	mov	r1, r9
 8006aac:	4640      	mov	r0, r8
 8006aae:	47d0      	blx	sl
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d0ad      	beq.n	8006a10 <_printf_i+0x15c>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	079b      	lsls	r3, r3, #30
 8006ab8:	d413      	bmi.n	8006ae2 <_printf_i+0x22e>
 8006aba:	68e0      	ldr	r0, [r4, #12]
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	4298      	cmp	r0, r3
 8006ac0:	bfb8      	it	lt
 8006ac2:	4618      	movlt	r0, r3
 8006ac4:	e7a6      	b.n	8006a14 <_printf_i+0x160>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4632      	mov	r2, r6
 8006aca:	4649      	mov	r1, r9
 8006acc:	4640      	mov	r0, r8
 8006ace:	47d0      	blx	sl
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d09d      	beq.n	8006a10 <_printf_i+0x15c>
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	68e3      	ldr	r3, [r4, #12]
 8006ad8:	9903      	ldr	r1, [sp, #12]
 8006ada:	1a5b      	subs	r3, r3, r1
 8006adc:	42ab      	cmp	r3, r5
 8006ade:	dcf2      	bgt.n	8006ac6 <_printf_i+0x212>
 8006ae0:	e7eb      	b.n	8006aba <_printf_i+0x206>
 8006ae2:	2500      	movs	r5, #0
 8006ae4:	f104 0619 	add.w	r6, r4, #25
 8006ae8:	e7f5      	b.n	8006ad6 <_printf_i+0x222>
 8006aea:	bf00      	nop
 8006aec:	08006f79 	.word	0x08006f79
 8006af0:	08006f8a 	.word	0x08006f8a

08006af4 <__sflush_r>:
 8006af4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006afc:	0716      	lsls	r6, r2, #28
 8006afe:	4605      	mov	r5, r0
 8006b00:	460c      	mov	r4, r1
 8006b02:	d454      	bmi.n	8006bae <__sflush_r+0xba>
 8006b04:	684b      	ldr	r3, [r1, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	dc02      	bgt.n	8006b10 <__sflush_r+0x1c>
 8006b0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dd48      	ble.n	8006ba2 <__sflush_r+0xae>
 8006b10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	d045      	beq.n	8006ba2 <__sflush_r+0xae>
 8006b16:	2300      	movs	r3, #0
 8006b18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b1c:	682f      	ldr	r7, [r5, #0]
 8006b1e:	6a21      	ldr	r1, [r4, #32]
 8006b20:	602b      	str	r3, [r5, #0]
 8006b22:	d030      	beq.n	8006b86 <__sflush_r+0x92>
 8006b24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	0759      	lsls	r1, r3, #29
 8006b2a:	d505      	bpl.n	8006b38 <__sflush_r+0x44>
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	1ad2      	subs	r2, r2, r3
 8006b30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b32:	b10b      	cbz	r3, 8006b38 <__sflush_r+0x44>
 8006b34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b36:	1ad2      	subs	r2, r2, r3
 8006b38:	2300      	movs	r3, #0
 8006b3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b3c:	6a21      	ldr	r1, [r4, #32]
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b0      	blx	r6
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	d106      	bne.n	8006b56 <__sflush_r+0x62>
 8006b48:	6829      	ldr	r1, [r5, #0]
 8006b4a:	291d      	cmp	r1, #29
 8006b4c:	d82b      	bhi.n	8006ba6 <__sflush_r+0xb2>
 8006b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8006bf8 <__sflush_r+0x104>)
 8006b50:	410a      	asrs	r2, r1
 8006b52:	07d6      	lsls	r6, r2, #31
 8006b54:	d427      	bmi.n	8006ba6 <__sflush_r+0xb2>
 8006b56:	2200      	movs	r2, #0
 8006b58:	6062      	str	r2, [r4, #4]
 8006b5a:	04d9      	lsls	r1, r3, #19
 8006b5c:	6922      	ldr	r2, [r4, #16]
 8006b5e:	6022      	str	r2, [r4, #0]
 8006b60:	d504      	bpl.n	8006b6c <__sflush_r+0x78>
 8006b62:	1c42      	adds	r2, r0, #1
 8006b64:	d101      	bne.n	8006b6a <__sflush_r+0x76>
 8006b66:	682b      	ldr	r3, [r5, #0]
 8006b68:	b903      	cbnz	r3, 8006b6c <__sflush_r+0x78>
 8006b6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b6e:	602f      	str	r7, [r5, #0]
 8006b70:	b1b9      	cbz	r1, 8006ba2 <__sflush_r+0xae>
 8006b72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b76:	4299      	cmp	r1, r3
 8006b78:	d002      	beq.n	8006b80 <__sflush_r+0x8c>
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f7ff fbf2 	bl	8006364 <_free_r>
 8006b80:	2300      	movs	r3, #0
 8006b82:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b84:	e00d      	b.n	8006ba2 <__sflush_r+0xae>
 8006b86:	2301      	movs	r3, #1
 8006b88:	4628      	mov	r0, r5
 8006b8a:	47b0      	blx	r6
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	1c50      	adds	r0, r2, #1
 8006b90:	d1c9      	bne.n	8006b26 <__sflush_r+0x32>
 8006b92:	682b      	ldr	r3, [r5, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0c6      	beq.n	8006b26 <__sflush_r+0x32>
 8006b98:	2b1d      	cmp	r3, #29
 8006b9a:	d001      	beq.n	8006ba0 <__sflush_r+0xac>
 8006b9c:	2b16      	cmp	r3, #22
 8006b9e:	d11e      	bne.n	8006bde <__sflush_r+0xea>
 8006ba0:	602f      	str	r7, [r5, #0]
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	e022      	b.n	8006bec <__sflush_r+0xf8>
 8006ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006baa:	b21b      	sxth	r3, r3
 8006bac:	e01b      	b.n	8006be6 <__sflush_r+0xf2>
 8006bae:	690f      	ldr	r7, [r1, #16]
 8006bb0:	2f00      	cmp	r7, #0
 8006bb2:	d0f6      	beq.n	8006ba2 <__sflush_r+0xae>
 8006bb4:	0793      	lsls	r3, r2, #30
 8006bb6:	680e      	ldr	r6, [r1, #0]
 8006bb8:	bf08      	it	eq
 8006bba:	694b      	ldreq	r3, [r1, #20]
 8006bbc:	600f      	str	r7, [r1, #0]
 8006bbe:	bf18      	it	ne
 8006bc0:	2300      	movne	r3, #0
 8006bc2:	eba6 0807 	sub.w	r8, r6, r7
 8006bc6:	608b      	str	r3, [r1, #8]
 8006bc8:	f1b8 0f00 	cmp.w	r8, #0
 8006bcc:	dde9      	ble.n	8006ba2 <__sflush_r+0xae>
 8006bce:	6a21      	ldr	r1, [r4, #32]
 8006bd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bd2:	4643      	mov	r3, r8
 8006bd4:	463a      	mov	r2, r7
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	47b0      	blx	r6
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	dc08      	bgt.n	8006bf0 <__sflush_r+0xfc>
 8006bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf0:	4407      	add	r7, r0
 8006bf2:	eba8 0800 	sub.w	r8, r8, r0
 8006bf6:	e7e7      	b.n	8006bc8 <__sflush_r+0xd4>
 8006bf8:	dfbffffe 	.word	0xdfbffffe

08006bfc <_fflush_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	690b      	ldr	r3, [r1, #16]
 8006c00:	4605      	mov	r5, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	b913      	cbnz	r3, 8006c0c <_fflush_r+0x10>
 8006c06:	2500      	movs	r5, #0
 8006c08:	4628      	mov	r0, r5
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	b118      	cbz	r0, 8006c16 <_fflush_r+0x1a>
 8006c0e:	6a03      	ldr	r3, [r0, #32]
 8006c10:	b90b      	cbnz	r3, 8006c16 <_fflush_r+0x1a>
 8006c12:	f7ff fa91 	bl	8006138 <__sinit>
 8006c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0f3      	beq.n	8006c06 <_fflush_r+0xa>
 8006c1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c20:	07d0      	lsls	r0, r2, #31
 8006c22:	d404      	bmi.n	8006c2e <_fflush_r+0x32>
 8006c24:	0599      	lsls	r1, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_fflush_r+0x32>
 8006c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c2a:	f7ff fb8a 	bl	8006342 <__retarget_lock_acquire_recursive>
 8006c2e:	4628      	mov	r0, r5
 8006c30:	4621      	mov	r1, r4
 8006c32:	f7ff ff5f 	bl	8006af4 <__sflush_r>
 8006c36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c38:	07da      	lsls	r2, r3, #31
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	d4e4      	bmi.n	8006c08 <_fflush_r+0xc>
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	059b      	lsls	r3, r3, #22
 8006c42:	d4e1      	bmi.n	8006c08 <_fflush_r+0xc>
 8006c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c46:	f7ff fb7d 	bl	8006344 <__retarget_lock_release_recursive>
 8006c4a:	e7dd      	b.n	8006c08 <_fflush_r+0xc>

08006c4c <__swbuf_r>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	460e      	mov	r6, r1
 8006c50:	4614      	mov	r4, r2
 8006c52:	4605      	mov	r5, r0
 8006c54:	b118      	cbz	r0, 8006c5e <__swbuf_r+0x12>
 8006c56:	6a03      	ldr	r3, [r0, #32]
 8006c58:	b90b      	cbnz	r3, 8006c5e <__swbuf_r+0x12>
 8006c5a:	f7ff fa6d 	bl	8006138 <__sinit>
 8006c5e:	69a3      	ldr	r3, [r4, #24]
 8006c60:	60a3      	str	r3, [r4, #8]
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	071a      	lsls	r2, r3, #28
 8006c66:	d501      	bpl.n	8006c6c <__swbuf_r+0x20>
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	b943      	cbnz	r3, 8006c7e <__swbuf_r+0x32>
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 f82a 	bl	8006cc8 <__swsetup_r>
 8006c74:	b118      	cbz	r0, 8006c7e <__swbuf_r+0x32>
 8006c76:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	6922      	ldr	r2, [r4, #16]
 8006c82:	1a98      	subs	r0, r3, r2
 8006c84:	6963      	ldr	r3, [r4, #20]
 8006c86:	b2f6      	uxtb	r6, r6
 8006c88:	4283      	cmp	r3, r0
 8006c8a:	4637      	mov	r7, r6
 8006c8c:	dc05      	bgt.n	8006c9a <__swbuf_r+0x4e>
 8006c8e:	4621      	mov	r1, r4
 8006c90:	4628      	mov	r0, r5
 8006c92:	f7ff ffb3 	bl	8006bfc <_fflush_r>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d1ed      	bne.n	8006c76 <__swbuf_r+0x2a>
 8006c9a:	68a3      	ldr	r3, [r4, #8]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	60a3      	str	r3, [r4, #8]
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	6022      	str	r2, [r4, #0]
 8006ca6:	701e      	strb	r6, [r3, #0]
 8006ca8:	6962      	ldr	r2, [r4, #20]
 8006caa:	1c43      	adds	r3, r0, #1
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d004      	beq.n	8006cba <__swbuf_r+0x6e>
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	07db      	lsls	r3, r3, #31
 8006cb4:	d5e1      	bpl.n	8006c7a <__swbuf_r+0x2e>
 8006cb6:	2e0a      	cmp	r6, #10
 8006cb8:	d1df      	bne.n	8006c7a <__swbuf_r+0x2e>
 8006cba:	4621      	mov	r1, r4
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f7ff ff9d 	bl	8006bfc <_fflush_r>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d0d9      	beq.n	8006c7a <__swbuf_r+0x2e>
 8006cc6:	e7d6      	b.n	8006c76 <__swbuf_r+0x2a>

08006cc8 <__swsetup_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4b29      	ldr	r3, [pc, #164]	@ (8006d70 <__swsetup_r+0xa8>)
 8006ccc:	4605      	mov	r5, r0
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	b118      	cbz	r0, 8006cdc <__swsetup_r+0x14>
 8006cd4:	6a03      	ldr	r3, [r0, #32]
 8006cd6:	b90b      	cbnz	r3, 8006cdc <__swsetup_r+0x14>
 8006cd8:	f7ff fa2e 	bl	8006138 <__sinit>
 8006cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce0:	0719      	lsls	r1, r3, #28
 8006ce2:	d422      	bmi.n	8006d2a <__swsetup_r+0x62>
 8006ce4:	06da      	lsls	r2, r3, #27
 8006ce6:	d407      	bmi.n	8006cf8 <__swsetup_r+0x30>
 8006ce8:	2209      	movs	r2, #9
 8006cea:	602a      	str	r2, [r5, #0]
 8006cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cf0:	81a3      	strh	r3, [r4, #12]
 8006cf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cf6:	e033      	b.n	8006d60 <__swsetup_r+0x98>
 8006cf8:	0758      	lsls	r0, r3, #29
 8006cfa:	d512      	bpl.n	8006d22 <__swsetup_r+0x5a>
 8006cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cfe:	b141      	cbz	r1, 8006d12 <__swsetup_r+0x4a>
 8006d00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d04:	4299      	cmp	r1, r3
 8006d06:	d002      	beq.n	8006d0e <__swsetup_r+0x46>
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f7ff fb2b 	bl	8006364 <_free_r>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	6063      	str	r3, [r4, #4]
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f043 0308 	orr.w	r3, r3, #8
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	b94b      	cbnz	r3, 8006d42 <__swsetup_r+0x7a>
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d38:	d003      	beq.n	8006d42 <__swsetup_r+0x7a>
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f000 f84f 	bl	8006de0 <__smakebuf_r>
 8006d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d46:	f013 0201 	ands.w	r2, r3, #1
 8006d4a:	d00a      	beq.n	8006d62 <__swsetup_r+0x9a>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	60a2      	str	r2, [r4, #8]
 8006d50:	6962      	ldr	r2, [r4, #20]
 8006d52:	4252      	negs	r2, r2
 8006d54:	61a2      	str	r2, [r4, #24]
 8006d56:	6922      	ldr	r2, [r4, #16]
 8006d58:	b942      	cbnz	r2, 8006d6c <__swsetup_r+0xa4>
 8006d5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d5e:	d1c5      	bne.n	8006cec <__swsetup_r+0x24>
 8006d60:	bd38      	pop	{r3, r4, r5, pc}
 8006d62:	0799      	lsls	r1, r3, #30
 8006d64:	bf58      	it	pl
 8006d66:	6962      	ldrpl	r2, [r4, #20]
 8006d68:	60a2      	str	r2, [r4, #8]
 8006d6a:	e7f4      	b.n	8006d56 <__swsetup_r+0x8e>
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	e7f7      	b.n	8006d60 <__swsetup_r+0x98>
 8006d70:	20000018 	.word	0x20000018

08006d74 <_sbrk_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d06      	ldr	r5, [pc, #24]	@ (8006d90 <_sbrk_r+0x1c>)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	602b      	str	r3, [r5, #0]
 8006d80:	f7fa f844 	bl	8000e0c <_sbrk>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d102      	bne.n	8006d8e <_sbrk_r+0x1a>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	b103      	cbz	r3, 8006d8e <_sbrk_r+0x1a>
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	20005f90 	.word	0x20005f90

08006d94 <__swhatbuf_r>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	460c      	mov	r4, r1
 8006d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d9c:	2900      	cmp	r1, #0
 8006d9e:	b096      	sub	sp, #88	@ 0x58
 8006da0:	4615      	mov	r5, r2
 8006da2:	461e      	mov	r6, r3
 8006da4:	da0d      	bge.n	8006dc2 <__swhatbuf_r+0x2e>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006dac:	f04f 0100 	mov.w	r1, #0
 8006db0:	bf14      	ite	ne
 8006db2:	2340      	movne	r3, #64	@ 0x40
 8006db4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006db8:	2000      	movs	r0, #0
 8006dba:	6031      	str	r1, [r6, #0]
 8006dbc:	602b      	str	r3, [r5, #0]
 8006dbe:	b016      	add	sp, #88	@ 0x58
 8006dc0:	bd70      	pop	{r4, r5, r6, pc}
 8006dc2:	466a      	mov	r2, sp
 8006dc4:	f000 f848 	bl	8006e58 <_fstat_r>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	dbec      	blt.n	8006da6 <__swhatbuf_r+0x12>
 8006dcc:	9901      	ldr	r1, [sp, #4]
 8006dce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006dd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006dd6:	4259      	negs	r1, r3
 8006dd8:	4159      	adcs	r1, r3
 8006dda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006dde:	e7eb      	b.n	8006db8 <__swhatbuf_r+0x24>

08006de0 <__smakebuf_r>:
 8006de0:	898b      	ldrh	r3, [r1, #12]
 8006de2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006de4:	079d      	lsls	r5, r3, #30
 8006de6:	4606      	mov	r6, r0
 8006de8:	460c      	mov	r4, r1
 8006dea:	d507      	bpl.n	8006dfc <__smakebuf_r+0x1c>
 8006dec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	6123      	str	r3, [r4, #16]
 8006df4:	2301      	movs	r3, #1
 8006df6:	6163      	str	r3, [r4, #20]
 8006df8:	b003      	add	sp, #12
 8006dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dfc:	ab01      	add	r3, sp, #4
 8006dfe:	466a      	mov	r2, sp
 8006e00:	f7ff ffc8 	bl	8006d94 <__swhatbuf_r>
 8006e04:	9f00      	ldr	r7, [sp, #0]
 8006e06:	4605      	mov	r5, r0
 8006e08:	4639      	mov	r1, r7
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f7ff fb16 	bl	800643c <_malloc_r>
 8006e10:	b948      	cbnz	r0, 8006e26 <__smakebuf_r+0x46>
 8006e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e16:	059a      	lsls	r2, r3, #22
 8006e18:	d4ee      	bmi.n	8006df8 <__smakebuf_r+0x18>
 8006e1a:	f023 0303 	bic.w	r3, r3, #3
 8006e1e:	f043 0302 	orr.w	r3, r3, #2
 8006e22:	81a3      	strh	r3, [r4, #12]
 8006e24:	e7e2      	b.n	8006dec <__smakebuf_r+0xc>
 8006e26:	89a3      	ldrh	r3, [r4, #12]
 8006e28:	6020      	str	r0, [r4, #0]
 8006e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e2e:	81a3      	strh	r3, [r4, #12]
 8006e30:	9b01      	ldr	r3, [sp, #4]
 8006e32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e36:	b15b      	cbz	r3, 8006e50 <__smakebuf_r+0x70>
 8006e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f000 f81d 	bl	8006e7c <_isatty_r>
 8006e42:	b128      	cbz	r0, 8006e50 <__smakebuf_r+0x70>
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	f023 0303 	bic.w	r3, r3, #3
 8006e4a:	f043 0301 	orr.w	r3, r3, #1
 8006e4e:	81a3      	strh	r3, [r4, #12]
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	431d      	orrs	r5, r3
 8006e54:	81a5      	strh	r5, [r4, #12]
 8006e56:	e7cf      	b.n	8006df8 <__smakebuf_r+0x18>

08006e58 <_fstat_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4d07      	ldr	r5, [pc, #28]	@ (8006e78 <_fstat_r+0x20>)
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4604      	mov	r4, r0
 8006e60:	4608      	mov	r0, r1
 8006e62:	4611      	mov	r1, r2
 8006e64:	602b      	str	r3, [r5, #0]
 8006e66:	f7f9 ffa9 	bl	8000dbc <_fstat>
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	d102      	bne.n	8006e74 <_fstat_r+0x1c>
 8006e6e:	682b      	ldr	r3, [r5, #0]
 8006e70:	b103      	cbz	r3, 8006e74 <_fstat_r+0x1c>
 8006e72:	6023      	str	r3, [r4, #0]
 8006e74:	bd38      	pop	{r3, r4, r5, pc}
 8006e76:	bf00      	nop
 8006e78:	20005f90 	.word	0x20005f90

08006e7c <_isatty_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d06      	ldr	r5, [pc, #24]	@ (8006e98 <_isatty_r+0x1c>)
 8006e80:	2300      	movs	r3, #0
 8006e82:	4604      	mov	r4, r0
 8006e84:	4608      	mov	r0, r1
 8006e86:	602b      	str	r3, [r5, #0]
 8006e88:	f7f9 ffa8 	bl	8000ddc <_isatty>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_isatty_r+0x1a>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_isatty_r+0x1a>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	20005f90 	.word	0x20005f90

08006e9c <_init>:
 8006e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9e:	bf00      	nop
 8006ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea2:	bc08      	pop	{r3}
 8006ea4:	469e      	mov	lr, r3
 8006ea6:	4770      	bx	lr

08006ea8 <_fini>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	bf00      	nop
 8006eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eae:	bc08      	pop	{r3}
 8006eb0:	469e      	mov	lr, r3
 8006eb2:	4770      	bx	lr
