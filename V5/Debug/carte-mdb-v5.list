
carte-mdb-v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005a88  08005a88  00006a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b30  08005b30  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005b30  08005b30  00006b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b38  08005b38  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b38  08005b38  00006b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b3c  08005b3c  00006b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005b40  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  20000068  08005ba8  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  08005ba8  0000773c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acf4  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e3  00000000  00000000  00021d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  00025070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001248  00000000  00000000  00026800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fa7  00000000  00000000  00027a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4b3  00000000  00000000  000499ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9eb3  00000000  00000000  00063ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013dd55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cd4  00000000  00000000  0013dd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00144a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005a70 	.word	0x08005a70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005a70 	.word	0x08005a70

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_read>:
#include "main.h"

int _read(int file, char *ptr, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  (void)file;

  HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, 100);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <_read+0x24>)
 80005c6:	f003 fc03 	bl	8003dd0 <HAL_UART_Receive>

  return len;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000278 	.word	0x20000278

080005d8 <_write>:
int _write(int file, char *ptr, int len)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  (void)file;

  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 100);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	2364      	movs	r3, #100	@ 0x64
 80005ea:	68b9      	ldr	r1, [r7, #8]
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <_write+0x24>)
 80005ee:	f003 fb61 	bl	8003cb4 <HAL_UART_Transmit>

  return len;
 80005f2:	687b      	ldr	r3, [r7, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000278 	.word	0x20000278

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fe92 	bl	800132e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f8b1 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 faf5 	bl	8000bfc <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000612:	f000 f8fb 	bl	800080c <MX_FDCAN2_Init>
  MX_TIM2_Init();
 8000616:	f000 f97d 	bl	8000914 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800061a:	f000 fa2f 	bl	8000a7c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800061e:	f000 fa79 	bl	8000b14 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8000622:	f000 fac3 	bl	8000bac <MX_USB_PCD_Init>
  MX_SPI1_Init();
 8000626:	f000 f937 	bl	8000898 <MX_SPI1_Init>
  MX_TIM3_Init();
 800062a:	f000 f9cd 	bl	80009c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LIDAR_PWM_GPIO_Port, LIDAR_PWM_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000638:	f001 fb46 	bl	8001cc8 <HAL_GPIO_WritePin>

  enum state_scan state_lidar = STANDBY;
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]
  descriptor desc_res = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	f8c3 2003 	str.w	r2, [r3, #3]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (HAL_GPIO_ReadPin(AU_GPIO_Port, AU_Pin) != GPIO_PIN_RESET) {
 800064c:	2102      	movs	r1, #2
 800064e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000652:	f001 fb21 	bl	8001c98 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0f7      	beq.n	800064c <main+0x4c>
		switch (state_lidar) {
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b03      	cmp	r3, #3
 8000660:	d84f      	bhi.n	8000702 <main+0x102>
 8000662:	a201      	add	r2, pc, #4	@ (adr r2, 8000668 <main+0x68>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	08000679 	.word	0x08000679
 800066c:	080006a1 	.word	0x080006a1
 8000670:	080006bb 	.word	0x080006bb
 8000674:	080006fb 	.word	0x080006fb
		case STANDBY:
			// Start Lidar rotation (PWM pin -> on)
			printf("on\n\r");
 8000678:	4834      	ldr	r0, [pc, #208]	@ (800074c <main+0x14c>)
 800067a:	f004 fb8b 	bl	8004d94 <iprintf>
			HAL_GPIO_WritePin(LIDAR_PWM_GPIO_Port, LIDAR_PWM_Pin, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000688:	f001 fb1e 	bl	8001cc8 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000690:	f000 febe 	bl	8001410 <HAL_Delay>

			state_lidar = REQUEST;
 8000694:	2301      	movs	r3, #1
 8000696:	73fb      	strb	r3, [r7, #15]
			printf("req\n\r");
 8000698:	482d      	ldr	r0, [pc, #180]	@ (8000750 <main+0x150>)
 800069a:	f004 fb7b 	bl	8004d94 <iprintf>
			break;
 800069e:	e036      	b.n	800070e <main+0x10e>

		case REQUEST:
			// Request
			desc_res = new_req(&huart1, SCAN);
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2220      	movs	r2, #32
 80006a6:	492b      	ldr	r1, [pc, #172]	@ (8000754 <main+0x154>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fb1d 	bl	8000ce8 <new_req>

			state_lidar = DESCRIPTOR;
 80006ae:	2302      	movs	r3, #2
 80006b0:	73fb      	strb	r3, [r7, #15]
			printf("desc\n\r");
 80006b2:	4829      	ldr	r0, [pc, #164]	@ (8000758 <main+0x158>)
 80006b4:	f004 fb6e 	bl	8004d94 <iprintf>
			break;
 80006b8:	e029      	b.n	800070e <main+0x10e>

		case DESCRIPTOR:
			// Read descriptor
			if (desc_res.start_flag1 != START_FLAG1)
 80006ba:	7a3b      	ldrb	r3, [r7, #8]
 80006bc:	2ba5      	cmp	r3, #165	@ 0xa5
 80006be:	d002      	beq.n	80006c6 <main+0xc6>
				state_lidar = UART_ERROR;
 80006c0:	2304      	movs	r3, #4
 80006c2:	73fb      	strb	r3, [r7, #15]
				state_lidar = UART_ERROR;
			else {
				state_lidar = SCANNING; // Everything fine !
				printf("scan\n\r");
			}
			break;
 80006c4:	e023      	b.n	800070e <main+0x10e>
			else if (desc_res.start_flag2 != START_FLAG2)
 80006c6:	7a7b      	ldrb	r3, [r7, #9]
 80006c8:	2b5a      	cmp	r3, #90	@ 0x5a
 80006ca:	d002      	beq.n	80006d2 <main+0xd2>
				state_lidar = UART_ERROR;
 80006cc:	2304      	movs	r3, #4
 80006ce:	73fb      	strb	r3, [r7, #15]
			break;
 80006d0:	e01d      	b.n	800070e <main+0x10e>
			else if (desc_res.res_length_mode != RES_LENGTH_MODE)
 80006d2:	f8d7 300a 	ldr.w	r3, [r7, #10]
 80006d6:	4a21      	ldr	r2, [pc, #132]	@ (800075c <main+0x15c>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d002      	beq.n	80006e2 <main+0xe2>
				state_lidar = UART_ERROR;
 80006dc:	2304      	movs	r3, #4
 80006de:	73fb      	strb	r3, [r7, #15]
			break;
 80006e0:	e015      	b.n	800070e <main+0x10e>
			else if (desc_res.type != DATA_TYPE)
 80006e2:	7bbb      	ldrb	r3, [r7, #14]
 80006e4:	2b81      	cmp	r3, #129	@ 0x81
 80006e6:	d002      	beq.n	80006ee <main+0xee>
				state_lidar = UART_ERROR;
 80006e8:	2304      	movs	r3, #4
 80006ea:	73fb      	strb	r3, [r7, #15]
			break;
 80006ec:	e00f      	b.n	800070e <main+0x10e>
				state_lidar = SCANNING; // Everything fine !
 80006ee:	2303      	movs	r3, #3
 80006f0:	73fb      	strb	r3, [r7, #15]
				printf("scan\n\r");
 80006f2:	481b      	ldr	r0, [pc, #108]	@ (8000760 <main+0x160>)
 80006f4:	f004 fb4e 	bl	8004d94 <iprintf>
			break;
 80006f8:	e009      	b.n	800070e <main+0x10e>

		case SCANNING:
			printf("ici");
 80006fa:	481a      	ldr	r0, [pc, #104]	@ (8000764 <main+0x164>)
 80006fc:	f004 fb4a 	bl	8004d94 <iprintf>
			break;
 8000700:	e005      	b.n	800070e <main+0x10e>

		default:
			printf("error\n\r");
 8000702:	4819      	ldr	r0, [pc, #100]	@ (8000768 <main+0x168>)
 8000704:	f004 fb46 	bl	8004d94 <iprintf>
			state_lidar = UART_ERROR;
 8000708:	2304      	movs	r3, #4
 800070a:	73fb      	strb	r3, [r7, #15]

			break;
 800070c:	bf00      	nop
		//			  HAL_UART_Transmit(&huart2, (uint8_t *)&res_data, (uint16_t)sizeof(res_data), 500);
		//			  HAL_Delay(100);
		//			  HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, 500);
		//			  HAL_Delay(100);
		//		  }
		if (HAL_GPIO_ReadPin(AU_GPIO_Port, AU_Pin) == GPIO_PIN_RESET) {
 800070e:	2102      	movs	r1, #2
 8000710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000714:	f001 fac0 	bl	8001c98 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d196      	bne.n	800064c <main+0x4c>
			printf("off\n\r");
 800071e:	4813      	ldr	r0, [pc, #76]	@ (800076c <main+0x16c>)
 8000720:	f004 fb38 	bl	8004d94 <iprintf>
			new_req(&huart1, STOP);
 8000724:	463b      	mov	r3, r7
 8000726:	2225      	movs	r2, #37	@ 0x25
 8000728:	490a      	ldr	r1, [pc, #40]	@ (8000754 <main+0x154>)
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fadc 	bl	8000ce8 <new_req>
			HAL_GPIO_WritePin(LIDAR_PWM_GPIO_Port, LIDAR_PWM_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073a:	f001 fac5 	bl	8001cc8 <HAL_GPIO_WritePin>
			stop(&huart1);
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <main+0x154>)
 8000740:	f000 fafa 	bl	8000d38 <stop>
			state_lidar = STANDBY;
 8000744:	2300      	movs	r3, #0
 8000746:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(AU_GPIO_Port, AU_Pin) != GPIO_PIN_RESET) {
 8000748:	e780      	b.n	800064c <main+0x4c>
 800074a:	bf00      	nop
 800074c:	08005a88 	.word	0x08005a88
 8000750:	08005a90 	.word	0x08005a90
 8000754:	200001e4 	.word	0x200001e4
 8000758:	08005a98 	.word	0x08005a98
 800075c:	40000005 	.word	0x40000005
 8000760:	08005aa0 	.word	0x08005aa0
 8000764:	08005aa8 	.word	0x08005aa8
 8000768:	08005aac 	.word	0x08005aac
 800076c:	08005ab4 	.word	0x08005ab4

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	2238      	movs	r2, #56	@ 0x38
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fb5d 	bl	8004e3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000792:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000796:	f001 fba7 	bl	8001ee8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800079a:	2322      	movs	r3, #34	@ 0x22
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2340      	movs	r3, #64	@ 0x40
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b0:	2302      	movs	r3, #2
 80007b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0318 	add.w	r3, r7, #24
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fc3f 	bl	8002050 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80007d8:	f000 fa80 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2303      	movs	r3, #3
 80007e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2102      	movs	r1, #2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 ff3d 	bl	8002674 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000800:	f000 fa6c 	bl	8000cdc <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3750      	adds	r7, #80	@ 0x50
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000810:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 8000812:	4a20      	ldr	r2, [pc, #128]	@ (8000894 <MX_FDCAN2_Init+0x88>)
 8000814:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000816:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800081c:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000822:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000828:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 800082a:	2200      	movs	r2, #0
 800082c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 8000830:	2200      	movs	r2, #0
 8000832:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 8000836:	2200      	movs	r2, #0
 8000838:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 800083c:	2210      	movs	r2, #16
 800083e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 8000842:	2201      	movs	r2, #1
 8000844:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000846:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 8000848:	2202      	movs	r2, #2
 800084a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800084c:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 800084e:	2202      	movs	r2, #2
 8000850:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 8000854:	2201      	movs	r2, #1
 8000856:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000858:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 800085a:	2201      	movs	r2, #1
 800085c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 8000860:	2201      	movs	r2, #1
 8000862:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000864:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 8000866:	2201      	movs	r2, #1
 8000868:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 800086c:	2200      	movs	r2, #0
 800086e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 8000872:	2200      	movs	r2, #0
 8000874:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 8000878:	2200      	movs	r2, #0
 800087a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_FDCAN2_Init+0x84>)
 800087e:	f000 fecd 	bl	800161c <HAL_FDCAN_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000888:	f000 fa28 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000084 	.word	0x20000084
 8000894:	40006800 	.word	0x40006800

08000898 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800089c:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <MX_SPI1_Init+0x74>)
 800089e:	4a1c      	ldr	r2, [pc, #112]	@ (8000910 <MX_SPI1_Init+0x78>)
 80008a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_SPI1_Init+0x74>)
 80008a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008aa:	4b18      	ldr	r3, [pc, #96]	@ (800090c <MX_SPI1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b0:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_SPI1_Init+0x74>)
 80008b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_SPI1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_SPI1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_SPI1_Init+0x74>)
 80008c6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_SPI1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_SPI1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_SPI1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_SPI1_Init+0x74>)
 80008e6:	2207      	movs	r2, #7
 80008e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <MX_SPI1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_SPI1_Init+0x74>)
 80008f2:	2208      	movs	r2, #8
 80008f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_SPI1_Init+0x74>)
 80008f8:	f002 fb14 	bl	8002f24 <HAL_SPI_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000902:	f000 f9eb 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000e8 	.word	0x200000e8
 8000910:	40013000 	.word	0x40013000

08000914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000938:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <MX_TIM2_Init+0xb0>)
 800093a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800093e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000940:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <MX_TIM2_Init+0xb0>)
 8000942:	2200      	movs	r2, #0
 8000944:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <MX_TIM2_Init+0xb0>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800094c:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <MX_TIM2_Init+0xb0>)
 800094e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <MX_TIM2_Init+0xb0>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <MX_TIM2_Init+0xb0>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000960:	4818      	ldr	r0, [pc, #96]	@ (80009c4 <MX_TIM2_Init+0xb0>)
 8000962:	f002 fb8a 	bl	800307a <HAL_TIM_PWM_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800096c:	f000 f9b6 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4811      	ldr	r0, [pc, #68]	@ (80009c4 <MX_TIM2_Init+0xb0>)
 8000980:	f003 f8ba 	bl	8003af8 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800098a:	f000 f9a7 	bl	8000cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098e:	2360      	movs	r3, #96	@ 0x60
 8000990:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	4619      	mov	r1, r3
 80009a4:	4807      	ldr	r0, [pc, #28]	@ (80009c4 <MX_TIM2_Init+0xb0>)
 80009a6:	f002 fbbf 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80009b0:	f000 f994 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009b4:	4803      	ldr	r0, [pc, #12]	@ (80009c4 <MX_TIM2_Init+0xb0>)
 80009b6:	f000 fabf 	bl	8000f38 <HAL_TIM_MspPostInit>

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	@ 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000014c 	.word	0x2000014c

080009c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	615a      	str	r2, [r3, #20]
 80009ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009ec:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <MX_TIM3_Init+0xac>)
 80009ee:	4a22      	ldr	r2, [pc, #136]	@ (8000a78 <MX_TIM3_Init+0xb0>)
 80009f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009f2:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <MX_TIM3_Init+0xac>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <MX_TIM3_Init+0xac>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <MX_TIM3_Init+0xac>)
 8000a00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <MX_TIM3_Init+0xac>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <MX_TIM3_Init+0xac>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a12:	4818      	ldr	r0, [pc, #96]	@ (8000a74 <MX_TIM3_Init+0xac>)
 8000a14:	f002 fb31 	bl	800307a <HAL_TIM_PWM_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000a1e:	f000 f95d 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4810      	ldr	r0, [pc, #64]	@ (8000a74 <MX_TIM3_Init+0xac>)
 8000a32:	f003 f861 	bl	8003af8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000a3c:	f000 f94e 	bl	8000cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a40:	2360      	movs	r3, #96	@ 0x60
 8000a42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	220c      	movs	r2, #12
 8000a54:	4619      	mov	r1, r3
 8000a56:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <MX_TIM3_Init+0xac>)
 8000a58:	f002 fb66 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000a62:	f000 f93b 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a66:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <MX_TIM3_Init+0xac>)
 8000a68:	f000 fa66 	bl	8000f38 <HAL_TIM_MspPostInit>

}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	@ 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000198 	.word	0x20000198
 8000a78:	40000400 	.word	0x40000400

08000a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a80:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a82:	4a23      	ldr	r2, [pc, #140]	@ (8000b10 <MX_USART1_UART_Init+0x94>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a86:	4b21      	ldr	r3, [pc, #132]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac4:	4811      	ldr	r0, [pc, #68]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000ac6:	f003 f8a5 	bl	8003c14 <HAL_UART_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ad0:	f000 f904 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000ad8:	f003 ff96 	bl	8004a08 <HAL_UARTEx_SetTxFifoThreshold>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae2:	f000 f8fb 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4808      	ldr	r0, [pc, #32]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aea:	f003 ffcb 	bl	8004a84 <HAL_UARTEx_SetRxFifoThreshold>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000af4:	f000 f8f2 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_USART1_UART_Init+0x90>)
 8000afa:	f003 ff4c 	bl	8004996 <HAL_UARTEx_DisableFifoMode>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b04:	f000 f8ea 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200001e4 	.word	0x200001e4
 8000b10:	40013800 	.word	0x40013800

08000b14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b18:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ba8 <MX_USART2_UART_Init+0x94>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b56:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5c:	4811      	ldr	r0, [pc, #68]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b5e:	f003 f859 	bl	8003c14 <HAL_UART_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b68:	f000 f8b8 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b70:	f003 ff4a 	bl	8004a08 <HAL_UARTEx_SetTxFifoThreshold>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7a:	f000 f8af 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4808      	ldr	r0, [pc, #32]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b82:	f003 ff7f 	bl	8004a84 <HAL_UARTEx_SetRxFifoThreshold>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b8c:	f000 f8a6 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_USART2_UART_Init+0x90>)
 8000b92:	f003 ff00 	bl	8004996 <HAL_UARTEx_DisableFifoMode>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 f89e 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000278 	.word	0x20000278
 8000ba8:	40004400 	.word	0x40004400

08000bac <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_USB_PCD_Init+0x48>)
 8000bb2:	4a11      	ldr	r2, [pc, #68]	@ (8000bf8 <MX_USB_PCD_Init+0x4c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_USB_PCD_Init+0x48>)
 8000bb8:	2208      	movs	r2, #8
 8000bba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_USB_PCD_Init+0x48>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_USB_PCD_Init+0x48>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_USB_PCD_Init+0x48>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_USB_PCD_Init+0x48>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <MX_USB_PCD_Init+0x48>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_USB_PCD_Init+0x48>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_USB_PCD_Init+0x48>)
 8000be2:	f001 f889 	bl	8001cf8 <HAL_PCD_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000bec:	f000 f876 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000030c 	.word	0x2000030c
 8000bf8:	40005c00 	.word	0x40005c00

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b30      	ldr	r3, [pc, #192]	@ (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	4a2f      	ldr	r2, [pc, #188]	@ (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2e:	4a29      	ldr	r2, [pc, #164]	@ (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c36:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_PWM_GPIO_Port, LIDAR_PWM_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4c:	f001 f83c 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2110      	movs	r1, #16
 8000c54:	4820      	ldr	r0, [pc, #128]	@ (8000cd8 <MX_GPIO_Init+0xdc>)
 8000c56:	f001 f837 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AU_Pin LIDAR_SELECT_Pin */
  GPIO_InitStruct.Pin = AU_Pin|LIDAR_SELECT_Pin;
 8000c5a:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c64:	2302      	movs	r3, #2
 8000c66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c72:	f000 fe8f 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 8000c76:	2301      	movs	r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	4813      	ldr	r0, [pc, #76]	@ (8000cd8 <MX_GPIO_Init+0xdc>)
 8000c8a:	f000 fe83 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIDAR_PWM_Pin */
  GPIO_InitStruct.Pin = LIDAR_PWM_Pin;
 8000c8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LIDAR_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000caa:	f000 fe73 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4804      	ldr	r0, [pc, #16]	@ (8000cd8 <MX_GPIO_Init+0xdc>)
 8000cc6:	f000 fe65 	bl	8001994 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cca:	bf00      	nop
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48000400 	.word	0x48000400

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <Error_Handler+0x8>

08000ce8 <new_req>:
#include "rplidar.h"
#include <stdio.h>
#include <string.h>

/* Request -------------------------------------------------------------------*/
descriptor new_req(UART_HandleTypeDef *huart, const uint8_t cmd) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	71fb      	strb	r3, [r7, #7]
	request req_struct;
	descriptor desc_res;
	req_struct.start_flag = START_FLAG1;
 8000cf6:	23a5      	movs	r3, #165	@ 0xa5
 8000cf8:	773b      	strb	r3, [r7, #28]
	req_struct.command = cmd;
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	777b      	strb	r3, [r7, #29]
	if (cmd > 0x80) {
		//todo
	}
	HAL_UART_Transmit(huart, (uint8_t *)&req_struct, sizeof(req_struct), 100);
 8000cfe:	f107 011c 	add.w	r1, r7, #28
 8000d02:	2364      	movs	r3, #100	@ 0x64
 8000d04:	2202      	movs	r2, #2
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f002 ffd4 	bl	8003cb4 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, (uint8_t *)&desc_res, sizeof(desc_res), 1000);
 8000d0c:	f107 0114 	add.w	r1, r7, #20
 8000d10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d14:	2207      	movs	r2, #7
 8000d16:	68b8      	ldr	r0, [r7, #8]
 8000d18:	f003 f85a 	bl	8003dd0 <HAL_UART_Receive>
	return desc_res;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	6818      	ldr	r0, [r3, #0]
 8000d26:	6010      	str	r0, [r2, #0]
 8000d28:	8899      	ldrh	r1, [r3, #4]
 8000d2a:	799b      	ldrb	r3, [r3, #6]
 8000d2c:	8091      	strh	r1, [r2, #4]
 8000d2e:	7193      	strb	r3, [r2, #6]
}
 8000d30:	68f8      	ldr	r0, [r7, #12]
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <stop>:
	//HAL_UART_Receive(huart, pData, data_size, 1000);
	HAL_UART_Receive(huart, pData, 5, 1000);
}

/* No response */
void stop(UART_HandleTypeDef *huart) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
	new_req(huart, STOP);
 8000d40:	463b      	mov	r3, r7
 8000d42:	2225      	movs	r2, #37	@ 0x25
 8000d44:	68f9      	ldr	r1, [r7, #12]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ffce 	bl	8000ce8 <new_req>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d66:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d76:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d8a:	f001 f951 	bl	8002030 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b09e      	sub	sp, #120	@ 0x78
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2250      	movs	r2, #80	@ 0x50
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f004 f83e 	bl	8004e3e <memset>
  if(hfdcan->Instance==FDCAN2)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e44 <HAL_FDCAN_MspInit+0xa8>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d137      	bne.n	8000e3c <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000dd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fe65 	bl	8002aac <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000de8:	f7ff ff78 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <HAL_FDCAN_MspInit+0xac>)
 8000dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df0:	4a15      	ldr	r2, [pc, #84]	@ (8000e48 <HAL_FDCAN_MspInit+0xac>)
 8000df2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <HAL_FDCAN_MspInit+0xac>)
 8000dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <HAL_FDCAN_MspInit+0xac>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e08:	4a0f      	ldr	r2, [pc, #60]	@ (8000e48 <HAL_FDCAN_MspInit+0xac>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e10:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <HAL_FDCAN_MspInit+0xac>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000e1c:	2360      	movs	r3, #96	@ 0x60
 8000e1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000e2c:	2309      	movs	r3, #9
 8000e2e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e34:	4619      	mov	r1, r3
 8000e36:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <HAL_FDCAN_MspInit+0xb0>)
 8000e38:	f000 fdac 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3778      	adds	r7, #120	@ 0x78
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40006800 	.word	0x40006800
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48000400 	.word	0x48000400

08000e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <HAL_SPI_MspInit+0x7c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d128      	bne.n	8000ec4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e76:	4a16      	ldr	r2, [pc, #88]	@ (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ea2:	23f0      	movs	r3, #240	@ 0xf0
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec0:	f000 fd68 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	@ 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40013000 	.word	0x40013000
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ee4:	d10c      	bne.n	8000f00 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee6:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eea:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <HAL_TIM_PWM_MspInit+0x5c>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000efe:	e010      	b.n	8000f22 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0b      	ldr	r2, [pc, #44]	@ (8000f34 <HAL_TIM_PWM_MspInit+0x60>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10b      	bne.n	8000f22 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40000400 	.word	0x40000400

08000f38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f58:	d11d      	bne.n	8000f96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <HAL_TIM_MspPostInit+0xa8>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	4a20      	ldr	r2, [pc, #128]	@ (8000fe0 <HAL_TIM_MspPostInit+0xa8>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f66:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <HAL_TIM_MspPostInit+0xa8>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LEDS_Pin;
 8000f72:	2301      	movs	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f82:	2301      	movs	r3, #1
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LEDS_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f90:	f000 fd00 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f94:	e020      	b.n	8000fd8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <HAL_TIM_MspPostInit+0xac>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d11b      	bne.n	8000fd8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_TIM_MspPostInit+0xa8>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <HAL_TIM_MspPostInit+0xa8>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <HAL_TIM_MspPostInit+0xa8>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_LED_Pin;
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8000fc8:	230a      	movs	r3, #10
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LIDAR_LED_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <HAL_TIM_MspPostInit+0xb0>)
 8000fd4:	f000 fcde 	bl	8001994 <HAL_GPIO_Init>
}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	@ 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40000400 	.word	0x40000400
 8000fe8:	48000400 	.word	0x48000400

08000fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0a0      	sub	sp, #128	@ 0x80
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	2250      	movs	r2, #80	@ 0x50
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f003 ff16 	bl	8004e3e <memset>
  if(huart->Instance==USART1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a3e      	ldr	r2, [pc, #248]	@ (8001110 <HAL_UART_MspInit+0x124>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d138      	bne.n	800108e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4618      	mov	r0, r3
 800102a:	f001 fd3f 	bl	8002aac <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001034:	f7ff fe52 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001038:	4b36      	ldr	r3, [pc, #216]	@ (8001114 <HAL_UART_MspInit+0x128>)
 800103a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103c:	4a35      	ldr	r2, [pc, #212]	@ (8001114 <HAL_UART_MspInit+0x128>)
 800103e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001042:	6613      	str	r3, [r2, #96]	@ 0x60
 8001044:	4b33      	ldr	r3, [pc, #204]	@ (8001114 <HAL_UART_MspInit+0x128>)
 8001046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001048:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <HAL_UART_MspInit+0x128>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001054:	4a2f      	ldr	r2, [pc, #188]	@ (8001114 <HAL_UART_MspInit+0x128>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105c:	4b2d      	ldr	r3, [pc, #180]	@ (8001114 <HAL_UART_MspInit+0x128>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LIDAR_TX_Pin|LIDAR_RX_Pin;
 8001068:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800106c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800107a:	2307      	movs	r3, #7
 800107c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001088:	f000 fc84 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800108c:	e03b      	b.n	8001106 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a21      	ldr	r2, [pc, #132]	@ (8001118 <HAL_UART_MspInit+0x12c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d136      	bne.n	8001106 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001098:	2302      	movs	r3, #2
 800109a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fd01 	bl	8002aac <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80010b0:	f7ff fe14 	bl	8000cdc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b4:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <HAL_UART_MspInit+0x128>)
 80010b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b8:	4a16      	ldr	r2, [pc, #88]	@ (8001114 <HAL_UART_MspInit+0x128>)
 80010ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010be:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <HAL_UART_MspInit+0x128>)
 80010c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_UART_MspInit+0x128>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d0:	4a10      	ldr	r2, [pc, #64]	@ (8001114 <HAL_UART_MspInit+0x128>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <HAL_UART_MspInit+0x128>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80010e4:	230c      	movs	r3, #12
 80010e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f4:	2307      	movs	r3, #7
 80010f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001102:	f000 fc47 	bl	8001994 <HAL_GPIO_Init>
}
 8001106:	bf00      	nop
 8001108:	3780      	adds	r7, #128	@ 0x80
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40013800 	.word	0x40013800
 8001114:	40021000 	.word	0x40021000
 8001118:	40004400 	.word	0x40004400

0800111c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b098      	sub	sp, #96	@ 0x60
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	2250      	movs	r2, #80	@ 0x50
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f003 fe86 	bl	8004e3e <memset>
  if(hpcd->Instance==USB)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a11      	ldr	r2, [pc, #68]	@ (800117c <HAL_PCD_MspInit+0x60>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d11a      	bne.n	8001172 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800113c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001140:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001142:	2300      	movs	r3, #0
 8001144:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fcae 	bl	8002aac <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8001156:	f7ff fdc1 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <HAL_PCD_MspInit+0x64>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	4a08      	ldr	r2, [pc, #32]	@ (8001180 <HAL_PCD_MspInit+0x64>)
 8001160:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001164:	6593      	str	r3, [r2, #88]	@ 0x58
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_PCD_MspInit+0x64>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3760      	adds	r7, #96	@ 0x60
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40005c00 	.word	0x40005c00
 8001180:	40021000 	.word	0x40021000

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <NMI_Handler+0x4>

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <MemManage_Handler+0x4>

0800119c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <UsageFault_Handler+0x4>

080011ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011da:	f000 f8fb 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800120a:	605a      	str	r2, [r3, #4]
  return 0;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <_isatty>:

int _isatty(int file)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001254:	4a14      	ldr	r2, [pc, #80]	@ (80012a8 <_sbrk+0x5c>)
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <_sbrk+0x60>)
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001260:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <_sbrk+0x64>)
 800126a:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <_sbrk+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	429a      	cmp	r2, r3
 800127a:	d207      	bcs.n	800128c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800127c:	f003 fe2e 	bl	8004edc <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800128a:	e009      	b.n	80012a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800128c:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001292:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <_sbrk+0x64>)
 800129c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2001c000 	.word	0x2001c000
 80012ac:	00000400 	.word	0x00000400
 80012b0:	200005e8 	.word	0x200005e8
 80012b4:	20000740 	.word	0x20000740

080012b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <SystemInit+0x20>)
 80012be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012c2:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <SystemInit+0x20>)
 80012c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012dc:	480d      	ldr	r0, [pc, #52]	@ (8001314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012de:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e0:	f7ff ffea 	bl	80012b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e4:	480c      	ldr	r0, [pc, #48]	@ (8001318 <LoopForever+0x6>)
  ldr r1, =_edata
 80012e6:	490d      	ldr	r1, [pc, #52]	@ (800131c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <LoopForever+0xe>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001328 <LoopForever+0x16>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130a:	f003 fded 	bl	8004ee8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800130e:	f7ff f977 	bl	8000600 <main>

08001312 <LoopForever>:

LoopForever:
    b LoopForever
 8001312:	e7fe      	b.n	8001312 <LoopForever>
  ldr   r0, =_estack
 8001314:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001320:	08005b40 	.word	0x08005b40
  ldr r2, =_sbss
 8001324:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001328:	2000073c 	.word	0x2000073c

0800132c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_2_IRQHandler>

0800132e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 f93d 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133e:	200f      	movs	r0, #15
 8001340:	f000 f80e 	bl	8001360 <HAL_InitTick>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	e001      	b.n	8001354 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001350:	f7ff fd00 	bl	8000d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001354:	79fb      	ldrb	r3, [r7, #7]

}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800136c:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <HAL_InitTick+0x68>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d022      	beq.n	80013ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_InitTick+0x6c>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <HAL_InitTick+0x68>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001380:	fbb1 f3f3 	udiv	r3, r1, r3
 8001384:	fbb2 f3f3 	udiv	r3, r2, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f93a 	bl	8001602 <HAL_SYSTICK_Config>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10f      	bne.n	80013b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	d809      	bhi.n	80013ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139a:	2200      	movs	r2, #0
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013a2:	f000 f914 	bl	80015ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <HAL_InitTick+0x70>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	e007      	b.n	80013be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	e004      	b.n	80013be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e001      	b.n	80013be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000004 	.word	0x20000004

080013d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <HAL_IncTick+0x1c>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <HAL_IncTick+0x20>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a03      	ldr	r2, [pc, #12]	@ (80013f0 <HAL_IncTick+0x1c>)
 80013e4:	6013      	str	r3, [r2, #0]
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	200005ec 	.word	0x200005ec
 80013f4:	20000008 	.word	0x20000008

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	@ (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200005ec 	.word	0x200005ec

08001410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff ffee 	bl	80013f8 <HAL_GetTick>
 800141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001428:	d004      	beq.n	8001434 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_Delay+0x40>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001434:	bf00      	nop
 8001436:	f7ff ffdf 	bl	80013f8 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	429a      	cmp	r2, r3
 8001444:	d8f7      	bhi.n	8001436 <HAL_Delay+0x26>
  {
  }
}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000008 	.word	0x20000008

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	@ (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	@ (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	@ 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	@ 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff47 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff5e 	bl	800149c <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff90 	bl	800150c <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5f 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffb2 	bl	8001574 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e147      	b.n	80018be <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fbaa 	bl	8000d9c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0210 	bic.w	r2, r2, #16
 8001656:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001658:	f7ff fece 	bl	80013f8 <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800165e:	e012      	b.n	8001686 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001660:	f7ff feca 	bl	80013f8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b0a      	cmp	r3, #10
 800166c:	d90b      	bls.n	8001686 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2203      	movs	r2, #3
 800167e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e11b      	b.n	80018be <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b08      	cmp	r3, #8
 8001692:	d0e5      	beq.n	8001660 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a4:	f7ff fea8 	bl	80013f8 <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016aa:	e012      	b.n	80016d2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016ac:	f7ff fea4 	bl	80013f8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b0a      	cmp	r3, #10
 80016b8:	d90b      	bls.n	80016d2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2203      	movs	r2, #3
 80016ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0f5      	b.n	80018be <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0e5      	beq.n	80016ac <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699a      	ldr	r2, [r3, #24]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0202 	orr.w	r2, r2, #2
 80016ee:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a74      	ldr	r2, [pc, #464]	@ (80018c8 <HAL_FDCAN_Init+0x2ac>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d103      	bne.n	8001702 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80016fa:	4a74      	ldr	r2, [pc, #464]	@ (80018cc <HAL_FDCAN_Init+0x2b0>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7c1b      	ldrb	r3, [r3, #16]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699a      	ldr	r2, [r3, #24]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001718:	619a      	str	r2, [r3, #24]
 800171a:	e007      	b.n	800172c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800172a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7c5b      	ldrb	r3, [r3, #17]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d108      	bne.n	8001746 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001742:	619a      	str	r2, [r3, #24]
 8001744:	e007      	b.n	8001756 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	699a      	ldr	r2, [r3, #24]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001754:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7c9b      	ldrb	r3, [r3, #18]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d108      	bne.n	8001770 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699a      	ldr	r2, [r3, #24]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800176c:	619a      	str	r2, [r3, #24]
 800176e:	e007      	b.n	8001780 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699a      	ldr	r2, [r3, #24]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800177e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80017a4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0210 	bic.w	r2, r2, #16
 80017b4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d108      	bne.n	80017d0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0204 	orr.w	r2, r2, #4
 80017cc:	619a      	str	r2, [r3, #24]
 80017ce:	e02c      	b.n	800182a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d028      	beq.n	800182a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d01c      	beq.n	800181a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699a      	ldr	r2, [r3, #24]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017ee:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691a      	ldr	r2, [r3, #16]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0210 	orr.w	r2, r2, #16
 80017fe:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b03      	cmp	r3, #3
 8001806:	d110      	bne.n	800182a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0220 	orr.w	r2, r2, #32
 8001816:	619a      	str	r2, [r3, #24]
 8001818:	e007      	b.n	800182a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699a      	ldr	r2, [r3, #24]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0220 	orr.w	r2, r2, #32
 8001828:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	3b01      	subs	r3, #1
 8001830:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	3b01      	subs	r3, #1
 8001838:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800183a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001842:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	3b01      	subs	r3, #1
 800184c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001852:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001854:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800185e:	d115      	bne.n	800188c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186a:	3b01      	subs	r3, #1
 800186c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800186e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001874:	3b01      	subs	r3, #1
 8001876:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001878:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001880:	3b01      	subs	r3, #1
 8001882:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001888:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800188a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f814 	bl	80018d0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40006400 	.word	0x40006400
 80018cc:	40006500 	.word	0x40006500

080018d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80018d8:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80018da:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001990 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d103      	bne.n	80018ee <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80018ec:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018fc:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001904:	041a      	lsls	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001922:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800192a:	061a      	lsls	r2, r3, #24
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	e005      	b.n	8001970 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3304      	adds	r3, #4
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	429a      	cmp	r2, r3
 800197a:	d3f3      	bcc.n	8001964 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	4000a400 	.word	0x4000a400
 8001990:	40006800 	.word	0x40006800

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019a2:	e15a      	b.n	8001c5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 814c 	beq.w	8001c54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d005      	beq.n	80019d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d130      	bne.n	8001a36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 0201 	and.w	r2, r3, #1
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d017      	beq.n	8001a72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d123      	bne.n	8001ac6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	6939      	ldr	r1, [r7, #16]
 8001ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0203 	and.w	r2, r3, #3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80a6 	beq.w	8001c54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b08:	4b5b      	ldr	r3, [pc, #364]	@ (8001c78 <HAL_GPIO_Init+0x2e4>)
 8001b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b0c:	4a5a      	ldr	r2, [pc, #360]	@ (8001c78 <HAL_GPIO_Init+0x2e4>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b14:	4b58      	ldr	r3, [pc, #352]	@ (8001c78 <HAL_GPIO_Init+0x2e4>)
 8001b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b20:	4a56      	ldr	r2, [pc, #344]	@ (8001c7c <HAL_GPIO_Init+0x2e8>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b4a:	d01f      	beq.n	8001b8c <HAL_GPIO_Init+0x1f8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a4c      	ldr	r2, [pc, #304]	@ (8001c80 <HAL_GPIO_Init+0x2ec>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d019      	beq.n	8001b88 <HAL_GPIO_Init+0x1f4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a4b      	ldr	r2, [pc, #300]	@ (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d013      	beq.n	8001b84 <HAL_GPIO_Init+0x1f0>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8001c88 <HAL_GPIO_Init+0x2f4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d00d      	beq.n	8001b80 <HAL_GPIO_Init+0x1ec>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a49      	ldr	r2, [pc, #292]	@ (8001c8c <HAL_GPIO_Init+0x2f8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d007      	beq.n	8001b7c <HAL_GPIO_Init+0x1e8>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a48      	ldr	r2, [pc, #288]	@ (8001c90 <HAL_GPIO_Init+0x2fc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d101      	bne.n	8001b78 <HAL_GPIO_Init+0x1e4>
 8001b74:	2305      	movs	r3, #5
 8001b76:	e00a      	b.n	8001b8e <HAL_GPIO_Init+0x1fa>
 8001b78:	2306      	movs	r3, #6
 8001b7a:	e008      	b.n	8001b8e <HAL_GPIO_Init+0x1fa>
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	e006      	b.n	8001b8e <HAL_GPIO_Init+0x1fa>
 8001b80:	2303      	movs	r3, #3
 8001b82:	e004      	b.n	8001b8e <HAL_GPIO_Init+0x1fa>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e002      	b.n	8001b8e <HAL_GPIO_Init+0x1fa>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_GPIO_Init+0x1fa>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	f002 0203 	and.w	r2, r2, #3
 8001b94:	0092      	lsls	r2, r2, #2
 8001b96:	4093      	lsls	r3, r2
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b9e:	4937      	ldr	r1, [pc, #220]	@ (8001c7c <HAL_GPIO_Init+0x2e8>)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bac:	4b39      	ldr	r3, [pc, #228]	@ (8001c94 <HAL_GPIO_Init+0x300>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bd0:	4a30      	ldr	r2, [pc, #192]	@ (8001c94 <HAL_GPIO_Init+0x300>)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c94 <HAL_GPIO_Init+0x300>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bfa:	4a26      	ldr	r2, [pc, #152]	@ (8001c94 <HAL_GPIO_Init+0x300>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <HAL_GPIO_Init+0x300>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c24:	4a1b      	ldr	r2, [pc, #108]	@ (8001c94 <HAL_GPIO_Init+0x300>)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <HAL_GPIO_Init+0x300>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c4e:	4a11      	ldr	r2, [pc, #68]	@ (8001c94 <HAL_GPIO_Init+0x300>)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f47f ae9d 	bne.w	80019a4 <HAL_GPIO_Init+0x10>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	bf00      	nop
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	48000400 	.word	0x48000400
 8001c84:	48000800 	.word	0x48000800
 8001c88:	48000c00 	.word	0x48000c00
 8001c8c:	48001000 	.word	0x48001000
 8001c90:	48001400 	.word	0x48001400
 8001c94:	40010400 	.word	0x40010400

08001c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	e001      	b.n	8001cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0c0      	b.n	8001e8c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff f9fc 	bl	800111c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2203      	movs	r2, #3
 8001d28:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 ff33 	bl	8004b9c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e03e      	b.n	8001dba <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	3311      	adds	r3, #17
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3310      	adds	r3, #16
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	3313      	adds	r3, #19
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	3320      	adds	r3, #32
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	3324      	adds	r3, #36	@ 0x24
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	440b      	add	r3, r1
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	3301      	adds	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	791b      	ldrb	r3, [r3, #4]
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d3bb      	bcc.n	8001d3c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e044      	b.n	8001e54 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	3301      	adds	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	791b      	ldrb	r3, [r3, #4]
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d3b5      	bcc.n	8001dca <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e6a:	f002 feb2 	bl	8004bd2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7a9b      	ldrb	r3, [r3, #10]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d102      	bne.n	8001e8a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f805 	bl	8001e94 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d141      	bne.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ef6:	4b4b      	ldr	r3, [pc, #300]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f02:	d131      	bne.n	8001f68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f04:	4b47      	ldr	r3, [pc, #284]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f0a:	4a46      	ldr	r2, [pc, #280]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f14:	4b43      	ldr	r3, [pc, #268]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f1c:	4a41      	ldr	r2, [pc, #260]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f24:	4b40      	ldr	r3, [pc, #256]	@ (8002028 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2232      	movs	r2, #50	@ 0x32
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f30:	fba2 2303 	umull	r2, r3, r2, r3
 8001f34:	0c9b      	lsrs	r3, r3, #18
 8001f36:	3301      	adds	r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f3a:	e002      	b.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f42:	4b38      	ldr	r3, [pc, #224]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f4e:	d102      	bne.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f2      	bne.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f56:	4b33      	ldr	r3, [pc, #204]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f62:	d158      	bne.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e057      	b.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f68:	4b2e      	ldr	r3, [pc, #184]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f78:	e04d      	b.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f80:	d141      	bne.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f82:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f8e:	d131      	bne.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f90:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f96:	4a23      	ldr	r2, [pc, #140]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa0:	4b20      	ldr	r3, [pc, #128]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002028 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2232      	movs	r2, #50	@ 0x32
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	4a1c      	ldr	r2, [pc, #112]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	0c9b      	lsrs	r3, r3, #18
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc6:	e002      	b.n	8001fce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fda:	d102      	bne.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f2      	bne.n	8001fc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe2:	4b10      	ldr	r3, [pc, #64]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fee:	d112      	bne.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e011      	b.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002000:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002004:	e007      	b.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002006:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800200e:	4a05      	ldr	r2, [pc, #20]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002010:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002014:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40007000 	.word	0x40007000
 8002028:	20000000 	.word	0x20000000
 800202c:	431bde83 	.word	0x431bde83

08002030 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a04      	ldr	r2, [pc, #16]	@ (800204c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800203a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800203e:	6093      	str	r3, [r2, #8]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40007000 	.word	0x40007000

08002050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e2fe      	b.n	8002660 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d075      	beq.n	800215a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206e:	4b97      	ldr	r3, [pc, #604]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002078:	4b94      	ldr	r3, [pc, #592]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b0c      	cmp	r3, #12
 8002086:	d102      	bne.n	800208e <HAL_RCC_OscConfig+0x3e>
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d002      	beq.n	8002094 <HAL_RCC_OscConfig+0x44>
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d10b      	bne.n	80020ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	4b8d      	ldr	r3, [pc, #564]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d05b      	beq.n	8002158 <HAL_RCC_OscConfig+0x108>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d157      	bne.n	8002158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e2d9      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x74>
 80020b6:	4b85      	ldr	r3, [pc, #532]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a84      	ldr	r2, [pc, #528]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e01d      	b.n	8002100 <HAL_RCC_OscConfig+0xb0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x98>
 80020ce:	4b7f      	ldr	r3, [pc, #508]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a7e      	ldr	r2, [pc, #504]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b7c      	ldr	r3, [pc, #496]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7b      	ldr	r2, [pc, #492]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0xb0>
 80020e8:	4b78      	ldr	r3, [pc, #480]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a77      	ldr	r2, [pc, #476]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b75      	ldr	r3, [pc, #468]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a74      	ldr	r2, [pc, #464]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7ff f976 	bl	80013f8 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff f972 	bl	80013f8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	@ 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e29e      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002122:	4b6a      	ldr	r3, [pc, #424]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0xc0>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7ff f962 	bl	80013f8 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff f95e 	bl	80013f8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	@ 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e28a      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800214a:	4b60      	ldr	r3, [pc, #384]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0xe8>
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d075      	beq.n	8002252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002166:	4b59      	ldr	r3, [pc, #356]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002170:	4b56      	ldr	r3, [pc, #344]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	2b0c      	cmp	r3, #12
 800217e:	d102      	bne.n	8002186 <HAL_RCC_OscConfig+0x136>
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d002      	beq.n	800218c <HAL_RCC_OscConfig+0x13c>
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d11f      	bne.n	80021cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800218c:	4b4f      	ldr	r3, [pc, #316]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_OscConfig+0x154>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e25d      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a4:	4b49      	ldr	r3, [pc, #292]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	061b      	lsls	r3, r3, #24
 80021b2:	4946      	ldr	r1, [pc, #280]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021b8:	4b45      	ldr	r3, [pc, #276]	@ (80022d0 <HAL_RCC_OscConfig+0x280>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff f8cf 	bl	8001360 <HAL_InitTick>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d043      	beq.n	8002250 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e249      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d023      	beq.n	800221c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d4:	4b3d      	ldr	r3, [pc, #244]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a3c      	ldr	r2, [pc, #240]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff f90a 	bl	80013f8 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e8:	f7ff f906 	bl	80013f8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e232      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021fa:	4b34      	ldr	r3, [pc, #208]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4b31      	ldr	r3, [pc, #196]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	061b      	lsls	r3, r3, #24
 8002214:	492d      	ldr	r1, [pc, #180]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
 800221a:	e01a      	b.n	8002252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221c:	4b2b      	ldr	r3, [pc, #172]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2a      	ldr	r2, [pc, #168]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002222:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff f8e6 	bl	80013f8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7ff f8e2 	bl	80013f8 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e20e      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002242:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x1e0>
 800224e:	e000      	b.n	8002252 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002250:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d041      	beq.n	80022e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d01c      	beq.n	80022a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002266:	4b19      	ldr	r3, [pc, #100]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800226c:	4a17      	ldr	r2, [pc, #92]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002276:	f7ff f8bf 	bl	80013f8 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227e:	f7ff f8bb 	bl	80013f8 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1e7      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002290:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ef      	beq.n	800227e <HAL_RCC_OscConfig+0x22e>
 800229e:	e020      	b.n	80022e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a0:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a6:	4a09      	ldr	r2, [pc, #36]	@ (80022cc <HAL_RCC_OscConfig+0x27c>)
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7ff f8a2 	bl	80013f8 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022b6:	e00d      	b.n	80022d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b8:	f7ff f89e 	bl	80013f8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d906      	bls.n	80022d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1ca      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 80022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1ea      	bne.n	80022b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80a6 	beq.w	800243c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022f4:	4b84      	ldr	r3, [pc, #528]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 80022f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_OscConfig+0x2b4>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x2b6>
 8002304:	2300      	movs	r3, #0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00d      	beq.n	8002326 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b7f      	ldr	r3, [pc, #508]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230e:	4a7e      	ldr	r2, [pc, #504]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002314:	6593      	str	r3, [r2, #88]	@ 0x58
 8002316:	4b7c      	ldr	r3, [pc, #496]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002322:	2301      	movs	r3, #1
 8002324:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002326:	4b79      	ldr	r3, [pc, #484]	@ (800250c <HAL_RCC_OscConfig+0x4bc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d118      	bne.n	8002364 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002332:	4b76      	ldr	r3, [pc, #472]	@ (800250c <HAL_RCC_OscConfig+0x4bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a75      	ldr	r2, [pc, #468]	@ (800250c <HAL_RCC_OscConfig+0x4bc>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800233c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233e:	f7ff f85b 	bl	80013f8 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002346:	f7ff f857 	bl	80013f8 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e183      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002358:	4b6c      	ldr	r3, [pc, #432]	@ (800250c <HAL_RCC_OscConfig+0x4bc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d108      	bne.n	800237e <HAL_RCC_OscConfig+0x32e>
 800236c:	4b66      	ldr	r3, [pc, #408]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002372:	4a65      	ldr	r2, [pc, #404]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800237c:	e024      	b.n	80023c8 <HAL_RCC_OscConfig+0x378>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b05      	cmp	r3, #5
 8002384:	d110      	bne.n	80023a8 <HAL_RCC_OscConfig+0x358>
 8002386:	4b60      	ldr	r3, [pc, #384]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238c:	4a5e      	ldr	r2, [pc, #376]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002396:	4b5c      	ldr	r3, [pc, #368]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239c:	4a5a      	ldr	r2, [pc, #360]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023a6:	e00f      	b.n	80023c8 <HAL_RCC_OscConfig+0x378>
 80023a8:	4b57      	ldr	r3, [pc, #348]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ae:	4a56      	ldr	r2, [pc, #344]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023b8:	4b53      	ldr	r3, [pc, #332]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023be:	4a52      	ldr	r2, [pc, #328]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d016      	beq.n	80023fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7ff f812 	bl	80013f8 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7ff f80e 	bl	80013f8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e138      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ee:	4b46      	ldr	r3, [pc, #280]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ed      	beq.n	80023d8 <HAL_RCC_OscConfig+0x388>
 80023fc:	e015      	b.n	800242a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7fe fffb 	bl	80013f8 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7fe fff7 	bl	80013f8 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e121      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800241c:	4b3a      	ldr	r3, [pc, #232]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1ed      	bne.n	8002406 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800242a:	7ffb      	ldrb	r3, [r7, #31]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d105      	bne.n	800243c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002430:	4b35      	ldr	r3, [pc, #212]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	4a34      	ldr	r2, [pc, #208]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 8002436:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800243a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	d03c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01c      	beq.n	800248a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002450:	4b2d      	ldr	r3, [pc, #180]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 8002452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002456:	4a2c      	ldr	r2, [pc, #176]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7fe ffca 	bl	80013f8 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002468:	f7fe ffc6 	bl	80013f8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0f2      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800247a:	4b23      	ldr	r3, [pc, #140]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 800247c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ef      	beq.n	8002468 <HAL_RCC_OscConfig+0x418>
 8002488:	e01b      	b.n	80024c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800248a:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 800248c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002490:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249a:	f7fe ffad 	bl	80013f8 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a2:	f7fe ffa9 	bl	80013f8 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0d5      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 80024b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1ef      	bne.n	80024a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80c9 	beq.w	800265e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b0c      	cmp	r3, #12
 80024d6:	f000 8083 	beq.w	80025e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d15e      	bne.n	80025a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a08      	ldr	r2, [pc, #32]	@ (8002508 <HAL_RCC_OscConfig+0x4b8>)
 80024e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe ff83 	bl	80013f8 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f4:	e00c      	b.n	8002510 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fe ff7f 	bl	80013f8 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d905      	bls.n	8002510 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e0ab      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
 8002508:	40021000 	.word	0x40021000
 800250c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002510:	4b55      	ldr	r3, [pc, #340]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ec      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800251c:	4b52      	ldr	r3, [pc, #328]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	4b52      	ldr	r3, [pc, #328]	@ (800266c <HAL_RCC_OscConfig+0x61c>)
 8002522:	4013      	ands	r3, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6a11      	ldr	r1, [r2, #32]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800252c:	3a01      	subs	r2, #1
 800252e:	0112      	lsls	r2, r2, #4
 8002530:	4311      	orrs	r1, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002536:	0212      	lsls	r2, r2, #8
 8002538:	4311      	orrs	r1, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800253e:	0852      	lsrs	r2, r2, #1
 8002540:	3a01      	subs	r2, #1
 8002542:	0552      	lsls	r2, r2, #21
 8002544:	4311      	orrs	r1, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800254a:	0852      	lsrs	r2, r2, #1
 800254c:	3a01      	subs	r2, #1
 800254e:	0652      	lsls	r2, r2, #25
 8002550:	4311      	orrs	r1, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002556:	06d2      	lsls	r2, r2, #27
 8002558:	430a      	orrs	r2, r1
 800255a:	4943      	ldr	r1, [pc, #268]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 800255c:	4313      	orrs	r3, r2
 800255e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002560:	4b41      	ldr	r3, [pc, #260]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a40      	ldr	r2, [pc, #256]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 8002566:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800256a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800256c:	4b3e      	ldr	r3, [pc, #248]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a3d      	ldr	r2, [pc, #244]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 8002572:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002576:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe ff3e 	bl	80013f8 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe ff3a 	bl	80013f8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e066      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002592:	4b35      	ldr	r3, [pc, #212]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x530>
 800259e:	e05e      	b.n	800265e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b31      	ldr	r3, [pc, #196]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a30      	ldr	r2, [pc, #192]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 80025a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe ff24 	bl	80013f8 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe ff20 	bl	80013f8 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e04c      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c6:	4b28      	ldr	r3, [pc, #160]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025d2:	4b25      	ldr	r3, [pc, #148]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	4924      	ldr	r1, [pc, #144]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 80025d8:	4b25      	ldr	r3, [pc, #148]	@ (8002670 <HAL_RCC_OscConfig+0x620>)
 80025da:	4013      	ands	r3, r2
 80025dc:	60cb      	str	r3, [r1, #12]
 80025de:	e03e      	b.n	800265e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e039      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002668 <HAL_RCC_OscConfig+0x618>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d12c      	bne.n	800265a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	3b01      	subs	r3, #1
 800260c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d123      	bne.n	800265a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d11b      	bne.n	800265a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d113      	bne.n	800265a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263c:	085b      	lsrs	r3, r3, #1
 800263e:	3b01      	subs	r3, #1
 8002640:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d109      	bne.n	800265a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	3b01      	subs	r3, #1
 8002654:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002656:	429a      	cmp	r2, r3
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	019f800c 	.word	0x019f800c
 8002670:	feeefffc 	.word	0xfeeefffc

08002674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e11e      	b.n	80028ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800268c:	4b91      	ldr	r3, [pc, #580]	@ (80028d4 <HAL_RCC_ClockConfig+0x260>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d910      	bls.n	80026bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b8e      	ldr	r3, [pc, #568]	@ (80028d4 <HAL_RCC_ClockConfig+0x260>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 020f 	bic.w	r2, r3, #15
 80026a2:	498c      	ldr	r1, [pc, #560]	@ (80028d4 <HAL_RCC_ClockConfig+0x260>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b8a      	ldr	r3, [pc, #552]	@ (80028d4 <HAL_RCC_ClockConfig+0x260>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e106      	b.n	80028ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d073      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d129      	bne.n	8002724 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d0:	4b81      	ldr	r3, [pc, #516]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0f4      	b.n	80028ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026e0:	f000 f99e 	bl	8002a20 <RCC_GetSysClockFreqFromPLLSource>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4a7c      	ldr	r2, [pc, #496]	@ (80028dc <HAL_RCC_ClockConfig+0x268>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d93f      	bls.n	800276e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026ee:	4b7a      	ldr	r3, [pc, #488]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002702:	2b00      	cmp	r3, #0
 8002704:	d033      	beq.n	800276e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800270a:	2b00      	cmp	r3, #0
 800270c:	d12f      	bne.n	800276e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800270e:	4b72      	ldr	r3, [pc, #456]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002716:	4a70      	ldr	r2, [pc, #448]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 8002718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800271c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800271e:	2380      	movs	r3, #128	@ 0x80
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e024      	b.n	800276e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d107      	bne.n	800273c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800272c:	4b6a      	ldr	r3, [pc, #424]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0c6      	b.n	80028ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800273c:	4b66      	ldr	r3, [pc, #408]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0be      	b.n	80028ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800274c:	f000 f8ce 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 8002750:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4a61      	ldr	r2, [pc, #388]	@ (80028dc <HAL_RCC_ClockConfig+0x268>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d909      	bls.n	800276e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800275a:	4b5f      	ldr	r3, [pc, #380]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002762:	4a5d      	ldr	r2, [pc, #372]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 8002764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002768:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800276a:	2380      	movs	r3, #128	@ 0x80
 800276c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b5a      	ldr	r3, [pc, #360]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4957      	ldr	r1, [pc, #348]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 800277c:	4313      	orrs	r3, r2
 800277e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002780:	f7fe fe3a 	bl	80013f8 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7fe fe36 	bl	80013f8 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e095      	b.n	80028ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b4e      	ldr	r3, [pc, #312]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d023      	beq.n	8002804 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c8:	4b43      	ldr	r3, [pc, #268]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4a42      	ldr	r2, [pc, #264]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 80027ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027e0:	4b3d      	ldr	r3, [pc, #244]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80027e8:	4a3b      	ldr	r2, [pc, #236]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 80027ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b39      	ldr	r3, [pc, #228]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4936      	ldr	r1, [pc, #216]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
 8002802:	e008      	b.n	8002816 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b80      	cmp	r3, #128	@ 0x80
 8002808:	d105      	bne.n	8002816 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800280a:	4b33      	ldr	r3, [pc, #204]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	4a32      	ldr	r2, [pc, #200]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 8002810:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002814:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002816:	4b2f      	ldr	r3, [pc, #188]	@ (80028d4 <HAL_RCC_ClockConfig+0x260>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d21d      	bcs.n	8002860 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002824:	4b2b      	ldr	r3, [pc, #172]	@ (80028d4 <HAL_RCC_ClockConfig+0x260>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 020f 	bic.w	r2, r3, #15
 800282c:	4929      	ldr	r1, [pc, #164]	@ (80028d4 <HAL_RCC_ClockConfig+0x260>)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002834:	f7fe fde0 	bl	80013f8 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7fe fddc 	bl	80013f8 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e03b      	b.n	80028ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <HAL_RCC_ClockConfig+0x260>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d1ed      	bne.n	800283c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286c:	4b1a      	ldr	r3, [pc, #104]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4917      	ldr	r1, [pc, #92]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800288a:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	490f      	ldr	r1, [pc, #60]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800289e:	f000 f825 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b0c      	ldr	r3, [pc, #48]	@ (80028d8 <HAL_RCC_ClockConfig+0x264>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	490c      	ldr	r1, [pc, #48]	@ (80028e0 <HAL_RCC_ClockConfig+0x26c>)
 80028b0:	5ccb      	ldrb	r3, [r1, r3]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	4a0a      	ldr	r2, [pc, #40]	@ (80028e4 <HAL_RCC_ClockConfig+0x270>)
 80028bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028be:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <HAL_RCC_ClockConfig+0x274>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fd4c 	bl	8001360 <HAL_InitTick>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40022000 	.word	0x40022000
 80028d8:	40021000 	.word	0x40021000
 80028dc:	04c4b400 	.word	0x04c4b400
 80028e0:	08005abc 	.word	0x08005abc
 80028e4:	20000000 	.word	0x20000000
 80028e8:	20000004 	.word	0x20000004

080028ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028f2:	4b2c      	ldr	r3, [pc, #176]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d102      	bne.n	8002904 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028fe:	4b2a      	ldr	r3, [pc, #168]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	e047      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002904:	4b27      	ldr	r3, [pc, #156]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d102      	bne.n	8002916 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002910:	4b26      	ldr	r3, [pc, #152]	@ (80029ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	e03e      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002916:	4b23      	ldr	r3, [pc, #140]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d136      	bne.n	8002990 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002922:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800292c:	4b1d      	ldr	r3, [pc, #116]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3301      	adds	r3, #1
 8002938:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d10c      	bne.n	800295a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002940:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	4a16      	ldr	r2, [pc, #88]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800294a:	68d2      	ldr	r2, [r2, #12]
 800294c:	0a12      	lsrs	r2, r2, #8
 800294e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	617b      	str	r3, [r7, #20]
      break;
 8002958:	e00c      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800295a:	4a13      	ldr	r2, [pc, #76]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002962:	4a10      	ldr	r2, [pc, #64]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002964:	68d2      	ldr	r2, [r2, #12]
 8002966:	0a12      	lsrs	r2, r2, #8
 8002968:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
      break;
 8002972:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	0e5b      	lsrs	r3, r3, #25
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	3301      	adds	r3, #1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	e001      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002994:	693b      	ldr	r3, [r7, #16]
}
 8002996:	4618      	mov	r0, r3
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	007a1200 	.word	0x007a1200

080029b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000000 	.word	0x20000000

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029cc:	f7ff fff0 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4904      	ldr	r1, [pc, #16]	@ (80029f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000
 80029f0:	08005acc 	.word	0x08005acc

080029f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029f8:	f7ff ffda 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0adb      	lsrs	r3, r3, #11
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4904      	ldr	r1, [pc, #16]	@ (8002a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	08005acc 	.word	0x08005acc

08002a20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a26:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a30:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d10c      	bne.n	8002a5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a44:	4a17      	ldr	r2, [pc, #92]	@ (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	4a14      	ldr	r2, [pc, #80]	@ (8002aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a4e:	68d2      	ldr	r2, [r2, #12]
 8002a50:	0a12      	lsrs	r2, r2, #8
 8002a52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	617b      	str	r3, [r7, #20]
    break;
 8002a5c:	e00c      	b.n	8002a78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a5e:	4a12      	ldr	r2, [pc, #72]	@ (8002aa8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a68:	68d2      	ldr	r2, [r2, #12]
 8002a6a:	0a12      	lsrs	r2, r2, #8
 8002a6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
    break;
 8002a76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a78:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0e5b      	lsrs	r3, r3, #25
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a92:	687b      	ldr	r3, [r7, #4]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	007a1200 	.word	0x007a1200
 8002aa8:	00f42400 	.word	0x00f42400

08002aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ab8:	2300      	movs	r3, #0
 8002aba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8098 	beq.w	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ace:	4b43      	ldr	r3, [pc, #268]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	4b40      	ldr	r3, [pc, #256]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ade:	4a3f      	ldr	r2, [pc, #252]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af2:	2301      	movs	r3, #1
 8002af4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af6:	4b3a      	ldr	r3, [pc, #232]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a39      	ldr	r2, [pc, #228]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b02:	f7fe fc79 	bl	80013f8 <HAL_GetTick>
 8002b06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b08:	e009      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0a:	f7fe fc75 	bl	80013f8 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d902      	bls.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	74fb      	strb	r3, [r7, #19]
        break;
 8002b1c:	e005      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b1e:	4b30      	ldr	r3, [pc, #192]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0ef      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d159      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b30:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01e      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d019      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b4c:	4b23      	ldr	r3, [pc, #140]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b58:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b68:	4b1c      	ldr	r3, [pc, #112]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b78:	4a18      	ldr	r2, [pc, #96]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d016      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fc35 	bl	80013f8 <HAL_GetTick>
 8002b8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b90:	e00b      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b92:	f7fe fc31 	bl	80013f8 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d902      	bls.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ba8:	e006      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002baa:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ec      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bbe:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bcc:	4903      	ldr	r1, [pc, #12]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002bd4:	e008      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	74bb      	strb	r3, [r7, #18]
 8002bda:	e005      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002be8:	7c7b      	ldrb	r3, [r7, #17]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d105      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bee:	4ba7      	ldr	r3, [pc, #668]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf2:	4aa6      	ldr	r2, [pc, #664]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c06:	4ba1      	ldr	r3, [pc, #644]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0c:	f023 0203 	bic.w	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	499d      	ldr	r1, [pc, #628]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c28:	4b98      	ldr	r3, [pc, #608]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	f023 020c 	bic.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4995      	ldr	r1, [pc, #596]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c4a:	4b90      	ldr	r3, [pc, #576]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	498c      	ldr	r1, [pc, #560]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c6c:	4b87      	ldr	r3, [pc, #540]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	4984      	ldr	r1, [pc, #528]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	497b      	ldr	r1, [pc, #492]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cb0:	4b76      	ldr	r3, [pc, #472]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	4973      	ldr	r1, [pc, #460]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	496a      	ldr	r1, [pc, #424]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cf4:	4b65      	ldr	r3, [pc, #404]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4962      	ldr	r1, [pc, #392]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d16:	4b5d      	ldr	r3, [pc, #372]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	4959      	ldr	r1, [pc, #356]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d38:	4b54      	ldr	r3, [pc, #336]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d46:	4951      	ldr	r1, [pc, #324]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d015      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d60:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	4948      	ldr	r1, [pc, #288]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d78:	d105      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d7a:	4b44      	ldr	r3, [pc, #272]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4a43      	ldr	r2, [pc, #268]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d84:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d015      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d92:	4b3e      	ldr	r3, [pc, #248]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	493a      	ldr	r1, [pc, #232]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db0:	d105      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db2:	4b36      	ldr	r3, [pc, #216]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4a35      	ldr	r2, [pc, #212]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dbc:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d015      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dca:	4b30      	ldr	r3, [pc, #192]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd8:	492c      	ldr	r1, [pc, #176]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002de8:	d105      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dea:	4b28      	ldr	r3, [pc, #160]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	4a27      	ldr	r2, [pc, #156]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002df4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d015      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e02:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e08:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e10:	491e      	ldr	r1, [pc, #120]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e20:	d105      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e22:	4b1a      	ldr	r3, [pc, #104]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	4a19      	ldr	r2, [pc, #100]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e2c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d015      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e3a:	4b14      	ldr	r3, [pc, #80]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e40:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e48:	4910      	ldr	r1, [pc, #64]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e58:	d105      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e64:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d018      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e72:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e78:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	4902      	ldr	r1, [pc, #8]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	e001      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e98:	4b21      	ldr	r3, [pc, #132]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a20      	ldr	r2, [pc, #128]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d015      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebe:	4918      	ldr	r1, [pc, #96]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ece:	d105      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ed0:	4b13      	ldr	r3, [pc, #76]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a12      	ldr	r2, [pc, #72]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eda:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d015      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef6:	490a      	ldr	r1, [pc, #40]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f06:	d105      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f14:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e09d      	b.n	8003072 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f46:	d009      	beq.n	8002f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
 8002f4e:	e005      	b.n	8002f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd ff6a 	bl	8000e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f9c:	d902      	bls.n	8002fa4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	e002      	b.n	8002faa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002fb2:	d007      	beq.n	8002fc4 <HAL_SPI_Init+0xa0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fbc:	d002      	beq.n	8002fc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003006:	ea42 0103 	orr.w	r1, r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	0c1b      	lsrs	r3, r3, #16
 8003020:	f003 0204 	and.w	r2, r3, #4
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003040:	ea42 0103 	orr.w	r1, r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003060:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e049      	b.n	8003120 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7fd ff17 	bl	8000ed4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3304      	adds	r3, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f000 f949 	bl	8003350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003142:	2302      	movs	r3, #2
 8003144:	e0ff      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b14      	cmp	r3, #20
 8003152:	f200 80f0 	bhi.w	8003336 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003156:	a201      	add	r2, pc, #4	@ (adr r2, 800315c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	080031b1 	.word	0x080031b1
 8003160:	08003337 	.word	0x08003337
 8003164:	08003337 	.word	0x08003337
 8003168:	08003337 	.word	0x08003337
 800316c:	080031f1 	.word	0x080031f1
 8003170:	08003337 	.word	0x08003337
 8003174:	08003337 	.word	0x08003337
 8003178:	08003337 	.word	0x08003337
 800317c:	08003233 	.word	0x08003233
 8003180:	08003337 	.word	0x08003337
 8003184:	08003337 	.word	0x08003337
 8003188:	08003337 	.word	0x08003337
 800318c:	08003273 	.word	0x08003273
 8003190:	08003337 	.word	0x08003337
 8003194:	08003337 	.word	0x08003337
 8003198:	08003337 	.word	0x08003337
 800319c:	080032b5 	.word	0x080032b5
 80031a0:	08003337 	.word	0x08003337
 80031a4:	08003337 	.word	0x08003337
 80031a8:	08003337 	.word	0x08003337
 80031ac:	080032f5 	.word	0x080032f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f974 	bl	80034a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0208 	orr.w	r2, r2, #8
 80031ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0204 	bic.w	r2, r2, #4
 80031da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6999      	ldr	r1, [r3, #24]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	619a      	str	r2, [r3, #24]
      break;
 80031ee:	e0a5      	b.n	800333c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f9ee 	bl	80035d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800320a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800321a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6999      	ldr	r1, [r3, #24]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	021a      	lsls	r2, r3, #8
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	619a      	str	r2, [r3, #24]
      break;
 8003230:	e084      	b.n	800333c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fa61 	bl	8003700 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0208 	orr.w	r2, r2, #8
 800324c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0204 	bic.w	r2, r2, #4
 800325c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69d9      	ldr	r1, [r3, #28]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	61da      	str	r2, [r3, #28]
      break;
 8003270:	e064      	b.n	800333c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fad3 	bl	8003824 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800328c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800329c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69d9      	ldr	r1, [r3, #28]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	021a      	lsls	r2, r3, #8
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	61da      	str	r2, [r3, #28]
      break;
 80032b2:	e043      	b.n	800333c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fb46 	bl	800394c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0208 	orr.w	r2, r2, #8
 80032ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0204 	bic.w	r2, r2, #4
 80032de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80032f2:	e023      	b.n	800333c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fb90 	bl	8003a20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800330e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800331e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003334:	e002      	b.n	800333c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
      break;
 800333a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop

08003350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a48      	ldr	r2, [pc, #288]	@ (8003484 <TIM_Base_SetConfig+0x134>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d013      	beq.n	8003390 <TIM_Base_SetConfig+0x40>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800336e:	d00f      	beq.n	8003390 <TIM_Base_SetConfig+0x40>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a45      	ldr	r2, [pc, #276]	@ (8003488 <TIM_Base_SetConfig+0x138>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00b      	beq.n	8003390 <TIM_Base_SetConfig+0x40>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a44      	ldr	r2, [pc, #272]	@ (800348c <TIM_Base_SetConfig+0x13c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d007      	beq.n	8003390 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a43      	ldr	r2, [pc, #268]	@ (8003490 <TIM_Base_SetConfig+0x140>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d003      	beq.n	8003390 <TIM_Base_SetConfig+0x40>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a42      	ldr	r2, [pc, #264]	@ (8003494 <TIM_Base_SetConfig+0x144>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d108      	bne.n	80033a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a37      	ldr	r2, [pc, #220]	@ (8003484 <TIM_Base_SetConfig+0x134>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01f      	beq.n	80033ea <TIM_Base_SetConfig+0x9a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b0:	d01b      	beq.n	80033ea <TIM_Base_SetConfig+0x9a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a34      	ldr	r2, [pc, #208]	@ (8003488 <TIM_Base_SetConfig+0x138>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d017      	beq.n	80033ea <TIM_Base_SetConfig+0x9a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a33      	ldr	r2, [pc, #204]	@ (800348c <TIM_Base_SetConfig+0x13c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d013      	beq.n	80033ea <TIM_Base_SetConfig+0x9a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a32      	ldr	r2, [pc, #200]	@ (8003490 <TIM_Base_SetConfig+0x140>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00f      	beq.n	80033ea <TIM_Base_SetConfig+0x9a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a32      	ldr	r2, [pc, #200]	@ (8003498 <TIM_Base_SetConfig+0x148>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00b      	beq.n	80033ea <TIM_Base_SetConfig+0x9a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a31      	ldr	r2, [pc, #196]	@ (800349c <TIM_Base_SetConfig+0x14c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <TIM_Base_SetConfig+0x9a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a30      	ldr	r2, [pc, #192]	@ (80034a0 <TIM_Base_SetConfig+0x150>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d003      	beq.n	80033ea <TIM_Base_SetConfig+0x9a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003494 <TIM_Base_SetConfig+0x144>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d108      	bne.n	80033fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a18      	ldr	r2, [pc, #96]	@ (8003484 <TIM_Base_SetConfig+0x134>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <TIM_Base_SetConfig+0x100>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a19      	ldr	r2, [pc, #100]	@ (8003490 <TIM_Base_SetConfig+0x140>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00f      	beq.n	8003450 <TIM_Base_SetConfig+0x100>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a19      	ldr	r2, [pc, #100]	@ (8003498 <TIM_Base_SetConfig+0x148>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00b      	beq.n	8003450 <TIM_Base_SetConfig+0x100>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a18      	ldr	r2, [pc, #96]	@ (800349c <TIM_Base_SetConfig+0x14c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <TIM_Base_SetConfig+0x100>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a17      	ldr	r2, [pc, #92]	@ (80034a0 <TIM_Base_SetConfig+0x150>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_Base_SetConfig+0x100>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a12      	ldr	r2, [pc, #72]	@ (8003494 <TIM_Base_SetConfig+0x144>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d103      	bne.n	8003458 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	d105      	bne.n	8003476 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f023 0201 	bic.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	611a      	str	r2, [r3, #16]
  }
}
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40000400 	.word	0x40000400
 800348c:	40000800 	.word	0x40000800
 8003490:	40013400 	.word	0x40013400
 8003494:	40015000 	.word	0x40015000
 8003498:	40014000 	.word	0x40014000
 800349c:	40014400 	.word	0x40014400
 80034a0:	40014800 	.word	0x40014800

080034a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f023 0201 	bic.w	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f023 0302 	bic.w	r3, r3, #2
 80034f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a30      	ldr	r2, [pc, #192]	@ (80035c0 <TIM_OC1_SetConfig+0x11c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d013      	beq.n	800352c <TIM_OC1_SetConfig+0x88>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a2f      	ldr	r2, [pc, #188]	@ (80035c4 <TIM_OC1_SetConfig+0x120>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00f      	beq.n	800352c <TIM_OC1_SetConfig+0x88>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a2e      	ldr	r2, [pc, #184]	@ (80035c8 <TIM_OC1_SetConfig+0x124>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00b      	beq.n	800352c <TIM_OC1_SetConfig+0x88>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a2d      	ldr	r2, [pc, #180]	@ (80035cc <TIM_OC1_SetConfig+0x128>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <TIM_OC1_SetConfig+0x88>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a2c      	ldr	r2, [pc, #176]	@ (80035d0 <TIM_OC1_SetConfig+0x12c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_OC1_SetConfig+0x88>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a2b      	ldr	r2, [pc, #172]	@ (80035d4 <TIM_OC1_SetConfig+0x130>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d10c      	bne.n	8003546 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f023 0308 	bic.w	r3, r3, #8
 8003532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 0304 	bic.w	r3, r3, #4
 8003544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1d      	ldr	r2, [pc, #116]	@ (80035c0 <TIM_OC1_SetConfig+0x11c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <TIM_OC1_SetConfig+0xd2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a1c      	ldr	r2, [pc, #112]	@ (80035c4 <TIM_OC1_SetConfig+0x120>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00f      	beq.n	8003576 <TIM_OC1_SetConfig+0xd2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a1b      	ldr	r2, [pc, #108]	@ (80035c8 <TIM_OC1_SetConfig+0x124>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00b      	beq.n	8003576 <TIM_OC1_SetConfig+0xd2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a1a      	ldr	r2, [pc, #104]	@ (80035cc <TIM_OC1_SetConfig+0x128>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <TIM_OC1_SetConfig+0xd2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a19      	ldr	r2, [pc, #100]	@ (80035d0 <TIM_OC1_SetConfig+0x12c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d003      	beq.n	8003576 <TIM_OC1_SetConfig+0xd2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a18      	ldr	r2, [pc, #96]	@ (80035d4 <TIM_OC1_SetConfig+0x130>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d111      	bne.n	800359a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800357c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	621a      	str	r2, [r3, #32]
}
 80035b4:	bf00      	nop
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40013400 	.word	0x40013400
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40014400 	.word	0x40014400
 80035d0:	40014800 	.word	0x40014800
 80035d4:	40015000 	.word	0x40015000

080035d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	f023 0210 	bic.w	r2, r3, #16
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800360a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 0320 	bic.w	r3, r3, #32
 8003626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a2c      	ldr	r2, [pc, #176]	@ (80036e8 <TIM_OC2_SetConfig+0x110>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <TIM_OC2_SetConfig+0x74>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a2b      	ldr	r2, [pc, #172]	@ (80036ec <TIM_OC2_SetConfig+0x114>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_OC2_SetConfig+0x74>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a2a      	ldr	r2, [pc, #168]	@ (80036f0 <TIM_OC2_SetConfig+0x118>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d10d      	bne.n	8003668 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003666:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a1f      	ldr	r2, [pc, #124]	@ (80036e8 <TIM_OC2_SetConfig+0x110>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <TIM_OC2_SetConfig+0xc0>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a1e      	ldr	r2, [pc, #120]	@ (80036ec <TIM_OC2_SetConfig+0x114>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00f      	beq.n	8003698 <TIM_OC2_SetConfig+0xc0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a1e      	ldr	r2, [pc, #120]	@ (80036f4 <TIM_OC2_SetConfig+0x11c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00b      	beq.n	8003698 <TIM_OC2_SetConfig+0xc0>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a1d      	ldr	r2, [pc, #116]	@ (80036f8 <TIM_OC2_SetConfig+0x120>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d007      	beq.n	8003698 <TIM_OC2_SetConfig+0xc0>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a1c      	ldr	r2, [pc, #112]	@ (80036fc <TIM_OC2_SetConfig+0x124>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <TIM_OC2_SetConfig+0xc0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a17      	ldr	r2, [pc, #92]	@ (80036f0 <TIM_OC2_SetConfig+0x118>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d113      	bne.n	80036c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800369e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40013400 	.word	0x40013400
 80036f0:	40015000 	.word	0x40015000
 80036f4:	40014000 	.word	0x40014000
 80036f8:	40014400 	.word	0x40014400
 80036fc:	40014800 	.word	0x40014800

08003700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800372e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800374c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2b      	ldr	r2, [pc, #172]	@ (800380c <TIM_OC3_SetConfig+0x10c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d007      	beq.n	8003772 <TIM_OC3_SetConfig+0x72>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2a      	ldr	r2, [pc, #168]	@ (8003810 <TIM_OC3_SetConfig+0x110>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d003      	beq.n	8003772 <TIM_OC3_SetConfig+0x72>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a29      	ldr	r2, [pc, #164]	@ (8003814 <TIM_OC3_SetConfig+0x114>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d10d      	bne.n	800378e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800378c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a1e      	ldr	r2, [pc, #120]	@ (800380c <TIM_OC3_SetConfig+0x10c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <TIM_OC3_SetConfig+0xbe>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1d      	ldr	r2, [pc, #116]	@ (8003810 <TIM_OC3_SetConfig+0x110>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00f      	beq.n	80037be <TIM_OC3_SetConfig+0xbe>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003818 <TIM_OC3_SetConfig+0x118>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00b      	beq.n	80037be <TIM_OC3_SetConfig+0xbe>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	@ (800381c <TIM_OC3_SetConfig+0x11c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <TIM_OC3_SetConfig+0xbe>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003820 <TIM_OC3_SetConfig+0x120>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_OC3_SetConfig+0xbe>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a16      	ldr	r2, [pc, #88]	@ (8003814 <TIM_OC3_SetConfig+0x114>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d113      	bne.n	80037e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	621a      	str	r2, [r3, #32]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40013400 	.word	0x40013400
 8003814:	40015000 	.word	0x40015000
 8003818:	40014000 	.word	0x40014000
 800381c:	40014400 	.word	0x40014400
 8003820:	40014800 	.word	0x40014800

08003824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800385e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	031b      	lsls	r3, r3, #12
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a2c      	ldr	r2, [pc, #176]	@ (8003934 <TIM_OC4_SetConfig+0x110>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d007      	beq.n	8003898 <TIM_OC4_SetConfig+0x74>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a2b      	ldr	r2, [pc, #172]	@ (8003938 <TIM_OC4_SetConfig+0x114>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d003      	beq.n	8003898 <TIM_OC4_SetConfig+0x74>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a2a      	ldr	r2, [pc, #168]	@ (800393c <TIM_OC4_SetConfig+0x118>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d10d      	bne.n	80038b4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800389e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	031b      	lsls	r3, r3, #12
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003934 <TIM_OC4_SetConfig+0x110>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <TIM_OC4_SetConfig+0xc0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a1e      	ldr	r2, [pc, #120]	@ (8003938 <TIM_OC4_SetConfig+0x114>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00f      	beq.n	80038e4 <TIM_OC4_SetConfig+0xc0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003940 <TIM_OC4_SetConfig+0x11c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_OC4_SetConfig+0xc0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003944 <TIM_OC4_SetConfig+0x120>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_OC4_SetConfig+0xc0>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003948 <TIM_OC4_SetConfig+0x124>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_OC4_SetConfig+0xc0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a17      	ldr	r2, [pc, #92]	@ (800393c <TIM_OC4_SetConfig+0x118>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d113      	bne.n	800390c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	019b      	lsls	r3, r3, #6
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	019b      	lsls	r3, r3, #6
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40013400 	.word	0x40013400
 800393c:	40015000 	.word	0x40015000
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800

0800394c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800397a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800397e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003990:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	041b      	lsls	r3, r3, #16
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a19      	ldr	r2, [pc, #100]	@ (8003a08 <TIM_OC5_SetConfig+0xbc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <TIM_OC5_SetConfig+0x82>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a18      	ldr	r2, [pc, #96]	@ (8003a0c <TIM_OC5_SetConfig+0xc0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00f      	beq.n	80039ce <TIM_OC5_SetConfig+0x82>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a17      	ldr	r2, [pc, #92]	@ (8003a10 <TIM_OC5_SetConfig+0xc4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00b      	beq.n	80039ce <TIM_OC5_SetConfig+0x82>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a16      	ldr	r2, [pc, #88]	@ (8003a14 <TIM_OC5_SetConfig+0xc8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <TIM_OC5_SetConfig+0x82>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a15      	ldr	r2, [pc, #84]	@ (8003a18 <TIM_OC5_SetConfig+0xcc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_OC5_SetConfig+0x82>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a14      	ldr	r2, [pc, #80]	@ (8003a1c <TIM_OC5_SetConfig+0xd0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d109      	bne.n	80039e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	621a      	str	r2, [r3, #32]
}
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40013400 	.word	0x40013400
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	40015000 	.word	0x40015000

08003a20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	051b      	lsls	r3, r3, #20
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae0 <TIM_OC6_SetConfig+0xc0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d013      	beq.n	8003aa4 <TIM_OC6_SetConfig+0x84>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a19      	ldr	r2, [pc, #100]	@ (8003ae4 <TIM_OC6_SetConfig+0xc4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00f      	beq.n	8003aa4 <TIM_OC6_SetConfig+0x84>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <TIM_OC6_SetConfig+0xc8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <TIM_OC6_SetConfig+0x84>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a17      	ldr	r2, [pc, #92]	@ (8003aec <TIM_OC6_SetConfig+0xcc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d007      	beq.n	8003aa4 <TIM_OC6_SetConfig+0x84>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a16      	ldr	r2, [pc, #88]	@ (8003af0 <TIM_OC6_SetConfig+0xd0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_OC6_SetConfig+0x84>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a15      	ldr	r2, [pc, #84]	@ (8003af4 <TIM_OC6_SetConfig+0xd4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d109      	bne.n	8003ab8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	029b      	lsls	r3, r3, #10
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	621a      	str	r2, [r3, #32]
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40013400 	.word	0x40013400
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	40014400 	.word	0x40014400
 8003af0:	40014800 	.word	0x40014800
 8003af4:	40015000 	.word	0x40015000

08003af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e06f      	b.n	8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a31      	ldr	r2, [pc, #196]	@ (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a30      	ldr	r2, [pc, #192]	@ (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2e      	ldr	r2, [pc, #184]	@ (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1e      	ldr	r2, [pc, #120]	@ (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d01d      	beq.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b90:	d018      	beq.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1c      	ldr	r2, [pc, #112]	@ (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d013      	beq.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00e      	beq.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a15      	ldr	r2, [pc, #84]	@ (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d009      	beq.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a16      	ldr	r2, [pc, #88]	@ (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d004      	beq.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a11      	ldr	r2, [pc, #68]	@ (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10c      	bne.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	40012c00 	.word	0x40012c00
 8003c00:	40013400 	.word	0x40013400
 8003c04:	40015000 	.word	0x40015000
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	40000800 	.word	0x40000800
 8003c10:	40014000 	.word	0x40014000

08003c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e042      	b.n	8003cac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fd f9d7 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2224      	movs	r2, #36	@ 0x24
 8003c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fc7a 	bl	8004558 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f97b 	bl	8003f60 <UART_SetConfig>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e01b      	b.n	8003cac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fcf9 	bl	800469c <UART_CheckIdleState>
 8003caa:	4603      	mov	r3, r0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	@ 0x28
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d17b      	bne.n	8003dc6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_UART_Transmit+0x26>
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e074      	b.n	8003dc8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2221      	movs	r2, #33	@ 0x21
 8003cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cee:	f7fd fb83 	bl	80013f8 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d0c:	d108      	bne.n	8003d20 <HAL_UART_Transmit+0x6c>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d104      	bne.n	8003d20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	e003      	b.n	8003d28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d28:	e030      	b.n	8003d8c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2180      	movs	r1, #128	@ 0x80
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fd5b 	bl	80047f0 <UART_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e03d      	b.n	8003dc8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10b      	bne.n	8003d6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	3302      	adds	r3, #2
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	e007      	b.n	8003d7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	781a      	ldrb	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	3301      	adds	r3, #1
 8003d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1c8      	bne.n	8003d2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2140      	movs	r1, #64	@ 0x40
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fd24 	bl	80047f0 <UART_WaitOnFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e006      	b.n	8003dc8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003dc6:	2302      	movs	r3, #2
  }
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	@ 0x28
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	f040 80b5 	bne.w	8003f56 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_UART_Receive+0x28>
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0ad      	b.n	8003f58 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2222      	movs	r2, #34	@ 0x22
 8003e08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e12:	f7fd faf1 	bl	80013f8 <HAL_GetTick>
 8003e16:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	88fa      	ldrh	r2, [r7, #6]
 8003e1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	88fa      	ldrh	r2, [r7, #6]
 8003e24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e30:	d10e      	bne.n	8003e50 <HAL_UART_Receive+0x80>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d105      	bne.n	8003e46 <HAL_UART_Receive+0x76>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e44:	e02d      	b.n	8003ea2 <HAL_UART_Receive+0xd2>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	22ff      	movs	r2, #255	@ 0xff
 8003e4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e4e:	e028      	b.n	8003ea2 <HAL_UART_Receive+0xd2>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10d      	bne.n	8003e74 <HAL_UART_Receive+0xa4>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <HAL_UART_Receive+0x9a>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	22ff      	movs	r2, #255	@ 0xff
 8003e64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e68:	e01b      	b.n	8003ea2 <HAL_UART_Receive+0xd2>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	227f      	movs	r2, #127	@ 0x7f
 8003e6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e72:	e016      	b.n	8003ea2 <HAL_UART_Receive+0xd2>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e7c:	d10d      	bne.n	8003e9a <HAL_UART_Receive+0xca>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <HAL_UART_Receive+0xc0>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	227f      	movs	r2, #127	@ 0x7f
 8003e8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e8e:	e008      	b.n	8003ea2 <HAL_UART_Receive+0xd2>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	223f      	movs	r2, #63	@ 0x3f
 8003e94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e98:	e003      	b.n	8003ea2 <HAL_UART_Receive+0xd2>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003ea8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb2:	d108      	bne.n	8003ec6 <HAL_UART_Receive+0xf6>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	e003      	b.n	8003ece <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ece:	e036      	b.n	8003f3e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2120      	movs	r1, #32
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fc88 	bl	80047f0 <UART_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e032      	b.n	8003f58 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10c      	bne.n	8003f12 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	8a7b      	ldrh	r3, [r7, #18]
 8003f02:	4013      	ands	r3, r2
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	e00c      	b.n	8003f2c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	8a7b      	ldrh	r3, [r7, #18]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	4013      	ands	r3, r2
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1c2      	bne.n	8003ed0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003f56:	2302      	movs	r3, #2
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f64:	b08c      	sub	sp, #48	@ 0x30
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4baa      	ldr	r3, [pc, #680]	@ (8004238 <UART_SetConfig+0x2d8>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a9f      	ldr	r2, [pc, #636]	@ (800423c <UART_SetConfig+0x2dc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003fd6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	f023 010f 	bic.w	r1, r3, #15
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a90      	ldr	r2, [pc, #576]	@ (8004240 <UART_SetConfig+0x2e0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d125      	bne.n	8004050 <UART_SetConfig+0xf0>
 8004004:	4b8f      	ldr	r3, [pc, #572]	@ (8004244 <UART_SetConfig+0x2e4>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b03      	cmp	r3, #3
 8004010:	d81a      	bhi.n	8004048 <UART_SetConfig+0xe8>
 8004012:	a201      	add	r2, pc, #4	@ (adr r2, 8004018 <UART_SetConfig+0xb8>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	08004029 	.word	0x08004029
 800401c:	08004039 	.word	0x08004039
 8004020:	08004031 	.word	0x08004031
 8004024:	08004041 	.word	0x08004041
 8004028:	2301      	movs	r3, #1
 800402a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800402e:	e116      	b.n	800425e <UART_SetConfig+0x2fe>
 8004030:	2302      	movs	r3, #2
 8004032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004036:	e112      	b.n	800425e <UART_SetConfig+0x2fe>
 8004038:	2304      	movs	r3, #4
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800403e:	e10e      	b.n	800425e <UART_SetConfig+0x2fe>
 8004040:	2308      	movs	r3, #8
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004046:	e10a      	b.n	800425e <UART_SetConfig+0x2fe>
 8004048:	2310      	movs	r3, #16
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800404e:	e106      	b.n	800425e <UART_SetConfig+0x2fe>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a7c      	ldr	r2, [pc, #496]	@ (8004248 <UART_SetConfig+0x2e8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d138      	bne.n	80040cc <UART_SetConfig+0x16c>
 800405a:	4b7a      	ldr	r3, [pc, #488]	@ (8004244 <UART_SetConfig+0x2e4>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	2b0c      	cmp	r3, #12
 8004066:	d82d      	bhi.n	80040c4 <UART_SetConfig+0x164>
 8004068:	a201      	add	r2, pc, #4	@ (adr r2, 8004070 <UART_SetConfig+0x110>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	080040a5 	.word	0x080040a5
 8004074:	080040c5 	.word	0x080040c5
 8004078:	080040c5 	.word	0x080040c5
 800407c:	080040c5 	.word	0x080040c5
 8004080:	080040b5 	.word	0x080040b5
 8004084:	080040c5 	.word	0x080040c5
 8004088:	080040c5 	.word	0x080040c5
 800408c:	080040c5 	.word	0x080040c5
 8004090:	080040ad 	.word	0x080040ad
 8004094:	080040c5 	.word	0x080040c5
 8004098:	080040c5 	.word	0x080040c5
 800409c:	080040c5 	.word	0x080040c5
 80040a0:	080040bd 	.word	0x080040bd
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040aa:	e0d8      	b.n	800425e <UART_SetConfig+0x2fe>
 80040ac:	2302      	movs	r3, #2
 80040ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040b2:	e0d4      	b.n	800425e <UART_SetConfig+0x2fe>
 80040b4:	2304      	movs	r3, #4
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ba:	e0d0      	b.n	800425e <UART_SetConfig+0x2fe>
 80040bc:	2308      	movs	r3, #8
 80040be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040c2:	e0cc      	b.n	800425e <UART_SetConfig+0x2fe>
 80040c4:	2310      	movs	r3, #16
 80040c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ca:	e0c8      	b.n	800425e <UART_SetConfig+0x2fe>
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a5e      	ldr	r2, [pc, #376]	@ (800424c <UART_SetConfig+0x2ec>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d125      	bne.n	8004122 <UART_SetConfig+0x1c2>
 80040d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004244 <UART_SetConfig+0x2e4>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040e0:	2b30      	cmp	r3, #48	@ 0x30
 80040e2:	d016      	beq.n	8004112 <UART_SetConfig+0x1b2>
 80040e4:	2b30      	cmp	r3, #48	@ 0x30
 80040e6:	d818      	bhi.n	800411a <UART_SetConfig+0x1ba>
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d00a      	beq.n	8004102 <UART_SetConfig+0x1a2>
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d814      	bhi.n	800411a <UART_SetConfig+0x1ba>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <UART_SetConfig+0x19a>
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d008      	beq.n	800410a <UART_SetConfig+0x1aa>
 80040f8:	e00f      	b.n	800411a <UART_SetConfig+0x1ba>
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004100:	e0ad      	b.n	800425e <UART_SetConfig+0x2fe>
 8004102:	2302      	movs	r3, #2
 8004104:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004108:	e0a9      	b.n	800425e <UART_SetConfig+0x2fe>
 800410a:	2304      	movs	r3, #4
 800410c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004110:	e0a5      	b.n	800425e <UART_SetConfig+0x2fe>
 8004112:	2308      	movs	r3, #8
 8004114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004118:	e0a1      	b.n	800425e <UART_SetConfig+0x2fe>
 800411a:	2310      	movs	r3, #16
 800411c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004120:	e09d      	b.n	800425e <UART_SetConfig+0x2fe>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a4a      	ldr	r2, [pc, #296]	@ (8004250 <UART_SetConfig+0x2f0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d125      	bne.n	8004178 <UART_SetConfig+0x218>
 800412c:	4b45      	ldr	r3, [pc, #276]	@ (8004244 <UART_SetConfig+0x2e4>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004132:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004136:	2bc0      	cmp	r3, #192	@ 0xc0
 8004138:	d016      	beq.n	8004168 <UART_SetConfig+0x208>
 800413a:	2bc0      	cmp	r3, #192	@ 0xc0
 800413c:	d818      	bhi.n	8004170 <UART_SetConfig+0x210>
 800413e:	2b80      	cmp	r3, #128	@ 0x80
 8004140:	d00a      	beq.n	8004158 <UART_SetConfig+0x1f8>
 8004142:	2b80      	cmp	r3, #128	@ 0x80
 8004144:	d814      	bhi.n	8004170 <UART_SetConfig+0x210>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <UART_SetConfig+0x1f0>
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	d008      	beq.n	8004160 <UART_SetConfig+0x200>
 800414e:	e00f      	b.n	8004170 <UART_SetConfig+0x210>
 8004150:	2300      	movs	r3, #0
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004156:	e082      	b.n	800425e <UART_SetConfig+0x2fe>
 8004158:	2302      	movs	r3, #2
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800415e:	e07e      	b.n	800425e <UART_SetConfig+0x2fe>
 8004160:	2304      	movs	r3, #4
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004166:	e07a      	b.n	800425e <UART_SetConfig+0x2fe>
 8004168:	2308      	movs	r3, #8
 800416a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800416e:	e076      	b.n	800425e <UART_SetConfig+0x2fe>
 8004170:	2310      	movs	r3, #16
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004176:	e072      	b.n	800425e <UART_SetConfig+0x2fe>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a35      	ldr	r2, [pc, #212]	@ (8004254 <UART_SetConfig+0x2f4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d12a      	bne.n	80041d8 <UART_SetConfig+0x278>
 8004182:	4b30      	ldr	r3, [pc, #192]	@ (8004244 <UART_SetConfig+0x2e4>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004190:	d01a      	beq.n	80041c8 <UART_SetConfig+0x268>
 8004192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004196:	d81b      	bhi.n	80041d0 <UART_SetConfig+0x270>
 8004198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800419c:	d00c      	beq.n	80041b8 <UART_SetConfig+0x258>
 800419e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a2:	d815      	bhi.n	80041d0 <UART_SetConfig+0x270>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <UART_SetConfig+0x250>
 80041a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ac:	d008      	beq.n	80041c0 <UART_SetConfig+0x260>
 80041ae:	e00f      	b.n	80041d0 <UART_SetConfig+0x270>
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041b6:	e052      	b.n	800425e <UART_SetConfig+0x2fe>
 80041b8:	2302      	movs	r3, #2
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041be:	e04e      	b.n	800425e <UART_SetConfig+0x2fe>
 80041c0:	2304      	movs	r3, #4
 80041c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c6:	e04a      	b.n	800425e <UART_SetConfig+0x2fe>
 80041c8:	2308      	movs	r3, #8
 80041ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ce:	e046      	b.n	800425e <UART_SetConfig+0x2fe>
 80041d0:	2310      	movs	r3, #16
 80041d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d6:	e042      	b.n	800425e <UART_SetConfig+0x2fe>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a17      	ldr	r2, [pc, #92]	@ (800423c <UART_SetConfig+0x2dc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d13a      	bne.n	8004258 <UART_SetConfig+0x2f8>
 80041e2:	4b18      	ldr	r3, [pc, #96]	@ (8004244 <UART_SetConfig+0x2e4>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80041ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041f0:	d01a      	beq.n	8004228 <UART_SetConfig+0x2c8>
 80041f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041f6:	d81b      	bhi.n	8004230 <UART_SetConfig+0x2d0>
 80041f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041fc:	d00c      	beq.n	8004218 <UART_SetConfig+0x2b8>
 80041fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004202:	d815      	bhi.n	8004230 <UART_SetConfig+0x2d0>
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <UART_SetConfig+0x2b0>
 8004208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800420c:	d008      	beq.n	8004220 <UART_SetConfig+0x2c0>
 800420e:	e00f      	b.n	8004230 <UART_SetConfig+0x2d0>
 8004210:	2300      	movs	r3, #0
 8004212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004216:	e022      	b.n	800425e <UART_SetConfig+0x2fe>
 8004218:	2302      	movs	r3, #2
 800421a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800421e:	e01e      	b.n	800425e <UART_SetConfig+0x2fe>
 8004220:	2304      	movs	r3, #4
 8004222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004226:	e01a      	b.n	800425e <UART_SetConfig+0x2fe>
 8004228:	2308      	movs	r3, #8
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800422e:	e016      	b.n	800425e <UART_SetConfig+0x2fe>
 8004230:	2310      	movs	r3, #16
 8004232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004236:	e012      	b.n	800425e <UART_SetConfig+0x2fe>
 8004238:	cfff69f3 	.word	0xcfff69f3
 800423c:	40008000 	.word	0x40008000
 8004240:	40013800 	.word	0x40013800
 8004244:	40021000 	.word	0x40021000
 8004248:	40004400 	.word	0x40004400
 800424c:	40004800 	.word	0x40004800
 8004250:	40004c00 	.word	0x40004c00
 8004254:	40005000 	.word	0x40005000
 8004258:	2310      	movs	r3, #16
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4aae      	ldr	r2, [pc, #696]	@ (800451c <UART_SetConfig+0x5bc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	f040 8097 	bne.w	8004398 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800426a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800426e:	2b08      	cmp	r3, #8
 8004270:	d823      	bhi.n	80042ba <UART_SetConfig+0x35a>
 8004272:	a201      	add	r2, pc, #4	@ (adr r2, 8004278 <UART_SetConfig+0x318>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	0800429d 	.word	0x0800429d
 800427c:	080042bb 	.word	0x080042bb
 8004280:	080042a5 	.word	0x080042a5
 8004284:	080042bb 	.word	0x080042bb
 8004288:	080042ab 	.word	0x080042ab
 800428c:	080042bb 	.word	0x080042bb
 8004290:	080042bb 	.word	0x080042bb
 8004294:	080042bb 	.word	0x080042bb
 8004298:	080042b3 	.word	0x080042b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800429c:	f7fe fb94 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 80042a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042a2:	e010      	b.n	80042c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a4:	4b9e      	ldr	r3, [pc, #632]	@ (8004520 <UART_SetConfig+0x5c0>)
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042a8:	e00d      	b.n	80042c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042aa:	f7fe fb1f 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80042ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042b0:	e009      	b.n	80042c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042b8:	e005      	b.n	80042c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80042c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8130 	beq.w	800452e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	4a94      	ldr	r2, [pc, #592]	@ (8004524 <UART_SetConfig+0x5c4>)
 80042d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042d8:	461a      	mov	r2, r3
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	4413      	add	r3, r2
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d305      	bcc.n	80042fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d903      	bls.n	8004306 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004304:	e113      	b.n	800452e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	2200      	movs	r2, #0
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	60fa      	str	r2, [r7, #12]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	4a84      	ldr	r2, [pc, #528]	@ (8004524 <UART_SetConfig+0x5c4>)
 8004314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004318:	b29b      	uxth	r3, r3
 800431a:	2200      	movs	r2, #0
 800431c:	603b      	str	r3, [r7, #0]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004324:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004328:	f7fb ffca 	bl	80002c0 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4610      	mov	r0, r2
 8004332:	4619      	mov	r1, r3
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	020b      	lsls	r3, r1, #8
 800433e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004342:	0202      	lsls	r2, r0, #8
 8004344:	6979      	ldr	r1, [r7, #20]
 8004346:	6849      	ldr	r1, [r1, #4]
 8004348:	0849      	lsrs	r1, r1, #1
 800434a:	2000      	movs	r0, #0
 800434c:	460c      	mov	r4, r1
 800434e:	4605      	mov	r5, r0
 8004350:	eb12 0804 	adds.w	r8, r2, r4
 8004354:	eb43 0905 	adc.w	r9, r3, r5
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	469a      	mov	sl, r3
 8004360:	4693      	mov	fp, r2
 8004362:	4652      	mov	r2, sl
 8004364:	465b      	mov	r3, fp
 8004366:	4640      	mov	r0, r8
 8004368:	4649      	mov	r1, r9
 800436a:	f7fb ffa9 	bl	80002c0 <__aeabi_uldivmod>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4613      	mov	r3, r2
 8004374:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800437c:	d308      	bcc.n	8004390 <UART_SetConfig+0x430>
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004384:	d204      	bcs.n	8004390 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6a3a      	ldr	r2, [r7, #32]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	e0ce      	b.n	800452e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004396:	e0ca      	b.n	800452e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043a0:	d166      	bne.n	8004470 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80043a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d827      	bhi.n	80043fa <UART_SetConfig+0x49a>
 80043aa:	a201      	add	r2, pc, #4	@ (adr r2, 80043b0 <UART_SetConfig+0x450>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	080043fb 	.word	0x080043fb
 80043c0:	080043eb 	.word	0x080043eb
 80043c4:	080043fb 	.word	0x080043fb
 80043c8:	080043fb 	.word	0x080043fb
 80043cc:	080043fb 	.word	0x080043fb
 80043d0:	080043f3 	.word	0x080043f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d4:	f7fe faf8 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 80043d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043da:	e014      	b.n	8004406 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043dc:	f7fe fb0a 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 80043e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043e2:	e010      	b.n	8004406 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004520 <UART_SetConfig+0x5c0>)
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043e8:	e00d      	b.n	8004406 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ea:	f7fe fa7f 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80043ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043f0:	e009      	b.n	8004406 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043f8:	e005      	b.n	8004406 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004404:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8090 	beq.w	800452e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	4a44      	ldr	r2, [pc, #272]	@ (8004524 <UART_SetConfig+0x5c4>)
 8004414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004418:	461a      	mov	r2, r3
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004420:	005a      	lsls	r2, r3, #1
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	441a      	add	r2, r3
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004432:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	2b0f      	cmp	r3, #15
 8004438:	d916      	bls.n	8004468 <UART_SetConfig+0x508>
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004440:	d212      	bcs.n	8004468 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f023 030f 	bic.w	r3, r3, #15
 800444a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	b29b      	uxth	r3, r3
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	b29a      	uxth	r2, r3
 8004458:	8bfb      	ldrh	r3, [r7, #30]
 800445a:	4313      	orrs	r3, r2
 800445c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	8bfa      	ldrh	r2, [r7, #30]
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	e062      	b.n	800452e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800446e:	e05e      	b.n	800452e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004470:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004474:	2b08      	cmp	r3, #8
 8004476:	d828      	bhi.n	80044ca <UART_SetConfig+0x56a>
 8004478:	a201      	add	r2, pc, #4	@ (adr r2, 8004480 <UART_SetConfig+0x520>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044b5 	.word	0x080044b5
 800448c:	080044cb 	.word	0x080044cb
 8004490:	080044bb 	.word	0x080044bb
 8004494:	080044cb 	.word	0x080044cb
 8004498:	080044cb 	.word	0x080044cb
 800449c:	080044cb 	.word	0x080044cb
 80044a0:	080044c3 	.word	0x080044c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a4:	f7fe fa90 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 80044a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044aa:	e014      	b.n	80044d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ac:	f7fe faa2 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 80044b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044b2:	e010      	b.n	80044d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004520 <UART_SetConfig+0x5c0>)
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044b8:	e00d      	b.n	80044d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ba:	f7fe fa17 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80044be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044c0:	e009      	b.n	80044d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044c8:	e005      	b.n	80044d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044d4:	bf00      	nop
    }

    if (pclk != 0U)
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d028      	beq.n	800452e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	4a10      	ldr	r2, [pc, #64]	@ (8004524 <UART_SetConfig+0x5c4>)
 80044e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044e6:	461a      	mov	r2, r3
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	441a      	add	r2, r3
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	2b0f      	cmp	r3, #15
 8004504:	d910      	bls.n	8004528 <UART_SetConfig+0x5c8>
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800450c:	d20c      	bcs.n	8004528 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	b29a      	uxth	r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60da      	str	r2, [r3, #12]
 8004518:	e009      	b.n	800452e <UART_SetConfig+0x5ce>
 800451a:	bf00      	nop
 800451c:	40008000 	.word	0x40008000
 8004520:	00f42400 	.word	0x00f42400
 8004524:	08005ad4 	.word	0x08005ad4
      }
      else
      {
        ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2201      	movs	r2, #1
 8004532:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2201      	movs	r2, #1
 800453a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2200      	movs	r2, #0
 8004542:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2200      	movs	r2, #0
 8004548:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800454a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800454e:	4618      	mov	r0, r3
 8004550:	3730      	adds	r7, #48	@ 0x30
 8004552:	46bd      	mov	sp, r7
 8004554:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01a      	beq.n	800466e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004656:	d10a      	bne.n	800466e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	605a      	str	r2, [r3, #4]
  }
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b098      	sub	sp, #96	@ 0x60
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046ac:	f7fc fea4 	bl	80013f8 <HAL_GetTick>
 80046b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d12f      	bne.n	8004720 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c8:	2200      	movs	r2, #0
 80046ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f88e 	bl	80047f0 <UART_WaitOnFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d022      	beq.n	8004720 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e6      	bne.n	80046da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e063      	b.n	80047e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b04      	cmp	r3, #4
 800472c:	d149      	bne.n	80047c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800472e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004736:	2200      	movs	r2, #0
 8004738:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f857 	bl	80047f0 <UART_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d03c      	beq.n	80047c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	623b      	str	r3, [r7, #32]
   return(result);
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800475c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004766:	633b      	str	r3, [r7, #48]	@ 0x30
 8004768:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800476c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e6      	bne.n	8004748 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3308      	adds	r3, #8
 8004780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	60fb      	str	r3, [r7, #12]
   return(result);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3308      	adds	r3, #8
 8004798:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800479a:	61fa      	str	r2, [r7, #28]
 800479c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	69b9      	ldr	r1, [r7, #24]
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	617b      	str	r3, [r7, #20]
   return(result);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e5      	bne.n	800477a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e012      	b.n	80047e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3758      	adds	r7, #88	@ 0x58
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004800:	e04f      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004808:	d04b      	beq.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480a:	f7fc fdf5 	bl	80013f8 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <UART_WaitOnFlagUntilTimeout+0x30>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e04e      	b.n	80048c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d037      	beq.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b80      	cmp	r3, #128	@ 0x80
 8004836:	d034      	beq.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b40      	cmp	r3, #64	@ 0x40
 800483c:	d031      	beq.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b08      	cmp	r3, #8
 800484a:	d110      	bne.n	800486e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2208      	movs	r2, #8
 8004852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f838 	bl	80048ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2208      	movs	r2, #8
 800485e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e029      	b.n	80048c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800487c:	d111      	bne.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f81e 	bl	80048ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e00f      	b.n	80048c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	bf0c      	ite	eq
 80048b2:	2301      	moveq	r3, #1
 80048b4:	2300      	movne	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d0a0      	beq.n	8004802 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b095      	sub	sp, #84	@ 0x54
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80048f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e6      	bne.n	80048d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	e853 3f00 	ldrex	r3, [r3]
 8004912:	61fb      	str	r3, [r7, #28]
   return(result);
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004928:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800492a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800492e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e3      	bne.n	8004904 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004940:	2b01      	cmp	r3, #1
 8004942:	d118      	bne.n	8004976 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	60bb      	str	r3, [r7, #8]
   return(result);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f023 0310 	bic.w	r3, r3, #16
 8004958:	647b      	str	r3, [r7, #68]	@ 0x44
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6979      	ldr	r1, [r7, #20]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	613b      	str	r3, [r7, #16]
   return(result);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e6      	bne.n	8004944 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800498a:	bf00      	nop
 800498c:	3754      	adds	r7, #84	@ 0x54
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004996:	b480      	push	{r7}
 8004998:	b085      	sub	sp, #20
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_UARTEx_DisableFifoMode+0x16>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e027      	b.n	80049fc <HAL_UARTEx_DisableFifoMode+0x66>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2224      	movs	r2, #36	@ 0x24
 80049b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0201 	bic.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80049da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e02d      	b.n	8004a7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2224      	movs	r2, #36	@ 0x24
 8004a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f84f 	bl	8004b00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e02d      	b.n	8004af8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2224      	movs	r2, #36	@ 0x24
 8004aa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f811 	bl	8004b00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d108      	bne.n	8004b22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b20:	e031      	b.n	8004b86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b22:	2308      	movs	r3, #8
 8004b24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b26:	2308      	movs	r3, #8
 8004b28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	0e5b      	lsrs	r3, r3, #25
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	0f5b      	lsrs	r3, r3, #29
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b4a:	7bbb      	ldrb	r3, [r7, #14]
 8004b4c:	7b3a      	ldrb	r2, [r7, #12]
 8004b4e:	4911      	ldr	r1, [pc, #68]	@ (8004b94 <UARTEx_SetNbDataToProcess+0x94>)
 8004b50:	5c8a      	ldrb	r2, [r1, r2]
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b56:	7b3a      	ldrb	r2, [r7, #12]
 8004b58:	490f      	ldr	r1, [pc, #60]	@ (8004b98 <UARTEx_SetNbDataToProcess+0x98>)
 8004b5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	7b7a      	ldrb	r2, [r7, #13]
 8004b6c:	4909      	ldr	r1, [pc, #36]	@ (8004b94 <UARTEx_SetNbDataToProcess+0x94>)
 8004b6e:	5c8a      	ldrb	r2, [r1, r2]
 8004b70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b74:	7b7a      	ldrb	r2, [r7, #13]
 8004b76:	4908      	ldr	r1, [pc, #32]	@ (8004b98 <UARTEx_SetNbDataToProcess+0x98>)
 8004b78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	08005aec 	.word	0x08005aec
 8004b98:	08005af4 	.word	0x08005af4

08004b9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ba4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004ba8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	4013      	ands	r3, r2
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	1d3b      	adds	r3, r7, #4
 8004bdc:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <std>:
 8004c10:	2300      	movs	r3, #0
 8004c12:	b510      	push	{r4, lr}
 8004c14:	4604      	mov	r4, r0
 8004c16:	e9c0 3300 	strd	r3, r3, [r0]
 8004c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c1e:	6083      	str	r3, [r0, #8]
 8004c20:	8181      	strh	r1, [r0, #12]
 8004c22:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c24:	81c2      	strh	r2, [r0, #14]
 8004c26:	6183      	str	r3, [r0, #24]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	305c      	adds	r0, #92	@ 0x5c
 8004c2e:	f000 f906 	bl	8004e3e <memset>
 8004c32:	4b0d      	ldr	r3, [pc, #52]	@ (8004c68 <std+0x58>)
 8004c34:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c36:	4b0d      	ldr	r3, [pc, #52]	@ (8004c6c <std+0x5c>)
 8004c38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c70 <std+0x60>)
 8004c3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <std+0x64>)
 8004c40:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c42:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <std+0x68>)
 8004c44:	6224      	str	r4, [r4, #32]
 8004c46:	429c      	cmp	r4, r3
 8004c48:	d006      	beq.n	8004c58 <std+0x48>
 8004c4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c4e:	4294      	cmp	r4, r2
 8004c50:	d002      	beq.n	8004c58 <std+0x48>
 8004c52:	33d0      	adds	r3, #208	@ 0xd0
 8004c54:	429c      	cmp	r4, r3
 8004c56:	d105      	bne.n	8004c64 <std+0x54>
 8004c58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c60:	f000 b966 	b.w	8004f30 <__retarget_lock_init_recursive>
 8004c64:	bd10      	pop	{r4, pc}
 8004c66:	bf00      	nop
 8004c68:	08004db9 	.word	0x08004db9
 8004c6c:	08004ddb 	.word	0x08004ddb
 8004c70:	08004e13 	.word	0x08004e13
 8004c74:	08004e37 	.word	0x08004e37
 8004c78:	200005f0 	.word	0x200005f0

08004c7c <stdio_exit_handler>:
 8004c7c:	4a02      	ldr	r2, [pc, #8]	@ (8004c88 <stdio_exit_handler+0xc>)
 8004c7e:	4903      	ldr	r1, [pc, #12]	@ (8004c8c <stdio_exit_handler+0x10>)
 8004c80:	4803      	ldr	r0, [pc, #12]	@ (8004c90 <stdio_exit_handler+0x14>)
 8004c82:	f000 b869 	b.w	8004d58 <_fwalk_sglue>
 8004c86:	bf00      	nop
 8004c88:	2000000c 	.word	0x2000000c
 8004c8c:	080057d1 	.word	0x080057d1
 8004c90:	2000001c 	.word	0x2000001c

08004c94 <cleanup_stdio>:
 8004c94:	6841      	ldr	r1, [r0, #4]
 8004c96:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc8 <cleanup_stdio+0x34>)
 8004c98:	4299      	cmp	r1, r3
 8004c9a:	b510      	push	{r4, lr}
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	d001      	beq.n	8004ca4 <cleanup_stdio+0x10>
 8004ca0:	f000 fd96 	bl	80057d0 <_fflush_r>
 8004ca4:	68a1      	ldr	r1, [r4, #8]
 8004ca6:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <cleanup_stdio+0x38>)
 8004ca8:	4299      	cmp	r1, r3
 8004caa:	d002      	beq.n	8004cb2 <cleanup_stdio+0x1e>
 8004cac:	4620      	mov	r0, r4
 8004cae:	f000 fd8f 	bl	80057d0 <_fflush_r>
 8004cb2:	68e1      	ldr	r1, [r4, #12]
 8004cb4:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <cleanup_stdio+0x3c>)
 8004cb6:	4299      	cmp	r1, r3
 8004cb8:	d004      	beq.n	8004cc4 <cleanup_stdio+0x30>
 8004cba:	4620      	mov	r0, r4
 8004cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc0:	f000 bd86 	b.w	80057d0 <_fflush_r>
 8004cc4:	bd10      	pop	{r4, pc}
 8004cc6:	bf00      	nop
 8004cc8:	200005f0 	.word	0x200005f0
 8004ccc:	20000658 	.word	0x20000658
 8004cd0:	200006c0 	.word	0x200006c0

08004cd4 <global_stdio_init.part.0>:
 8004cd4:	b510      	push	{r4, lr}
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d04 <global_stdio_init.part.0+0x30>)
 8004cd8:	4c0b      	ldr	r4, [pc, #44]	@ (8004d08 <global_stdio_init.part.0+0x34>)
 8004cda:	4a0c      	ldr	r2, [pc, #48]	@ (8004d0c <global_stdio_init.part.0+0x38>)
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	4620      	mov	r0, r4
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2104      	movs	r1, #4
 8004ce4:	f7ff ff94 	bl	8004c10 <std>
 8004ce8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004cec:	2201      	movs	r2, #1
 8004cee:	2109      	movs	r1, #9
 8004cf0:	f7ff ff8e 	bl	8004c10 <std>
 8004cf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cfe:	2112      	movs	r1, #18
 8004d00:	f7ff bf86 	b.w	8004c10 <std>
 8004d04:	20000728 	.word	0x20000728
 8004d08:	200005f0 	.word	0x200005f0
 8004d0c:	08004c7d 	.word	0x08004c7d

08004d10 <__sfp_lock_acquire>:
 8004d10:	4801      	ldr	r0, [pc, #4]	@ (8004d18 <__sfp_lock_acquire+0x8>)
 8004d12:	f000 b90e 	b.w	8004f32 <__retarget_lock_acquire_recursive>
 8004d16:	bf00      	nop
 8004d18:	20000731 	.word	0x20000731

08004d1c <__sfp_lock_release>:
 8004d1c:	4801      	ldr	r0, [pc, #4]	@ (8004d24 <__sfp_lock_release+0x8>)
 8004d1e:	f000 b909 	b.w	8004f34 <__retarget_lock_release_recursive>
 8004d22:	bf00      	nop
 8004d24:	20000731 	.word	0x20000731

08004d28 <__sinit>:
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	f7ff fff0 	bl	8004d10 <__sfp_lock_acquire>
 8004d30:	6a23      	ldr	r3, [r4, #32]
 8004d32:	b11b      	cbz	r3, 8004d3c <__sinit+0x14>
 8004d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d38:	f7ff bff0 	b.w	8004d1c <__sfp_lock_release>
 8004d3c:	4b04      	ldr	r3, [pc, #16]	@ (8004d50 <__sinit+0x28>)
 8004d3e:	6223      	str	r3, [r4, #32]
 8004d40:	4b04      	ldr	r3, [pc, #16]	@ (8004d54 <__sinit+0x2c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f5      	bne.n	8004d34 <__sinit+0xc>
 8004d48:	f7ff ffc4 	bl	8004cd4 <global_stdio_init.part.0>
 8004d4c:	e7f2      	b.n	8004d34 <__sinit+0xc>
 8004d4e:	bf00      	nop
 8004d50:	08004c95 	.word	0x08004c95
 8004d54:	20000728 	.word	0x20000728

08004d58 <_fwalk_sglue>:
 8004d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	4688      	mov	r8, r1
 8004d60:	4614      	mov	r4, r2
 8004d62:	2600      	movs	r6, #0
 8004d64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d68:	f1b9 0901 	subs.w	r9, r9, #1
 8004d6c:	d505      	bpl.n	8004d7a <_fwalk_sglue+0x22>
 8004d6e:	6824      	ldr	r4, [r4, #0]
 8004d70:	2c00      	cmp	r4, #0
 8004d72:	d1f7      	bne.n	8004d64 <_fwalk_sglue+0xc>
 8004d74:	4630      	mov	r0, r6
 8004d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d7a:	89ab      	ldrh	r3, [r5, #12]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d907      	bls.n	8004d90 <_fwalk_sglue+0x38>
 8004d80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d84:	3301      	adds	r3, #1
 8004d86:	d003      	beq.n	8004d90 <_fwalk_sglue+0x38>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	47c0      	blx	r8
 8004d8e:	4306      	orrs	r6, r0
 8004d90:	3568      	adds	r5, #104	@ 0x68
 8004d92:	e7e9      	b.n	8004d68 <_fwalk_sglue+0x10>

08004d94 <iprintf>:
 8004d94:	b40f      	push	{r0, r1, r2, r3}
 8004d96:	b507      	push	{r0, r1, r2, lr}
 8004d98:	4906      	ldr	r1, [pc, #24]	@ (8004db4 <iprintf+0x20>)
 8004d9a:	ab04      	add	r3, sp, #16
 8004d9c:	6808      	ldr	r0, [r1, #0]
 8004d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004da2:	6881      	ldr	r1, [r0, #8]
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	f000 f9e9 	bl	800517c <_vfiprintf_r>
 8004daa:	b003      	add	sp, #12
 8004dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004db0:	b004      	add	sp, #16
 8004db2:	4770      	bx	lr
 8004db4:	20000018 	.word	0x20000018

08004db8 <__sread>:
 8004db8:	b510      	push	{r4, lr}
 8004dba:	460c      	mov	r4, r1
 8004dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc0:	f000 f868 	bl	8004e94 <_read_r>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	bfab      	itete	ge
 8004dc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004dca:	89a3      	ldrhlt	r3, [r4, #12]
 8004dcc:	181b      	addge	r3, r3, r0
 8004dce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004dd2:	bfac      	ite	ge
 8004dd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004dd6:	81a3      	strhlt	r3, [r4, #12]
 8004dd8:	bd10      	pop	{r4, pc}

08004dda <__swrite>:
 8004dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dde:	461f      	mov	r7, r3
 8004de0:	898b      	ldrh	r3, [r1, #12]
 8004de2:	05db      	lsls	r3, r3, #23
 8004de4:	4605      	mov	r5, r0
 8004de6:	460c      	mov	r4, r1
 8004de8:	4616      	mov	r6, r2
 8004dea:	d505      	bpl.n	8004df8 <__swrite+0x1e>
 8004dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df0:	2302      	movs	r3, #2
 8004df2:	2200      	movs	r2, #0
 8004df4:	f000 f83c 	bl	8004e70 <_lseek_r>
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e02:	81a3      	strh	r3, [r4, #12]
 8004e04:	4632      	mov	r2, r6
 8004e06:	463b      	mov	r3, r7
 8004e08:	4628      	mov	r0, r5
 8004e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0e:	f000 b853 	b.w	8004eb8 <_write_r>

08004e12 <__sseek>:
 8004e12:	b510      	push	{r4, lr}
 8004e14:	460c      	mov	r4, r1
 8004e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1a:	f000 f829 	bl	8004e70 <_lseek_r>
 8004e1e:	1c43      	adds	r3, r0, #1
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	bf15      	itete	ne
 8004e24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e2e:	81a3      	strheq	r3, [r4, #12]
 8004e30:	bf18      	it	ne
 8004e32:	81a3      	strhne	r3, [r4, #12]
 8004e34:	bd10      	pop	{r4, pc}

08004e36 <__sclose>:
 8004e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e3a:	f000 b809 	b.w	8004e50 <_close_r>

08004e3e <memset>:
 8004e3e:	4402      	add	r2, r0
 8004e40:	4603      	mov	r3, r0
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d100      	bne.n	8004e48 <memset+0xa>
 8004e46:	4770      	bx	lr
 8004e48:	f803 1b01 	strb.w	r1, [r3], #1
 8004e4c:	e7f9      	b.n	8004e42 <memset+0x4>
	...

08004e50 <_close_r>:
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	4d06      	ldr	r5, [pc, #24]	@ (8004e6c <_close_r+0x1c>)
 8004e54:	2300      	movs	r3, #0
 8004e56:	4604      	mov	r4, r0
 8004e58:	4608      	mov	r0, r1
 8004e5a:	602b      	str	r3, [r5, #0]
 8004e5c:	f7fc f9c1 	bl	80011e2 <_close>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	d102      	bne.n	8004e6a <_close_r+0x1a>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	b103      	cbz	r3, 8004e6a <_close_r+0x1a>
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
 8004e6c:	2000072c 	.word	0x2000072c

08004e70 <_lseek_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4d07      	ldr	r5, [pc, #28]	@ (8004e90 <_lseek_r+0x20>)
 8004e74:	4604      	mov	r4, r0
 8004e76:	4608      	mov	r0, r1
 8004e78:	4611      	mov	r1, r2
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	602a      	str	r2, [r5, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f7fc f9d6 	bl	8001230 <_lseek>
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	d102      	bne.n	8004e8e <_lseek_r+0x1e>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	b103      	cbz	r3, 8004e8e <_lseek_r+0x1e>
 8004e8c:	6023      	str	r3, [r4, #0]
 8004e8e:	bd38      	pop	{r3, r4, r5, pc}
 8004e90:	2000072c 	.word	0x2000072c

08004e94 <_read_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4d07      	ldr	r5, [pc, #28]	@ (8004eb4 <_read_r+0x20>)
 8004e98:	4604      	mov	r4, r0
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	602a      	str	r2, [r5, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f7fb fb84 	bl	80005b0 <_read>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_read_r+0x1e>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_read_r+0x1e>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	2000072c 	.word	0x2000072c

08004eb8 <_write_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d07      	ldr	r5, [pc, #28]	@ (8004ed8 <_write_r+0x20>)
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	4608      	mov	r0, r1
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	602a      	str	r2, [r5, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f7fb fb86 	bl	80005d8 <_write>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_write_r+0x1e>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_write_r+0x1e>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	2000072c 	.word	0x2000072c

08004edc <__errno>:
 8004edc:	4b01      	ldr	r3, [pc, #4]	@ (8004ee4 <__errno+0x8>)
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000018 	.word	0x20000018

08004ee8 <__libc_init_array>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	4d0d      	ldr	r5, [pc, #52]	@ (8004f20 <__libc_init_array+0x38>)
 8004eec:	4c0d      	ldr	r4, [pc, #52]	@ (8004f24 <__libc_init_array+0x3c>)
 8004eee:	1b64      	subs	r4, r4, r5
 8004ef0:	10a4      	asrs	r4, r4, #2
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	42a6      	cmp	r6, r4
 8004ef6:	d109      	bne.n	8004f0c <__libc_init_array+0x24>
 8004ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8004f28 <__libc_init_array+0x40>)
 8004efa:	4c0c      	ldr	r4, [pc, #48]	@ (8004f2c <__libc_init_array+0x44>)
 8004efc:	f000 fdb8 	bl	8005a70 <_init>
 8004f00:	1b64      	subs	r4, r4, r5
 8004f02:	10a4      	asrs	r4, r4, #2
 8004f04:	2600      	movs	r6, #0
 8004f06:	42a6      	cmp	r6, r4
 8004f08:	d105      	bne.n	8004f16 <__libc_init_array+0x2e>
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f10:	4798      	blx	r3
 8004f12:	3601      	adds	r6, #1
 8004f14:	e7ee      	b.n	8004ef4 <__libc_init_array+0xc>
 8004f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1a:	4798      	blx	r3
 8004f1c:	3601      	adds	r6, #1
 8004f1e:	e7f2      	b.n	8004f06 <__libc_init_array+0x1e>
 8004f20:	08005b38 	.word	0x08005b38
 8004f24:	08005b38 	.word	0x08005b38
 8004f28:	08005b38 	.word	0x08005b38
 8004f2c:	08005b3c 	.word	0x08005b3c

08004f30 <__retarget_lock_init_recursive>:
 8004f30:	4770      	bx	lr

08004f32 <__retarget_lock_acquire_recursive>:
 8004f32:	4770      	bx	lr

08004f34 <__retarget_lock_release_recursive>:
 8004f34:	4770      	bx	lr
	...

08004f38 <_free_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	2900      	cmp	r1, #0
 8004f3e:	d041      	beq.n	8004fc4 <_free_r+0x8c>
 8004f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f44:	1f0c      	subs	r4, r1, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bfb8      	it	lt
 8004f4a:	18e4      	addlt	r4, r4, r3
 8004f4c:	f000 f8e0 	bl	8005110 <__malloc_lock>
 8004f50:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc8 <_free_r+0x90>)
 8004f52:	6813      	ldr	r3, [r2, #0]
 8004f54:	b933      	cbnz	r3, 8004f64 <_free_r+0x2c>
 8004f56:	6063      	str	r3, [r4, #4]
 8004f58:	6014      	str	r4, [r2, #0]
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f60:	f000 b8dc 	b.w	800511c <__malloc_unlock>
 8004f64:	42a3      	cmp	r3, r4
 8004f66:	d908      	bls.n	8004f7a <_free_r+0x42>
 8004f68:	6820      	ldr	r0, [r4, #0]
 8004f6a:	1821      	adds	r1, r4, r0
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	bf01      	itttt	eq
 8004f70:	6819      	ldreq	r1, [r3, #0]
 8004f72:	685b      	ldreq	r3, [r3, #4]
 8004f74:	1809      	addeq	r1, r1, r0
 8004f76:	6021      	streq	r1, [r4, #0]
 8004f78:	e7ed      	b.n	8004f56 <_free_r+0x1e>
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	b10b      	cbz	r3, 8004f84 <_free_r+0x4c>
 8004f80:	42a3      	cmp	r3, r4
 8004f82:	d9fa      	bls.n	8004f7a <_free_r+0x42>
 8004f84:	6811      	ldr	r1, [r2, #0]
 8004f86:	1850      	adds	r0, r2, r1
 8004f88:	42a0      	cmp	r0, r4
 8004f8a:	d10b      	bne.n	8004fa4 <_free_r+0x6c>
 8004f8c:	6820      	ldr	r0, [r4, #0]
 8004f8e:	4401      	add	r1, r0
 8004f90:	1850      	adds	r0, r2, r1
 8004f92:	4283      	cmp	r3, r0
 8004f94:	6011      	str	r1, [r2, #0]
 8004f96:	d1e0      	bne.n	8004f5a <_free_r+0x22>
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	6053      	str	r3, [r2, #4]
 8004f9e:	4408      	add	r0, r1
 8004fa0:	6010      	str	r0, [r2, #0]
 8004fa2:	e7da      	b.n	8004f5a <_free_r+0x22>
 8004fa4:	d902      	bls.n	8004fac <_free_r+0x74>
 8004fa6:	230c      	movs	r3, #12
 8004fa8:	602b      	str	r3, [r5, #0]
 8004faa:	e7d6      	b.n	8004f5a <_free_r+0x22>
 8004fac:	6820      	ldr	r0, [r4, #0]
 8004fae:	1821      	adds	r1, r4, r0
 8004fb0:	428b      	cmp	r3, r1
 8004fb2:	bf04      	itt	eq
 8004fb4:	6819      	ldreq	r1, [r3, #0]
 8004fb6:	685b      	ldreq	r3, [r3, #4]
 8004fb8:	6063      	str	r3, [r4, #4]
 8004fba:	bf04      	itt	eq
 8004fbc:	1809      	addeq	r1, r1, r0
 8004fbe:	6021      	streq	r1, [r4, #0]
 8004fc0:	6054      	str	r4, [r2, #4]
 8004fc2:	e7ca      	b.n	8004f5a <_free_r+0x22>
 8004fc4:	bd38      	pop	{r3, r4, r5, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000738 	.word	0x20000738

08004fcc <sbrk_aligned>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	4e0f      	ldr	r6, [pc, #60]	@ (800500c <sbrk_aligned+0x40>)
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	6831      	ldr	r1, [r6, #0]
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	b911      	cbnz	r1, 8004fde <sbrk_aligned+0x12>
 8004fd8:	f000 fcb6 	bl	8005948 <_sbrk_r>
 8004fdc:	6030      	str	r0, [r6, #0]
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f000 fcb1 	bl	8005948 <_sbrk_r>
 8004fe6:	1c43      	adds	r3, r0, #1
 8004fe8:	d103      	bne.n	8004ff2 <sbrk_aligned+0x26>
 8004fea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004fee:	4620      	mov	r0, r4
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
 8004ff2:	1cc4      	adds	r4, r0, #3
 8004ff4:	f024 0403 	bic.w	r4, r4, #3
 8004ff8:	42a0      	cmp	r0, r4
 8004ffa:	d0f8      	beq.n	8004fee <sbrk_aligned+0x22>
 8004ffc:	1a21      	subs	r1, r4, r0
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 fca2 	bl	8005948 <_sbrk_r>
 8005004:	3001      	adds	r0, #1
 8005006:	d1f2      	bne.n	8004fee <sbrk_aligned+0x22>
 8005008:	e7ef      	b.n	8004fea <sbrk_aligned+0x1e>
 800500a:	bf00      	nop
 800500c:	20000734 	.word	0x20000734

08005010 <_malloc_r>:
 8005010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005014:	1ccd      	adds	r5, r1, #3
 8005016:	f025 0503 	bic.w	r5, r5, #3
 800501a:	3508      	adds	r5, #8
 800501c:	2d0c      	cmp	r5, #12
 800501e:	bf38      	it	cc
 8005020:	250c      	movcc	r5, #12
 8005022:	2d00      	cmp	r5, #0
 8005024:	4606      	mov	r6, r0
 8005026:	db01      	blt.n	800502c <_malloc_r+0x1c>
 8005028:	42a9      	cmp	r1, r5
 800502a:	d904      	bls.n	8005036 <_malloc_r+0x26>
 800502c:	230c      	movs	r3, #12
 800502e:	6033      	str	r3, [r6, #0]
 8005030:	2000      	movs	r0, #0
 8005032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005036:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800510c <_malloc_r+0xfc>
 800503a:	f000 f869 	bl	8005110 <__malloc_lock>
 800503e:	f8d8 3000 	ldr.w	r3, [r8]
 8005042:	461c      	mov	r4, r3
 8005044:	bb44      	cbnz	r4, 8005098 <_malloc_r+0x88>
 8005046:	4629      	mov	r1, r5
 8005048:	4630      	mov	r0, r6
 800504a:	f7ff ffbf 	bl	8004fcc <sbrk_aligned>
 800504e:	1c43      	adds	r3, r0, #1
 8005050:	4604      	mov	r4, r0
 8005052:	d158      	bne.n	8005106 <_malloc_r+0xf6>
 8005054:	f8d8 4000 	ldr.w	r4, [r8]
 8005058:	4627      	mov	r7, r4
 800505a:	2f00      	cmp	r7, #0
 800505c:	d143      	bne.n	80050e6 <_malloc_r+0xd6>
 800505e:	2c00      	cmp	r4, #0
 8005060:	d04b      	beq.n	80050fa <_malloc_r+0xea>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	4639      	mov	r1, r7
 8005066:	4630      	mov	r0, r6
 8005068:	eb04 0903 	add.w	r9, r4, r3
 800506c:	f000 fc6c 	bl	8005948 <_sbrk_r>
 8005070:	4581      	cmp	r9, r0
 8005072:	d142      	bne.n	80050fa <_malloc_r+0xea>
 8005074:	6821      	ldr	r1, [r4, #0]
 8005076:	1a6d      	subs	r5, r5, r1
 8005078:	4629      	mov	r1, r5
 800507a:	4630      	mov	r0, r6
 800507c:	f7ff ffa6 	bl	8004fcc <sbrk_aligned>
 8005080:	3001      	adds	r0, #1
 8005082:	d03a      	beq.n	80050fa <_malloc_r+0xea>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	442b      	add	r3, r5
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	f8d8 3000 	ldr.w	r3, [r8]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	bb62      	cbnz	r2, 80050ec <_malloc_r+0xdc>
 8005092:	f8c8 7000 	str.w	r7, [r8]
 8005096:	e00f      	b.n	80050b8 <_malloc_r+0xa8>
 8005098:	6822      	ldr	r2, [r4, #0]
 800509a:	1b52      	subs	r2, r2, r5
 800509c:	d420      	bmi.n	80050e0 <_malloc_r+0xd0>
 800509e:	2a0b      	cmp	r2, #11
 80050a0:	d917      	bls.n	80050d2 <_malloc_r+0xc2>
 80050a2:	1961      	adds	r1, r4, r5
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	6025      	str	r5, [r4, #0]
 80050a8:	bf18      	it	ne
 80050aa:	6059      	strne	r1, [r3, #4]
 80050ac:	6863      	ldr	r3, [r4, #4]
 80050ae:	bf08      	it	eq
 80050b0:	f8c8 1000 	streq.w	r1, [r8]
 80050b4:	5162      	str	r2, [r4, r5]
 80050b6:	604b      	str	r3, [r1, #4]
 80050b8:	4630      	mov	r0, r6
 80050ba:	f000 f82f 	bl	800511c <__malloc_unlock>
 80050be:	f104 000b 	add.w	r0, r4, #11
 80050c2:	1d23      	adds	r3, r4, #4
 80050c4:	f020 0007 	bic.w	r0, r0, #7
 80050c8:	1ac2      	subs	r2, r0, r3
 80050ca:	bf1c      	itt	ne
 80050cc:	1a1b      	subne	r3, r3, r0
 80050ce:	50a3      	strne	r3, [r4, r2]
 80050d0:	e7af      	b.n	8005032 <_malloc_r+0x22>
 80050d2:	6862      	ldr	r2, [r4, #4]
 80050d4:	42a3      	cmp	r3, r4
 80050d6:	bf0c      	ite	eq
 80050d8:	f8c8 2000 	streq.w	r2, [r8]
 80050dc:	605a      	strne	r2, [r3, #4]
 80050de:	e7eb      	b.n	80050b8 <_malloc_r+0xa8>
 80050e0:	4623      	mov	r3, r4
 80050e2:	6864      	ldr	r4, [r4, #4]
 80050e4:	e7ae      	b.n	8005044 <_malloc_r+0x34>
 80050e6:	463c      	mov	r4, r7
 80050e8:	687f      	ldr	r7, [r7, #4]
 80050ea:	e7b6      	b.n	800505a <_malloc_r+0x4a>
 80050ec:	461a      	mov	r2, r3
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	42a3      	cmp	r3, r4
 80050f2:	d1fb      	bne.n	80050ec <_malloc_r+0xdc>
 80050f4:	2300      	movs	r3, #0
 80050f6:	6053      	str	r3, [r2, #4]
 80050f8:	e7de      	b.n	80050b8 <_malloc_r+0xa8>
 80050fa:	230c      	movs	r3, #12
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	4630      	mov	r0, r6
 8005100:	f000 f80c 	bl	800511c <__malloc_unlock>
 8005104:	e794      	b.n	8005030 <_malloc_r+0x20>
 8005106:	6005      	str	r5, [r0, #0]
 8005108:	e7d6      	b.n	80050b8 <_malloc_r+0xa8>
 800510a:	bf00      	nop
 800510c:	20000738 	.word	0x20000738

08005110 <__malloc_lock>:
 8005110:	4801      	ldr	r0, [pc, #4]	@ (8005118 <__malloc_lock+0x8>)
 8005112:	f7ff bf0e 	b.w	8004f32 <__retarget_lock_acquire_recursive>
 8005116:	bf00      	nop
 8005118:	20000730 	.word	0x20000730

0800511c <__malloc_unlock>:
 800511c:	4801      	ldr	r0, [pc, #4]	@ (8005124 <__malloc_unlock+0x8>)
 800511e:	f7ff bf09 	b.w	8004f34 <__retarget_lock_release_recursive>
 8005122:	bf00      	nop
 8005124:	20000730 	.word	0x20000730

08005128 <__sfputc_r>:
 8005128:	6893      	ldr	r3, [r2, #8]
 800512a:	3b01      	subs	r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	b410      	push	{r4}
 8005130:	6093      	str	r3, [r2, #8]
 8005132:	da08      	bge.n	8005146 <__sfputc_r+0x1e>
 8005134:	6994      	ldr	r4, [r2, #24]
 8005136:	42a3      	cmp	r3, r4
 8005138:	db01      	blt.n	800513e <__sfputc_r+0x16>
 800513a:	290a      	cmp	r1, #10
 800513c:	d103      	bne.n	8005146 <__sfputc_r+0x1e>
 800513e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005142:	f000 bb6d 	b.w	8005820 <__swbuf_r>
 8005146:	6813      	ldr	r3, [r2, #0]
 8005148:	1c58      	adds	r0, r3, #1
 800514a:	6010      	str	r0, [r2, #0]
 800514c:	7019      	strb	r1, [r3, #0]
 800514e:	4608      	mov	r0, r1
 8005150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005154:	4770      	bx	lr

08005156 <__sfputs_r>:
 8005156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005158:	4606      	mov	r6, r0
 800515a:	460f      	mov	r7, r1
 800515c:	4614      	mov	r4, r2
 800515e:	18d5      	adds	r5, r2, r3
 8005160:	42ac      	cmp	r4, r5
 8005162:	d101      	bne.n	8005168 <__sfputs_r+0x12>
 8005164:	2000      	movs	r0, #0
 8005166:	e007      	b.n	8005178 <__sfputs_r+0x22>
 8005168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800516c:	463a      	mov	r2, r7
 800516e:	4630      	mov	r0, r6
 8005170:	f7ff ffda 	bl	8005128 <__sfputc_r>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d1f3      	bne.n	8005160 <__sfputs_r+0xa>
 8005178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800517c <_vfiprintf_r>:
 800517c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005180:	460d      	mov	r5, r1
 8005182:	b09d      	sub	sp, #116	@ 0x74
 8005184:	4614      	mov	r4, r2
 8005186:	4698      	mov	r8, r3
 8005188:	4606      	mov	r6, r0
 800518a:	b118      	cbz	r0, 8005194 <_vfiprintf_r+0x18>
 800518c:	6a03      	ldr	r3, [r0, #32]
 800518e:	b90b      	cbnz	r3, 8005194 <_vfiprintf_r+0x18>
 8005190:	f7ff fdca 	bl	8004d28 <__sinit>
 8005194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005196:	07d9      	lsls	r1, r3, #31
 8005198:	d405      	bmi.n	80051a6 <_vfiprintf_r+0x2a>
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	059a      	lsls	r2, r3, #22
 800519e:	d402      	bmi.n	80051a6 <_vfiprintf_r+0x2a>
 80051a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051a2:	f7ff fec6 	bl	8004f32 <__retarget_lock_acquire_recursive>
 80051a6:	89ab      	ldrh	r3, [r5, #12]
 80051a8:	071b      	lsls	r3, r3, #28
 80051aa:	d501      	bpl.n	80051b0 <_vfiprintf_r+0x34>
 80051ac:	692b      	ldr	r3, [r5, #16]
 80051ae:	b99b      	cbnz	r3, 80051d8 <_vfiprintf_r+0x5c>
 80051b0:	4629      	mov	r1, r5
 80051b2:	4630      	mov	r0, r6
 80051b4:	f000 fb72 	bl	800589c <__swsetup_r>
 80051b8:	b170      	cbz	r0, 80051d8 <_vfiprintf_r+0x5c>
 80051ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051bc:	07dc      	lsls	r4, r3, #31
 80051be:	d504      	bpl.n	80051ca <_vfiprintf_r+0x4e>
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051c4:	b01d      	add	sp, #116	@ 0x74
 80051c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ca:	89ab      	ldrh	r3, [r5, #12]
 80051cc:	0598      	lsls	r0, r3, #22
 80051ce:	d4f7      	bmi.n	80051c0 <_vfiprintf_r+0x44>
 80051d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051d2:	f7ff feaf 	bl	8004f34 <__retarget_lock_release_recursive>
 80051d6:	e7f3      	b.n	80051c0 <_vfiprintf_r+0x44>
 80051d8:	2300      	movs	r3, #0
 80051da:	9309      	str	r3, [sp, #36]	@ 0x24
 80051dc:	2320      	movs	r3, #32
 80051de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051e6:	2330      	movs	r3, #48	@ 0x30
 80051e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005398 <_vfiprintf_r+0x21c>
 80051ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051f0:	f04f 0901 	mov.w	r9, #1
 80051f4:	4623      	mov	r3, r4
 80051f6:	469a      	mov	sl, r3
 80051f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051fc:	b10a      	cbz	r2, 8005202 <_vfiprintf_r+0x86>
 80051fe:	2a25      	cmp	r2, #37	@ 0x25
 8005200:	d1f9      	bne.n	80051f6 <_vfiprintf_r+0x7a>
 8005202:	ebba 0b04 	subs.w	fp, sl, r4
 8005206:	d00b      	beq.n	8005220 <_vfiprintf_r+0xa4>
 8005208:	465b      	mov	r3, fp
 800520a:	4622      	mov	r2, r4
 800520c:	4629      	mov	r1, r5
 800520e:	4630      	mov	r0, r6
 8005210:	f7ff ffa1 	bl	8005156 <__sfputs_r>
 8005214:	3001      	adds	r0, #1
 8005216:	f000 80a7 	beq.w	8005368 <_vfiprintf_r+0x1ec>
 800521a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800521c:	445a      	add	r2, fp
 800521e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005220:	f89a 3000 	ldrb.w	r3, [sl]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 809f 	beq.w	8005368 <_vfiprintf_r+0x1ec>
 800522a:	2300      	movs	r3, #0
 800522c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005234:	f10a 0a01 	add.w	sl, sl, #1
 8005238:	9304      	str	r3, [sp, #16]
 800523a:	9307      	str	r3, [sp, #28]
 800523c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005240:	931a      	str	r3, [sp, #104]	@ 0x68
 8005242:	4654      	mov	r4, sl
 8005244:	2205      	movs	r2, #5
 8005246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524a:	4853      	ldr	r0, [pc, #332]	@ (8005398 <_vfiprintf_r+0x21c>)
 800524c:	f7fa ffe8 	bl	8000220 <memchr>
 8005250:	9a04      	ldr	r2, [sp, #16]
 8005252:	b9d8      	cbnz	r0, 800528c <_vfiprintf_r+0x110>
 8005254:	06d1      	lsls	r1, r2, #27
 8005256:	bf44      	itt	mi
 8005258:	2320      	movmi	r3, #32
 800525a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800525e:	0713      	lsls	r3, r2, #28
 8005260:	bf44      	itt	mi
 8005262:	232b      	movmi	r3, #43	@ 0x2b
 8005264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005268:	f89a 3000 	ldrb.w	r3, [sl]
 800526c:	2b2a      	cmp	r3, #42	@ 0x2a
 800526e:	d015      	beq.n	800529c <_vfiprintf_r+0x120>
 8005270:	9a07      	ldr	r2, [sp, #28]
 8005272:	4654      	mov	r4, sl
 8005274:	2000      	movs	r0, #0
 8005276:	f04f 0c0a 	mov.w	ip, #10
 800527a:	4621      	mov	r1, r4
 800527c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005280:	3b30      	subs	r3, #48	@ 0x30
 8005282:	2b09      	cmp	r3, #9
 8005284:	d94b      	bls.n	800531e <_vfiprintf_r+0x1a2>
 8005286:	b1b0      	cbz	r0, 80052b6 <_vfiprintf_r+0x13a>
 8005288:	9207      	str	r2, [sp, #28]
 800528a:	e014      	b.n	80052b6 <_vfiprintf_r+0x13a>
 800528c:	eba0 0308 	sub.w	r3, r0, r8
 8005290:	fa09 f303 	lsl.w	r3, r9, r3
 8005294:	4313      	orrs	r3, r2
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	46a2      	mov	sl, r4
 800529a:	e7d2      	b.n	8005242 <_vfiprintf_r+0xc6>
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	1d19      	adds	r1, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	9103      	str	r1, [sp, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bfbb      	ittet	lt
 80052a8:	425b      	neglt	r3, r3
 80052aa:	f042 0202 	orrlt.w	r2, r2, #2
 80052ae:	9307      	strge	r3, [sp, #28]
 80052b0:	9307      	strlt	r3, [sp, #28]
 80052b2:	bfb8      	it	lt
 80052b4:	9204      	strlt	r2, [sp, #16]
 80052b6:	7823      	ldrb	r3, [r4, #0]
 80052b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80052ba:	d10a      	bne.n	80052d2 <_vfiprintf_r+0x156>
 80052bc:	7863      	ldrb	r3, [r4, #1]
 80052be:	2b2a      	cmp	r3, #42	@ 0x2a
 80052c0:	d132      	bne.n	8005328 <_vfiprintf_r+0x1ac>
 80052c2:	9b03      	ldr	r3, [sp, #12]
 80052c4:	1d1a      	adds	r2, r3, #4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	9203      	str	r2, [sp, #12]
 80052ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052ce:	3402      	adds	r4, #2
 80052d0:	9305      	str	r3, [sp, #20]
 80052d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80053a8 <_vfiprintf_r+0x22c>
 80052d6:	7821      	ldrb	r1, [r4, #0]
 80052d8:	2203      	movs	r2, #3
 80052da:	4650      	mov	r0, sl
 80052dc:	f7fa ffa0 	bl	8000220 <memchr>
 80052e0:	b138      	cbz	r0, 80052f2 <_vfiprintf_r+0x176>
 80052e2:	9b04      	ldr	r3, [sp, #16]
 80052e4:	eba0 000a 	sub.w	r0, r0, sl
 80052e8:	2240      	movs	r2, #64	@ 0x40
 80052ea:	4082      	lsls	r2, r0
 80052ec:	4313      	orrs	r3, r2
 80052ee:	3401      	adds	r4, #1
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f6:	4829      	ldr	r0, [pc, #164]	@ (800539c <_vfiprintf_r+0x220>)
 80052f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052fc:	2206      	movs	r2, #6
 80052fe:	f7fa ff8f 	bl	8000220 <memchr>
 8005302:	2800      	cmp	r0, #0
 8005304:	d03f      	beq.n	8005386 <_vfiprintf_r+0x20a>
 8005306:	4b26      	ldr	r3, [pc, #152]	@ (80053a0 <_vfiprintf_r+0x224>)
 8005308:	bb1b      	cbnz	r3, 8005352 <_vfiprintf_r+0x1d6>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	3307      	adds	r3, #7
 800530e:	f023 0307 	bic.w	r3, r3, #7
 8005312:	3308      	adds	r3, #8
 8005314:	9303      	str	r3, [sp, #12]
 8005316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005318:	443b      	add	r3, r7
 800531a:	9309      	str	r3, [sp, #36]	@ 0x24
 800531c:	e76a      	b.n	80051f4 <_vfiprintf_r+0x78>
 800531e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005322:	460c      	mov	r4, r1
 8005324:	2001      	movs	r0, #1
 8005326:	e7a8      	b.n	800527a <_vfiprintf_r+0xfe>
 8005328:	2300      	movs	r3, #0
 800532a:	3401      	adds	r4, #1
 800532c:	9305      	str	r3, [sp, #20]
 800532e:	4619      	mov	r1, r3
 8005330:	f04f 0c0a 	mov.w	ip, #10
 8005334:	4620      	mov	r0, r4
 8005336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800533a:	3a30      	subs	r2, #48	@ 0x30
 800533c:	2a09      	cmp	r2, #9
 800533e:	d903      	bls.n	8005348 <_vfiprintf_r+0x1cc>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0c6      	beq.n	80052d2 <_vfiprintf_r+0x156>
 8005344:	9105      	str	r1, [sp, #20]
 8005346:	e7c4      	b.n	80052d2 <_vfiprintf_r+0x156>
 8005348:	fb0c 2101 	mla	r1, ip, r1, r2
 800534c:	4604      	mov	r4, r0
 800534e:	2301      	movs	r3, #1
 8005350:	e7f0      	b.n	8005334 <_vfiprintf_r+0x1b8>
 8005352:	ab03      	add	r3, sp, #12
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	462a      	mov	r2, r5
 8005358:	4b12      	ldr	r3, [pc, #72]	@ (80053a4 <_vfiprintf_r+0x228>)
 800535a:	a904      	add	r1, sp, #16
 800535c:	4630      	mov	r0, r6
 800535e:	f3af 8000 	nop.w
 8005362:	4607      	mov	r7, r0
 8005364:	1c78      	adds	r0, r7, #1
 8005366:	d1d6      	bne.n	8005316 <_vfiprintf_r+0x19a>
 8005368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800536a:	07d9      	lsls	r1, r3, #31
 800536c:	d405      	bmi.n	800537a <_vfiprintf_r+0x1fe>
 800536e:	89ab      	ldrh	r3, [r5, #12]
 8005370:	059a      	lsls	r2, r3, #22
 8005372:	d402      	bmi.n	800537a <_vfiprintf_r+0x1fe>
 8005374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005376:	f7ff fddd 	bl	8004f34 <__retarget_lock_release_recursive>
 800537a:	89ab      	ldrh	r3, [r5, #12]
 800537c:	065b      	lsls	r3, r3, #25
 800537e:	f53f af1f 	bmi.w	80051c0 <_vfiprintf_r+0x44>
 8005382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005384:	e71e      	b.n	80051c4 <_vfiprintf_r+0x48>
 8005386:	ab03      	add	r3, sp, #12
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	462a      	mov	r2, r5
 800538c:	4b05      	ldr	r3, [pc, #20]	@ (80053a4 <_vfiprintf_r+0x228>)
 800538e:	a904      	add	r1, sp, #16
 8005390:	4630      	mov	r0, r6
 8005392:	f000 f879 	bl	8005488 <_printf_i>
 8005396:	e7e4      	b.n	8005362 <_vfiprintf_r+0x1e6>
 8005398:	08005afc 	.word	0x08005afc
 800539c:	08005b06 	.word	0x08005b06
 80053a0:	00000000 	.word	0x00000000
 80053a4:	08005157 	.word	0x08005157
 80053a8:	08005b02 	.word	0x08005b02

080053ac <_printf_common>:
 80053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	4616      	mov	r6, r2
 80053b2:	4698      	mov	r8, r3
 80053b4:	688a      	ldr	r2, [r1, #8]
 80053b6:	690b      	ldr	r3, [r1, #16]
 80053b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053bc:	4293      	cmp	r3, r2
 80053be:	bfb8      	it	lt
 80053c0:	4613      	movlt	r3, r2
 80053c2:	6033      	str	r3, [r6, #0]
 80053c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053c8:	4607      	mov	r7, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	b10a      	cbz	r2, 80053d2 <_printf_common+0x26>
 80053ce:	3301      	adds	r3, #1
 80053d0:	6033      	str	r3, [r6, #0]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	0699      	lsls	r1, r3, #26
 80053d6:	bf42      	ittt	mi
 80053d8:	6833      	ldrmi	r3, [r6, #0]
 80053da:	3302      	addmi	r3, #2
 80053dc:	6033      	strmi	r3, [r6, #0]
 80053de:	6825      	ldr	r5, [r4, #0]
 80053e0:	f015 0506 	ands.w	r5, r5, #6
 80053e4:	d106      	bne.n	80053f4 <_printf_common+0x48>
 80053e6:	f104 0a19 	add.w	sl, r4, #25
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	6832      	ldr	r2, [r6, #0]
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	42ab      	cmp	r3, r5
 80053f2:	dc26      	bgt.n	8005442 <_printf_common+0x96>
 80053f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053f8:	6822      	ldr	r2, [r4, #0]
 80053fa:	3b00      	subs	r3, #0
 80053fc:	bf18      	it	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	0692      	lsls	r2, r2, #26
 8005402:	d42b      	bmi.n	800545c <_printf_common+0xb0>
 8005404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005408:	4641      	mov	r1, r8
 800540a:	4638      	mov	r0, r7
 800540c:	47c8      	blx	r9
 800540e:	3001      	adds	r0, #1
 8005410:	d01e      	beq.n	8005450 <_printf_common+0xa4>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	6922      	ldr	r2, [r4, #16]
 8005416:	f003 0306 	and.w	r3, r3, #6
 800541a:	2b04      	cmp	r3, #4
 800541c:	bf02      	ittt	eq
 800541e:	68e5      	ldreq	r5, [r4, #12]
 8005420:	6833      	ldreq	r3, [r6, #0]
 8005422:	1aed      	subeq	r5, r5, r3
 8005424:	68a3      	ldr	r3, [r4, #8]
 8005426:	bf0c      	ite	eq
 8005428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800542c:	2500      	movne	r5, #0
 800542e:	4293      	cmp	r3, r2
 8005430:	bfc4      	itt	gt
 8005432:	1a9b      	subgt	r3, r3, r2
 8005434:	18ed      	addgt	r5, r5, r3
 8005436:	2600      	movs	r6, #0
 8005438:	341a      	adds	r4, #26
 800543a:	42b5      	cmp	r5, r6
 800543c:	d11a      	bne.n	8005474 <_printf_common+0xc8>
 800543e:	2000      	movs	r0, #0
 8005440:	e008      	b.n	8005454 <_printf_common+0xa8>
 8005442:	2301      	movs	r3, #1
 8005444:	4652      	mov	r2, sl
 8005446:	4641      	mov	r1, r8
 8005448:	4638      	mov	r0, r7
 800544a:	47c8      	blx	r9
 800544c:	3001      	adds	r0, #1
 800544e:	d103      	bne.n	8005458 <_printf_common+0xac>
 8005450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005458:	3501      	adds	r5, #1
 800545a:	e7c6      	b.n	80053ea <_printf_common+0x3e>
 800545c:	18e1      	adds	r1, r4, r3
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	2030      	movs	r0, #48	@ 0x30
 8005462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005466:	4422      	add	r2, r4
 8005468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800546c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005470:	3302      	adds	r3, #2
 8005472:	e7c7      	b.n	8005404 <_printf_common+0x58>
 8005474:	2301      	movs	r3, #1
 8005476:	4622      	mov	r2, r4
 8005478:	4641      	mov	r1, r8
 800547a:	4638      	mov	r0, r7
 800547c:	47c8      	blx	r9
 800547e:	3001      	adds	r0, #1
 8005480:	d0e6      	beq.n	8005450 <_printf_common+0xa4>
 8005482:	3601      	adds	r6, #1
 8005484:	e7d9      	b.n	800543a <_printf_common+0x8e>
	...

08005488 <_printf_i>:
 8005488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	7e0f      	ldrb	r7, [r1, #24]
 800548e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005490:	2f78      	cmp	r7, #120	@ 0x78
 8005492:	4691      	mov	r9, r2
 8005494:	4680      	mov	r8, r0
 8005496:	460c      	mov	r4, r1
 8005498:	469a      	mov	sl, r3
 800549a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800549e:	d807      	bhi.n	80054b0 <_printf_i+0x28>
 80054a0:	2f62      	cmp	r7, #98	@ 0x62
 80054a2:	d80a      	bhi.n	80054ba <_printf_i+0x32>
 80054a4:	2f00      	cmp	r7, #0
 80054a6:	f000 80d2 	beq.w	800564e <_printf_i+0x1c6>
 80054aa:	2f58      	cmp	r7, #88	@ 0x58
 80054ac:	f000 80b9 	beq.w	8005622 <_printf_i+0x19a>
 80054b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054b8:	e03a      	b.n	8005530 <_printf_i+0xa8>
 80054ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054be:	2b15      	cmp	r3, #21
 80054c0:	d8f6      	bhi.n	80054b0 <_printf_i+0x28>
 80054c2:	a101      	add	r1, pc, #4	@ (adr r1, 80054c8 <_printf_i+0x40>)
 80054c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c8:	08005521 	.word	0x08005521
 80054cc:	08005535 	.word	0x08005535
 80054d0:	080054b1 	.word	0x080054b1
 80054d4:	080054b1 	.word	0x080054b1
 80054d8:	080054b1 	.word	0x080054b1
 80054dc:	080054b1 	.word	0x080054b1
 80054e0:	08005535 	.word	0x08005535
 80054e4:	080054b1 	.word	0x080054b1
 80054e8:	080054b1 	.word	0x080054b1
 80054ec:	080054b1 	.word	0x080054b1
 80054f0:	080054b1 	.word	0x080054b1
 80054f4:	08005635 	.word	0x08005635
 80054f8:	0800555f 	.word	0x0800555f
 80054fc:	080055ef 	.word	0x080055ef
 8005500:	080054b1 	.word	0x080054b1
 8005504:	080054b1 	.word	0x080054b1
 8005508:	08005657 	.word	0x08005657
 800550c:	080054b1 	.word	0x080054b1
 8005510:	0800555f 	.word	0x0800555f
 8005514:	080054b1 	.word	0x080054b1
 8005518:	080054b1 	.word	0x080054b1
 800551c:	080055f7 	.word	0x080055f7
 8005520:	6833      	ldr	r3, [r6, #0]
 8005522:	1d1a      	adds	r2, r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6032      	str	r2, [r6, #0]
 8005528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800552c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005530:	2301      	movs	r3, #1
 8005532:	e09d      	b.n	8005670 <_printf_i+0x1e8>
 8005534:	6833      	ldr	r3, [r6, #0]
 8005536:	6820      	ldr	r0, [r4, #0]
 8005538:	1d19      	adds	r1, r3, #4
 800553a:	6031      	str	r1, [r6, #0]
 800553c:	0606      	lsls	r6, r0, #24
 800553e:	d501      	bpl.n	8005544 <_printf_i+0xbc>
 8005540:	681d      	ldr	r5, [r3, #0]
 8005542:	e003      	b.n	800554c <_printf_i+0xc4>
 8005544:	0645      	lsls	r5, r0, #25
 8005546:	d5fb      	bpl.n	8005540 <_printf_i+0xb8>
 8005548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800554c:	2d00      	cmp	r5, #0
 800554e:	da03      	bge.n	8005558 <_printf_i+0xd0>
 8005550:	232d      	movs	r3, #45	@ 0x2d
 8005552:	426d      	negs	r5, r5
 8005554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005558:	4859      	ldr	r0, [pc, #356]	@ (80056c0 <_printf_i+0x238>)
 800555a:	230a      	movs	r3, #10
 800555c:	e011      	b.n	8005582 <_printf_i+0xfa>
 800555e:	6821      	ldr	r1, [r4, #0]
 8005560:	6833      	ldr	r3, [r6, #0]
 8005562:	0608      	lsls	r0, r1, #24
 8005564:	f853 5b04 	ldr.w	r5, [r3], #4
 8005568:	d402      	bmi.n	8005570 <_printf_i+0xe8>
 800556a:	0649      	lsls	r1, r1, #25
 800556c:	bf48      	it	mi
 800556e:	b2ad      	uxthmi	r5, r5
 8005570:	2f6f      	cmp	r7, #111	@ 0x6f
 8005572:	4853      	ldr	r0, [pc, #332]	@ (80056c0 <_printf_i+0x238>)
 8005574:	6033      	str	r3, [r6, #0]
 8005576:	bf14      	ite	ne
 8005578:	230a      	movne	r3, #10
 800557a:	2308      	moveq	r3, #8
 800557c:	2100      	movs	r1, #0
 800557e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005582:	6866      	ldr	r6, [r4, #4]
 8005584:	60a6      	str	r6, [r4, #8]
 8005586:	2e00      	cmp	r6, #0
 8005588:	bfa2      	ittt	ge
 800558a:	6821      	ldrge	r1, [r4, #0]
 800558c:	f021 0104 	bicge.w	r1, r1, #4
 8005590:	6021      	strge	r1, [r4, #0]
 8005592:	b90d      	cbnz	r5, 8005598 <_printf_i+0x110>
 8005594:	2e00      	cmp	r6, #0
 8005596:	d04b      	beq.n	8005630 <_printf_i+0x1a8>
 8005598:	4616      	mov	r6, r2
 800559a:	fbb5 f1f3 	udiv	r1, r5, r3
 800559e:	fb03 5711 	mls	r7, r3, r1, r5
 80055a2:	5dc7      	ldrb	r7, [r0, r7]
 80055a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055a8:	462f      	mov	r7, r5
 80055aa:	42bb      	cmp	r3, r7
 80055ac:	460d      	mov	r5, r1
 80055ae:	d9f4      	bls.n	800559a <_printf_i+0x112>
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d10b      	bne.n	80055cc <_printf_i+0x144>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	07df      	lsls	r7, r3, #31
 80055b8:	d508      	bpl.n	80055cc <_printf_i+0x144>
 80055ba:	6923      	ldr	r3, [r4, #16]
 80055bc:	6861      	ldr	r1, [r4, #4]
 80055be:	4299      	cmp	r1, r3
 80055c0:	bfde      	ittt	le
 80055c2:	2330      	movle	r3, #48	@ 0x30
 80055c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055c8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80055cc:	1b92      	subs	r2, r2, r6
 80055ce:	6122      	str	r2, [r4, #16]
 80055d0:	f8cd a000 	str.w	sl, [sp]
 80055d4:	464b      	mov	r3, r9
 80055d6:	aa03      	add	r2, sp, #12
 80055d8:	4621      	mov	r1, r4
 80055da:	4640      	mov	r0, r8
 80055dc:	f7ff fee6 	bl	80053ac <_printf_common>
 80055e0:	3001      	adds	r0, #1
 80055e2:	d14a      	bne.n	800567a <_printf_i+0x1f2>
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055e8:	b004      	add	sp, #16
 80055ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	f043 0320 	orr.w	r3, r3, #32
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	4833      	ldr	r0, [pc, #204]	@ (80056c4 <_printf_i+0x23c>)
 80055f8:	2778      	movs	r7, #120	@ 0x78
 80055fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	6831      	ldr	r1, [r6, #0]
 8005602:	061f      	lsls	r7, r3, #24
 8005604:	f851 5b04 	ldr.w	r5, [r1], #4
 8005608:	d402      	bmi.n	8005610 <_printf_i+0x188>
 800560a:	065f      	lsls	r7, r3, #25
 800560c:	bf48      	it	mi
 800560e:	b2ad      	uxthmi	r5, r5
 8005610:	6031      	str	r1, [r6, #0]
 8005612:	07d9      	lsls	r1, r3, #31
 8005614:	bf44      	itt	mi
 8005616:	f043 0320 	orrmi.w	r3, r3, #32
 800561a:	6023      	strmi	r3, [r4, #0]
 800561c:	b11d      	cbz	r5, 8005626 <_printf_i+0x19e>
 800561e:	2310      	movs	r3, #16
 8005620:	e7ac      	b.n	800557c <_printf_i+0xf4>
 8005622:	4827      	ldr	r0, [pc, #156]	@ (80056c0 <_printf_i+0x238>)
 8005624:	e7e9      	b.n	80055fa <_printf_i+0x172>
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	f023 0320 	bic.w	r3, r3, #32
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	e7f6      	b.n	800561e <_printf_i+0x196>
 8005630:	4616      	mov	r6, r2
 8005632:	e7bd      	b.n	80055b0 <_printf_i+0x128>
 8005634:	6833      	ldr	r3, [r6, #0]
 8005636:	6825      	ldr	r5, [r4, #0]
 8005638:	6961      	ldr	r1, [r4, #20]
 800563a:	1d18      	adds	r0, r3, #4
 800563c:	6030      	str	r0, [r6, #0]
 800563e:	062e      	lsls	r6, r5, #24
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	d501      	bpl.n	8005648 <_printf_i+0x1c0>
 8005644:	6019      	str	r1, [r3, #0]
 8005646:	e002      	b.n	800564e <_printf_i+0x1c6>
 8005648:	0668      	lsls	r0, r5, #25
 800564a:	d5fb      	bpl.n	8005644 <_printf_i+0x1bc>
 800564c:	8019      	strh	r1, [r3, #0]
 800564e:	2300      	movs	r3, #0
 8005650:	6123      	str	r3, [r4, #16]
 8005652:	4616      	mov	r6, r2
 8005654:	e7bc      	b.n	80055d0 <_printf_i+0x148>
 8005656:	6833      	ldr	r3, [r6, #0]
 8005658:	1d1a      	adds	r2, r3, #4
 800565a:	6032      	str	r2, [r6, #0]
 800565c:	681e      	ldr	r6, [r3, #0]
 800565e:	6862      	ldr	r2, [r4, #4]
 8005660:	2100      	movs	r1, #0
 8005662:	4630      	mov	r0, r6
 8005664:	f7fa fddc 	bl	8000220 <memchr>
 8005668:	b108      	cbz	r0, 800566e <_printf_i+0x1e6>
 800566a:	1b80      	subs	r0, r0, r6
 800566c:	6060      	str	r0, [r4, #4]
 800566e:	6863      	ldr	r3, [r4, #4]
 8005670:	6123      	str	r3, [r4, #16]
 8005672:	2300      	movs	r3, #0
 8005674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005678:	e7aa      	b.n	80055d0 <_printf_i+0x148>
 800567a:	6923      	ldr	r3, [r4, #16]
 800567c:	4632      	mov	r2, r6
 800567e:	4649      	mov	r1, r9
 8005680:	4640      	mov	r0, r8
 8005682:	47d0      	blx	sl
 8005684:	3001      	adds	r0, #1
 8005686:	d0ad      	beq.n	80055e4 <_printf_i+0x15c>
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	079b      	lsls	r3, r3, #30
 800568c:	d413      	bmi.n	80056b6 <_printf_i+0x22e>
 800568e:	68e0      	ldr	r0, [r4, #12]
 8005690:	9b03      	ldr	r3, [sp, #12]
 8005692:	4298      	cmp	r0, r3
 8005694:	bfb8      	it	lt
 8005696:	4618      	movlt	r0, r3
 8005698:	e7a6      	b.n	80055e8 <_printf_i+0x160>
 800569a:	2301      	movs	r3, #1
 800569c:	4632      	mov	r2, r6
 800569e:	4649      	mov	r1, r9
 80056a0:	4640      	mov	r0, r8
 80056a2:	47d0      	blx	sl
 80056a4:	3001      	adds	r0, #1
 80056a6:	d09d      	beq.n	80055e4 <_printf_i+0x15c>
 80056a8:	3501      	adds	r5, #1
 80056aa:	68e3      	ldr	r3, [r4, #12]
 80056ac:	9903      	ldr	r1, [sp, #12]
 80056ae:	1a5b      	subs	r3, r3, r1
 80056b0:	42ab      	cmp	r3, r5
 80056b2:	dcf2      	bgt.n	800569a <_printf_i+0x212>
 80056b4:	e7eb      	b.n	800568e <_printf_i+0x206>
 80056b6:	2500      	movs	r5, #0
 80056b8:	f104 0619 	add.w	r6, r4, #25
 80056bc:	e7f5      	b.n	80056aa <_printf_i+0x222>
 80056be:	bf00      	nop
 80056c0:	08005b0d 	.word	0x08005b0d
 80056c4:	08005b1e 	.word	0x08005b1e

080056c8 <__sflush_r>:
 80056c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d0:	0716      	lsls	r6, r2, #28
 80056d2:	4605      	mov	r5, r0
 80056d4:	460c      	mov	r4, r1
 80056d6:	d454      	bmi.n	8005782 <__sflush_r+0xba>
 80056d8:	684b      	ldr	r3, [r1, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	dc02      	bgt.n	80056e4 <__sflush_r+0x1c>
 80056de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	dd48      	ble.n	8005776 <__sflush_r+0xae>
 80056e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056e6:	2e00      	cmp	r6, #0
 80056e8:	d045      	beq.n	8005776 <__sflush_r+0xae>
 80056ea:	2300      	movs	r3, #0
 80056ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80056f0:	682f      	ldr	r7, [r5, #0]
 80056f2:	6a21      	ldr	r1, [r4, #32]
 80056f4:	602b      	str	r3, [r5, #0]
 80056f6:	d030      	beq.n	800575a <__sflush_r+0x92>
 80056f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056fa:	89a3      	ldrh	r3, [r4, #12]
 80056fc:	0759      	lsls	r1, r3, #29
 80056fe:	d505      	bpl.n	800570c <__sflush_r+0x44>
 8005700:	6863      	ldr	r3, [r4, #4]
 8005702:	1ad2      	subs	r2, r2, r3
 8005704:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005706:	b10b      	cbz	r3, 800570c <__sflush_r+0x44>
 8005708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800570a:	1ad2      	subs	r2, r2, r3
 800570c:	2300      	movs	r3, #0
 800570e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005710:	6a21      	ldr	r1, [r4, #32]
 8005712:	4628      	mov	r0, r5
 8005714:	47b0      	blx	r6
 8005716:	1c43      	adds	r3, r0, #1
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	d106      	bne.n	800572a <__sflush_r+0x62>
 800571c:	6829      	ldr	r1, [r5, #0]
 800571e:	291d      	cmp	r1, #29
 8005720:	d82b      	bhi.n	800577a <__sflush_r+0xb2>
 8005722:	4a2a      	ldr	r2, [pc, #168]	@ (80057cc <__sflush_r+0x104>)
 8005724:	410a      	asrs	r2, r1
 8005726:	07d6      	lsls	r6, r2, #31
 8005728:	d427      	bmi.n	800577a <__sflush_r+0xb2>
 800572a:	2200      	movs	r2, #0
 800572c:	6062      	str	r2, [r4, #4]
 800572e:	04d9      	lsls	r1, r3, #19
 8005730:	6922      	ldr	r2, [r4, #16]
 8005732:	6022      	str	r2, [r4, #0]
 8005734:	d504      	bpl.n	8005740 <__sflush_r+0x78>
 8005736:	1c42      	adds	r2, r0, #1
 8005738:	d101      	bne.n	800573e <__sflush_r+0x76>
 800573a:	682b      	ldr	r3, [r5, #0]
 800573c:	b903      	cbnz	r3, 8005740 <__sflush_r+0x78>
 800573e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005742:	602f      	str	r7, [r5, #0]
 8005744:	b1b9      	cbz	r1, 8005776 <__sflush_r+0xae>
 8005746:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800574a:	4299      	cmp	r1, r3
 800574c:	d002      	beq.n	8005754 <__sflush_r+0x8c>
 800574e:	4628      	mov	r0, r5
 8005750:	f7ff fbf2 	bl	8004f38 <_free_r>
 8005754:	2300      	movs	r3, #0
 8005756:	6363      	str	r3, [r4, #52]	@ 0x34
 8005758:	e00d      	b.n	8005776 <__sflush_r+0xae>
 800575a:	2301      	movs	r3, #1
 800575c:	4628      	mov	r0, r5
 800575e:	47b0      	blx	r6
 8005760:	4602      	mov	r2, r0
 8005762:	1c50      	adds	r0, r2, #1
 8005764:	d1c9      	bne.n	80056fa <__sflush_r+0x32>
 8005766:	682b      	ldr	r3, [r5, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0c6      	beq.n	80056fa <__sflush_r+0x32>
 800576c:	2b1d      	cmp	r3, #29
 800576e:	d001      	beq.n	8005774 <__sflush_r+0xac>
 8005770:	2b16      	cmp	r3, #22
 8005772:	d11e      	bne.n	80057b2 <__sflush_r+0xea>
 8005774:	602f      	str	r7, [r5, #0]
 8005776:	2000      	movs	r0, #0
 8005778:	e022      	b.n	80057c0 <__sflush_r+0xf8>
 800577a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800577e:	b21b      	sxth	r3, r3
 8005780:	e01b      	b.n	80057ba <__sflush_r+0xf2>
 8005782:	690f      	ldr	r7, [r1, #16]
 8005784:	2f00      	cmp	r7, #0
 8005786:	d0f6      	beq.n	8005776 <__sflush_r+0xae>
 8005788:	0793      	lsls	r3, r2, #30
 800578a:	680e      	ldr	r6, [r1, #0]
 800578c:	bf08      	it	eq
 800578e:	694b      	ldreq	r3, [r1, #20]
 8005790:	600f      	str	r7, [r1, #0]
 8005792:	bf18      	it	ne
 8005794:	2300      	movne	r3, #0
 8005796:	eba6 0807 	sub.w	r8, r6, r7
 800579a:	608b      	str	r3, [r1, #8]
 800579c:	f1b8 0f00 	cmp.w	r8, #0
 80057a0:	dde9      	ble.n	8005776 <__sflush_r+0xae>
 80057a2:	6a21      	ldr	r1, [r4, #32]
 80057a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80057a6:	4643      	mov	r3, r8
 80057a8:	463a      	mov	r2, r7
 80057aa:	4628      	mov	r0, r5
 80057ac:	47b0      	blx	r6
 80057ae:	2800      	cmp	r0, #0
 80057b0:	dc08      	bgt.n	80057c4 <__sflush_r+0xfc>
 80057b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ba:	81a3      	strh	r3, [r4, #12]
 80057bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c4:	4407      	add	r7, r0
 80057c6:	eba8 0800 	sub.w	r8, r8, r0
 80057ca:	e7e7      	b.n	800579c <__sflush_r+0xd4>
 80057cc:	dfbffffe 	.word	0xdfbffffe

080057d0 <_fflush_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	690b      	ldr	r3, [r1, #16]
 80057d4:	4605      	mov	r5, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	b913      	cbnz	r3, 80057e0 <_fflush_r+0x10>
 80057da:	2500      	movs	r5, #0
 80057dc:	4628      	mov	r0, r5
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	b118      	cbz	r0, 80057ea <_fflush_r+0x1a>
 80057e2:	6a03      	ldr	r3, [r0, #32]
 80057e4:	b90b      	cbnz	r3, 80057ea <_fflush_r+0x1a>
 80057e6:	f7ff fa9f 	bl	8004d28 <__sinit>
 80057ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f3      	beq.n	80057da <_fflush_r+0xa>
 80057f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057f4:	07d0      	lsls	r0, r2, #31
 80057f6:	d404      	bmi.n	8005802 <_fflush_r+0x32>
 80057f8:	0599      	lsls	r1, r3, #22
 80057fa:	d402      	bmi.n	8005802 <_fflush_r+0x32>
 80057fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057fe:	f7ff fb98 	bl	8004f32 <__retarget_lock_acquire_recursive>
 8005802:	4628      	mov	r0, r5
 8005804:	4621      	mov	r1, r4
 8005806:	f7ff ff5f 	bl	80056c8 <__sflush_r>
 800580a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800580c:	07da      	lsls	r2, r3, #31
 800580e:	4605      	mov	r5, r0
 8005810:	d4e4      	bmi.n	80057dc <_fflush_r+0xc>
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	059b      	lsls	r3, r3, #22
 8005816:	d4e1      	bmi.n	80057dc <_fflush_r+0xc>
 8005818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800581a:	f7ff fb8b 	bl	8004f34 <__retarget_lock_release_recursive>
 800581e:	e7dd      	b.n	80057dc <_fflush_r+0xc>

08005820 <__swbuf_r>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	460e      	mov	r6, r1
 8005824:	4614      	mov	r4, r2
 8005826:	4605      	mov	r5, r0
 8005828:	b118      	cbz	r0, 8005832 <__swbuf_r+0x12>
 800582a:	6a03      	ldr	r3, [r0, #32]
 800582c:	b90b      	cbnz	r3, 8005832 <__swbuf_r+0x12>
 800582e:	f7ff fa7b 	bl	8004d28 <__sinit>
 8005832:	69a3      	ldr	r3, [r4, #24]
 8005834:	60a3      	str	r3, [r4, #8]
 8005836:	89a3      	ldrh	r3, [r4, #12]
 8005838:	071a      	lsls	r2, r3, #28
 800583a:	d501      	bpl.n	8005840 <__swbuf_r+0x20>
 800583c:	6923      	ldr	r3, [r4, #16]
 800583e:	b943      	cbnz	r3, 8005852 <__swbuf_r+0x32>
 8005840:	4621      	mov	r1, r4
 8005842:	4628      	mov	r0, r5
 8005844:	f000 f82a 	bl	800589c <__swsetup_r>
 8005848:	b118      	cbz	r0, 8005852 <__swbuf_r+0x32>
 800584a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800584e:	4638      	mov	r0, r7
 8005850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	6922      	ldr	r2, [r4, #16]
 8005856:	1a98      	subs	r0, r3, r2
 8005858:	6963      	ldr	r3, [r4, #20]
 800585a:	b2f6      	uxtb	r6, r6
 800585c:	4283      	cmp	r3, r0
 800585e:	4637      	mov	r7, r6
 8005860:	dc05      	bgt.n	800586e <__swbuf_r+0x4e>
 8005862:	4621      	mov	r1, r4
 8005864:	4628      	mov	r0, r5
 8005866:	f7ff ffb3 	bl	80057d0 <_fflush_r>
 800586a:	2800      	cmp	r0, #0
 800586c:	d1ed      	bne.n	800584a <__swbuf_r+0x2a>
 800586e:	68a3      	ldr	r3, [r4, #8]
 8005870:	3b01      	subs	r3, #1
 8005872:	60a3      	str	r3, [r4, #8]
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	6022      	str	r2, [r4, #0]
 800587a:	701e      	strb	r6, [r3, #0]
 800587c:	6962      	ldr	r2, [r4, #20]
 800587e:	1c43      	adds	r3, r0, #1
 8005880:	429a      	cmp	r2, r3
 8005882:	d004      	beq.n	800588e <__swbuf_r+0x6e>
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	07db      	lsls	r3, r3, #31
 8005888:	d5e1      	bpl.n	800584e <__swbuf_r+0x2e>
 800588a:	2e0a      	cmp	r6, #10
 800588c:	d1df      	bne.n	800584e <__swbuf_r+0x2e>
 800588e:	4621      	mov	r1, r4
 8005890:	4628      	mov	r0, r5
 8005892:	f7ff ff9d 	bl	80057d0 <_fflush_r>
 8005896:	2800      	cmp	r0, #0
 8005898:	d0d9      	beq.n	800584e <__swbuf_r+0x2e>
 800589a:	e7d6      	b.n	800584a <__swbuf_r+0x2a>

0800589c <__swsetup_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4b29      	ldr	r3, [pc, #164]	@ (8005944 <__swsetup_r+0xa8>)
 80058a0:	4605      	mov	r5, r0
 80058a2:	6818      	ldr	r0, [r3, #0]
 80058a4:	460c      	mov	r4, r1
 80058a6:	b118      	cbz	r0, 80058b0 <__swsetup_r+0x14>
 80058a8:	6a03      	ldr	r3, [r0, #32]
 80058aa:	b90b      	cbnz	r3, 80058b0 <__swsetup_r+0x14>
 80058ac:	f7ff fa3c 	bl	8004d28 <__sinit>
 80058b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058b4:	0719      	lsls	r1, r3, #28
 80058b6:	d422      	bmi.n	80058fe <__swsetup_r+0x62>
 80058b8:	06da      	lsls	r2, r3, #27
 80058ba:	d407      	bmi.n	80058cc <__swsetup_r+0x30>
 80058bc:	2209      	movs	r2, #9
 80058be:	602a      	str	r2, [r5, #0]
 80058c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058c4:	81a3      	strh	r3, [r4, #12]
 80058c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058ca:	e033      	b.n	8005934 <__swsetup_r+0x98>
 80058cc:	0758      	lsls	r0, r3, #29
 80058ce:	d512      	bpl.n	80058f6 <__swsetup_r+0x5a>
 80058d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058d2:	b141      	cbz	r1, 80058e6 <__swsetup_r+0x4a>
 80058d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058d8:	4299      	cmp	r1, r3
 80058da:	d002      	beq.n	80058e2 <__swsetup_r+0x46>
 80058dc:	4628      	mov	r0, r5
 80058de:	f7ff fb2b 	bl	8004f38 <_free_r>
 80058e2:	2300      	movs	r3, #0
 80058e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	2300      	movs	r3, #0
 80058f0:	6063      	str	r3, [r4, #4]
 80058f2:	6923      	ldr	r3, [r4, #16]
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	f043 0308 	orr.w	r3, r3, #8
 80058fc:	81a3      	strh	r3, [r4, #12]
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	b94b      	cbnz	r3, 8005916 <__swsetup_r+0x7a>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800590c:	d003      	beq.n	8005916 <__swsetup_r+0x7a>
 800590e:	4621      	mov	r1, r4
 8005910:	4628      	mov	r0, r5
 8005912:	f000 f84f 	bl	80059b4 <__smakebuf_r>
 8005916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800591a:	f013 0201 	ands.w	r2, r3, #1
 800591e:	d00a      	beq.n	8005936 <__swsetup_r+0x9a>
 8005920:	2200      	movs	r2, #0
 8005922:	60a2      	str	r2, [r4, #8]
 8005924:	6962      	ldr	r2, [r4, #20]
 8005926:	4252      	negs	r2, r2
 8005928:	61a2      	str	r2, [r4, #24]
 800592a:	6922      	ldr	r2, [r4, #16]
 800592c:	b942      	cbnz	r2, 8005940 <__swsetup_r+0xa4>
 800592e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005932:	d1c5      	bne.n	80058c0 <__swsetup_r+0x24>
 8005934:	bd38      	pop	{r3, r4, r5, pc}
 8005936:	0799      	lsls	r1, r3, #30
 8005938:	bf58      	it	pl
 800593a:	6962      	ldrpl	r2, [r4, #20]
 800593c:	60a2      	str	r2, [r4, #8]
 800593e:	e7f4      	b.n	800592a <__swsetup_r+0x8e>
 8005940:	2000      	movs	r0, #0
 8005942:	e7f7      	b.n	8005934 <__swsetup_r+0x98>
 8005944:	20000018 	.word	0x20000018

08005948 <_sbrk_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	4d06      	ldr	r5, [pc, #24]	@ (8005964 <_sbrk_r+0x1c>)
 800594c:	2300      	movs	r3, #0
 800594e:	4604      	mov	r4, r0
 8005950:	4608      	mov	r0, r1
 8005952:	602b      	str	r3, [r5, #0]
 8005954:	f7fb fc7a 	bl	800124c <_sbrk>
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	d102      	bne.n	8005962 <_sbrk_r+0x1a>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	b103      	cbz	r3, 8005962 <_sbrk_r+0x1a>
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	2000072c 	.word	0x2000072c

08005968 <__swhatbuf_r>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	460c      	mov	r4, r1
 800596c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005970:	2900      	cmp	r1, #0
 8005972:	b096      	sub	sp, #88	@ 0x58
 8005974:	4615      	mov	r5, r2
 8005976:	461e      	mov	r6, r3
 8005978:	da0d      	bge.n	8005996 <__swhatbuf_r+0x2e>
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	bf14      	ite	ne
 8005986:	2340      	movne	r3, #64	@ 0x40
 8005988:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800598c:	2000      	movs	r0, #0
 800598e:	6031      	str	r1, [r6, #0]
 8005990:	602b      	str	r3, [r5, #0]
 8005992:	b016      	add	sp, #88	@ 0x58
 8005994:	bd70      	pop	{r4, r5, r6, pc}
 8005996:	466a      	mov	r2, sp
 8005998:	f000 f848 	bl	8005a2c <_fstat_r>
 800599c:	2800      	cmp	r0, #0
 800599e:	dbec      	blt.n	800597a <__swhatbuf_r+0x12>
 80059a0:	9901      	ldr	r1, [sp, #4]
 80059a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80059a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80059aa:	4259      	negs	r1, r3
 80059ac:	4159      	adcs	r1, r3
 80059ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059b2:	e7eb      	b.n	800598c <__swhatbuf_r+0x24>

080059b4 <__smakebuf_r>:
 80059b4:	898b      	ldrh	r3, [r1, #12]
 80059b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059b8:	079d      	lsls	r5, r3, #30
 80059ba:	4606      	mov	r6, r0
 80059bc:	460c      	mov	r4, r1
 80059be:	d507      	bpl.n	80059d0 <__smakebuf_r+0x1c>
 80059c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	6123      	str	r3, [r4, #16]
 80059c8:	2301      	movs	r3, #1
 80059ca:	6163      	str	r3, [r4, #20]
 80059cc:	b003      	add	sp, #12
 80059ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d0:	ab01      	add	r3, sp, #4
 80059d2:	466a      	mov	r2, sp
 80059d4:	f7ff ffc8 	bl	8005968 <__swhatbuf_r>
 80059d8:	9f00      	ldr	r7, [sp, #0]
 80059da:	4605      	mov	r5, r0
 80059dc:	4639      	mov	r1, r7
 80059de:	4630      	mov	r0, r6
 80059e0:	f7ff fb16 	bl	8005010 <_malloc_r>
 80059e4:	b948      	cbnz	r0, 80059fa <__smakebuf_r+0x46>
 80059e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ea:	059a      	lsls	r2, r3, #22
 80059ec:	d4ee      	bmi.n	80059cc <__smakebuf_r+0x18>
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	f043 0302 	orr.w	r3, r3, #2
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	e7e2      	b.n	80059c0 <__smakebuf_r+0xc>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	6020      	str	r0, [r4, #0]
 80059fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	9b01      	ldr	r3, [sp, #4]
 8005a06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a0a:	b15b      	cbz	r3, 8005a24 <__smakebuf_r+0x70>
 8005a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a10:	4630      	mov	r0, r6
 8005a12:	f000 f81d 	bl	8005a50 <_isatty_r>
 8005a16:	b128      	cbz	r0, 8005a24 <__smakebuf_r+0x70>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	431d      	orrs	r5, r3
 8005a28:	81a5      	strh	r5, [r4, #12]
 8005a2a:	e7cf      	b.n	80059cc <__smakebuf_r+0x18>

08005a2c <_fstat_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4d07      	ldr	r5, [pc, #28]	@ (8005a4c <_fstat_r+0x20>)
 8005a30:	2300      	movs	r3, #0
 8005a32:	4604      	mov	r4, r0
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	602b      	str	r3, [r5, #0]
 8005a3a:	f7fb fbde 	bl	80011fa <_fstat>
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	d102      	bne.n	8005a48 <_fstat_r+0x1c>
 8005a42:	682b      	ldr	r3, [r5, #0]
 8005a44:	b103      	cbz	r3, 8005a48 <_fstat_r+0x1c>
 8005a46:	6023      	str	r3, [r4, #0]
 8005a48:	bd38      	pop	{r3, r4, r5, pc}
 8005a4a:	bf00      	nop
 8005a4c:	2000072c 	.word	0x2000072c

08005a50 <_isatty_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d06      	ldr	r5, [pc, #24]	@ (8005a6c <_isatty_r+0x1c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fb fbdd 	bl	800121a <_isatty>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_isatty_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_isatty_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	2000072c 	.word	0x2000072c

08005a70 <_init>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	bf00      	nop
 8005a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a76:	bc08      	pop	{r3}
 8005a78:	469e      	mov	lr, r3
 8005a7a:	4770      	bx	lr

08005a7c <_fini>:
 8005a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7e:	bf00      	nop
 8005a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a82:	bc08      	pop	{r3}
 8005a84:	469e      	mov	lr, r3
 8005a86:	4770      	bx	lr
