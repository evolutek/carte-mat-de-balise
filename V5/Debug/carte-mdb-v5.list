
carte-mdb-v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a14  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005bf4  08005bf4  00006bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce4  08005ce4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005ce4  08005ce4  00006ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cec  08005cec  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cec  08005cec  00006cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cf0  08005cf0  00006cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005cf4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  20000068  08005d5c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  08005d5c  0000773c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ada6  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ec  00000000  00000000  00021e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  00025130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001248  00000000  00000000  000268c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fb1  00000000  00000000  00027b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a515  00000000  00000000  00049ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9f01  00000000  00000000  00063fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013decf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cd8  00000000  00000000  0013df14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00144bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005bdc 	.word	0x08005bdc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005bdc 	.word	0x08005bdc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_read>:
#include "main.h"

int _read(int file, char *ptr, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  (void)file;

  HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, 100);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <_read+0x24>)
 80005c6:	f003 fcb9 	bl	8003f3c <HAL_UART_Receive>

  return len;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000278 	.word	0x20000278

080005d8 <_write>:
int _write(int file, char *ptr, int len)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  (void)file;

  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 100);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	2364      	movs	r3, #100	@ 0x64
 80005ea:	68b9      	ldr	r1, [r7, #8]
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <_write+0x24>)
 80005ee:	f003 fc17 	bl	8003e20 <HAL_UART_Transmit>

  return len;
 80005f2:	687b      	ldr	r3, [r7, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000278 	.word	0x20000278

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	f5ad 5d20 	sub.w	sp, sp, #10240	@ 0x2800
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 ff46 	bl	800149a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f965 	bl	80008dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 fba9 	bl	8000d68 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000616:	f000 f9af 	bl	8000978 <MX_FDCAN2_Init>
  MX_TIM2_Init();
 800061a:	f000 fa31 	bl	8000a80 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800061e:	f000 fae3 	bl	8000be8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000622:	f000 fb2d 	bl	8000c80 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8000626:	f000 fb77 	bl	8000d18 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 800062a:	f000 f9eb 	bl	8000a04 <MX_SPI1_Init>
  MX_TIM3_Init();
 800062e:	f000 fa81 	bl	8000b34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LIDAR_PWM_GPIO_Port, LIDAR_PWM_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063c:	f001 fbfa 	bl	8001e34 <HAL_GPIO_WritePin>

  enum state_scan state_lidar = STANDBY;
 8000640:	2300      	movs	r3, #0
 8000642:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 8000646:	f102 0217 	add.w	r2, r2, #23
 800064a:	7013      	strb	r3, [r2, #0]
  descriptor desc_res = {0};
 800064c:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 8000650:	f103 030c 	add.w	r3, r3, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	f8c3 2003 	str.w	r2, [r3, #3]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (HAL_GPIO_ReadPin(AU_GPIO_Port, AU_Pin) != GPIO_PIN_RESET) {
 800065c:	2102      	movs	r1, #2
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f001 fbcf 	bl	8001e04 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0f7      	beq.n	800065c <main+0x5c>
		switch (state_lidar) {
 800066c:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 8000670:	f103 0317 	add.w	r3, r3, #23
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b04      	cmp	r3, #4
 8000678:	f200 80ee 	bhi.w	8000858 <main+0x258>
 800067c:	a201      	add	r2, pc, #4	@ (adr r2, 8000684 <main+0x84>)
 800067e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000682:	bf00      	nop
 8000684:	08000699 	.word	0x08000699
 8000688:	080006c9 	.word	0x080006c9
 800068c:	080006ef 	.word	0x080006ef
 8000690:	0800078d 	.word	0x0800078d
 8000694:	0800083d 	.word	0x0800083d
		case STANDBY:
			// Start Lidar rotation (PWM pin -> on)
			printf("on\n\r");
 8000698:	4883      	ldr	r0, [pc, #524]	@ (80008a8 <main+0x2a8>)
 800069a:	f004 fc31 	bl	8004f00 <iprintf>
			HAL_GPIO_WritePin(LIDAR_PWM_GPIO_Port, LIDAR_PWM_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a8:	f001 fbc4 	bl	8001e34 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80006ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006b0:	f000 ff64 	bl	800157c <HAL_Delay>

			state_lidar = REQUEST;
 80006b4:	2301      	movs	r3, #1
 80006b6:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 80006ba:	f102 0217 	add.w	r2, r2, #23
 80006be:	7013      	strb	r3, [r2, #0]
			printf("req\n\r");
 80006c0:	487a      	ldr	r0, [pc, #488]	@ (80008ac <main+0x2ac>)
 80006c2:	f004 fc1d 	bl	8004f00 <iprintf>
			break;
 80006c6:	e0d1      	b.n	800086c <main+0x26c>

		case REQUEST:
			// Request
			desc_res = new_req(&huart1, SCAN);
 80006c8:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 80006cc:	f103 030c 	add.w	r3, r3, #12
 80006d0:	2220      	movs	r2, #32
 80006d2:	4977      	ldr	r1, [pc, #476]	@ (80008b0 <main+0x2b0>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fbbd 	bl	8000e54 <new_req>

			state_lidar = DESCRIPTOR;
 80006da:	2302      	movs	r3, #2
 80006dc:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 80006e0:	f102 0217 	add.w	r2, r2, #23
 80006e4:	7013      	strb	r3, [r2, #0]
			printf("desc\n\r");
 80006e6:	4873      	ldr	r0, [pc, #460]	@ (80008b4 <main+0x2b4>)
 80006e8:	f004 fc0a 	bl	8004f00 <iprintf>
			break;
 80006ec:	e0be      	b.n	800086c <main+0x26c>

		case DESCRIPTOR:
			// Read descriptor
			if (desc_res.start_flag1 != START_FLAG1) {
 80006ee:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 80006f2:	f103 030c 	add.w	r3, r3, #12
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2ba5      	cmp	r3, #165	@ 0xa5
 80006fa:	d009      	beq.n	8000710 <main+0x110>
				state_lidar = UART_ERROR;
 80006fc:	2305      	movs	r3, #5
 80006fe:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 8000702:	f102 0217 	add.w	r2, r2, #23
 8000706:	7013      	strb	r3, [r2, #0]
				printf("error flag 1\n\r");
 8000708:	486b      	ldr	r0, [pc, #428]	@ (80008b8 <main+0x2b8>)
 800070a:	f004 fbf9 	bl	8004f00 <iprintf>
			}
			else {
				state_lidar = SCANNING; // Everything fine !
				printf("scan\n\r");
			}
			break;
 800070e:	e0ad      	b.n	800086c <main+0x26c>
			else if (desc_res.start_flag2 != START_FLAG2) {
 8000710:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 8000714:	f103 030d 	add.w	r3, r3, #13
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b5a      	cmp	r3, #90	@ 0x5a
 800071c:	d009      	beq.n	8000732 <main+0x132>
				state_lidar = UART_ERROR;
 800071e:	2305      	movs	r3, #5
 8000720:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 8000724:	f102 0217 	add.w	r2, r2, #23
 8000728:	7013      	strb	r3, [r2, #0]
				printf("error flag 2\n\r");
 800072a:	4864      	ldr	r0, [pc, #400]	@ (80008bc <main+0x2bc>)
 800072c:	f004 fbe8 	bl	8004f00 <iprintf>
			break;
 8000730:	e09c      	b.n	800086c <main+0x26c>
			else if (desc_res.res_length_mode != RES_LENGTH_MODE) {
 8000732:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 8000736:	f103 030e 	add.w	r3, r3, #14
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a60      	ldr	r2, [pc, #384]	@ (80008c0 <main+0x2c0>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d009      	beq.n	8000756 <main+0x156>
				state_lidar = UART_ERROR;
 8000742:	2305      	movs	r3, #5
 8000744:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 8000748:	f102 0217 	add.w	r2, r2, #23
 800074c:	7013      	strb	r3, [r2, #0]
				printf("error reslength\n\r");
 800074e:	485d      	ldr	r0, [pc, #372]	@ (80008c4 <main+0x2c4>)
 8000750:	f004 fbd6 	bl	8004f00 <iprintf>
			break;
 8000754:	e08a      	b.n	800086c <main+0x26c>
			else if (desc_res.type != DATA_TYPE) {
 8000756:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 800075a:	f103 0312 	add.w	r3, r3, #18
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b81      	cmp	r3, #129	@ 0x81
 8000762:	d009      	beq.n	8000778 <main+0x178>
				state_lidar = UART_ERROR;
 8000764:	2305      	movs	r3, #5
 8000766:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 800076a:	f102 0217 	add.w	r2, r2, #23
 800076e:	7013      	strb	r3, [r2, #0]
				printf("error type 1\n\r");
 8000770:	4855      	ldr	r0, [pc, #340]	@ (80008c8 <main+0x2c8>)
 8000772:	f004 fbc5 	bl	8004f00 <iprintf>
			break;
 8000776:	e079      	b.n	800086c <main+0x26c>
				state_lidar = SCANNING; // Everything fine !
 8000778:	2303      	movs	r3, #3
 800077a:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 800077e:	f102 0217 	add.w	r2, r2, #23
 8000782:	7013      	strb	r3, [r2, #0]
				printf("scan\n\r");
 8000784:	4851      	ldr	r0, [pc, #324]	@ (80008cc <main+0x2cc>)
 8000786:	f004 fbbb 	bl	8004f00 <iprintf>
			break;
 800078a:	e06f      	b.n	800086c <main+0x26c>

		case SCANNING:
			scan_data sample[2048] = {0};
 800078c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000790:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000794:	4618      	mov	r0, r3
 8000796:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800079a:	461a      	mov	r2, r3
 800079c:	2100      	movs	r1, #0
 800079e:	f004 fc04 	bl	8004faa <memset>
			scan_data frame = {0};
 80007a2:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 80007a6:	f103 0304 	add.w	r3, r3, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	711a      	strb	r2, [r3, #4]
			uint16_t index = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 80007b6:	f102 0214 	add.w	r2, r2, #20
 80007ba:	8013      	strh	r3, [r2, #0]

			do {
				HAL_UART_Receive(&huart1, (uint8_t *)&frame, sizeof(frame), 1000);
 80007bc:	f507 5120 	add.w	r1, r7, #10240	@ 0x2800
 80007c0:	f101 0104 	add.w	r1, r1, #4
 80007c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c8:	2205      	movs	r2, #5
 80007ca:	4839      	ldr	r0, [pc, #228]	@ (80008b0 <main+0x2b0>)
 80007cc:	f003 fbb6 	bl	8003f3c <HAL_UART_Receive>
				sample[index++] = frame;
 80007d0:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 80007d4:	f103 0314 	add.w	r3, r3, #20
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	f507 5120 	add.w	r1, r7, #10240	@ 0x2800
 80007e0:	f101 0114 	add.w	r1, r1, #20
 80007e4:	800a      	strh	r2, [r1, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80007ec:	f6a3 0214 	subw	r2, r3, #2068	@ 0x814
 80007f0:	460b      	mov	r3, r1
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	440b      	add	r3, r1
 80007f6:	4413      	add	r3, r2
 80007f8:	461a      	mov	r2, r3
 80007fa:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 80007fe:	f103 0304 	add.w	r3, r3, #4
 8000802:	6818      	ldr	r0, [r3, #0]
 8000804:	6010      	str	r0, [r2, #0]
 8000806:	791b      	ldrb	r3, [r3, #4]
 8000808:	7113      	strb	r3, [r2, #4]
			} while(!CHECK_BIT(frame.quality, 0));
 800080a:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 800080e:	f103 0304 	add.w	r3, r3, #4
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0cf      	beq.n	80007bc <main+0x1bc>
			printf("ici\n\r");
 800081c:	482c      	ldr	r0, [pc, #176]	@ (80008d0 <main+0x2d0>)
 800081e:	f004 fb6f 	bl	8004f00 <iprintf>
			index = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 8000828:	f102 0214 	add.w	r2, r2, #20
 800082c:	8013      	strh	r3, [r2, #0]
			state_lidar = STOPPING;
 800082e:	2304      	movs	r3, #4
 8000830:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 8000834:	f102 0217 	add.w	r2, r2, #23
 8000838:	7013      	strb	r3, [r2, #0]
			break;
 800083a:	e017      	b.n	800086c <main+0x26c>

		case STOPPING:
			stop(&huart1);
 800083c:	481c      	ldr	r0, [pc, #112]	@ (80008b0 <main+0x2b0>)
 800083e:	f000 fb31 	bl	8000ea4 <stop>
			HAL_Delay(1000);
 8000842:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000846:	f000 fe99 	bl	800157c <HAL_Delay>
			state_lidar = STANDBY;
 800084a:	2300      	movs	r3, #0
 800084c:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 8000850:	f102 0217 	add.w	r2, r2, #23
 8000854:	7013      	strb	r3, [r2, #0]

			break;
 8000856:	e009      	b.n	800086c <main+0x26c>

		default:
			printf("error\n\r");
 8000858:	481e      	ldr	r0, [pc, #120]	@ (80008d4 <main+0x2d4>)
 800085a:	f004 fb51 	bl	8004f00 <iprintf>
			state_lidar = UART_ERROR;
 800085e:	2305      	movs	r3, #5
 8000860:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 8000864:	f102 0217 	add.w	r2, r2, #23
 8000868:	7013      	strb	r3, [r2, #0]

			break;
 800086a:	bf00      	nop
		//			  HAL_UART_Transmit(&huart2, (uint8_t *)&res_data, (uint16_t)sizeof(res_data), 500);
		//			  HAL_Delay(100);
		//			  HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, 500);
		//			  HAL_Delay(100);
		//		  }
		if (HAL_GPIO_ReadPin(AU_GPIO_Port, AU_Pin) == GPIO_PIN_RESET) {
 800086c:	2102      	movs	r1, #2
 800086e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000872:	f001 fac7 	bl	8001e04 <HAL_GPIO_ReadPin>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	f47f aeef 	bne.w	800065c <main+0x5c>
			printf("off\n\r");
 800087e:	4816      	ldr	r0, [pc, #88]	@ (80008d8 <main+0x2d8>)
 8000880:	f004 fb3e 	bl	8004f00 <iprintf>
			stop(&huart1);
 8000884:	480a      	ldr	r0, [pc, #40]	@ (80008b0 <main+0x2b0>)
 8000886:	f000 fb0d 	bl	8000ea4 <stop>
			HAL_GPIO_WritePin(LIDAR_PWM_GPIO_Port, LIDAR_PWM_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f001 face 	bl	8001e34 <HAL_GPIO_WritePin>
			state_lidar = STANDBY;
 8000898:	2300      	movs	r3, #0
 800089a:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 800089e:	f102 0217 	add.w	r2, r2, #23
 80008a2:	7013      	strb	r3, [r2, #0]
	if (HAL_GPIO_ReadPin(AU_GPIO_Port, AU_Pin) != GPIO_PIN_RESET) {
 80008a4:	e6da      	b.n	800065c <main+0x5c>
 80008a6:	bf00      	nop
 80008a8:	08005bf4 	.word	0x08005bf4
 80008ac:	08005bfc 	.word	0x08005bfc
 80008b0:	200001e4 	.word	0x200001e4
 80008b4:	08005c04 	.word	0x08005c04
 80008b8:	08005c0c 	.word	0x08005c0c
 80008bc:	08005c1c 	.word	0x08005c1c
 80008c0:	40000005 	.word	0x40000005
 80008c4:	08005c2c 	.word	0x08005c2c
 80008c8:	08005c40 	.word	0x08005c40
 80008cc:	08005c50 	.word	0x08005c50
 80008d0:	08005c58 	.word	0x08005c58
 80008d4:	08005c60 	.word	0x08005c60
 80008d8:	08005c68 	.word	0x08005c68

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b094      	sub	sp, #80	@ 0x50
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0318 	add.w	r3, r7, #24
 80008e6:	2238      	movs	r2, #56	@ 0x38
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 fb5d 	bl	8004faa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000902:	f001 fba7 	bl	8002054 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000906:	2322      	movs	r3, #34	@ 0x22
 8000908:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000910:	2340      	movs	r3, #64	@ 0x40
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000914:	2301      	movs	r3, #1
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000918:	2302      	movs	r3, #2
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000920:	2301      	movs	r3, #1
 8000922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000924:	2308      	movs	r3, #8
 8000926:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800092c:	2302      	movs	r3, #2
 800092e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fc3f 	bl	80021bc <HAL_RCC_OscConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000944:	f000 fa80 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000948:	230f      	movs	r3, #15
 800094a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094c:	2303      	movs	r3, #3
 800094e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2102      	movs	r1, #2
 8000960:	4618      	mov	r0, r3
 8000962:	f001 ff3d 	bl	80027e0 <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800096c:	f000 fa6c 	bl	8000e48 <Error_Handler>
  }
}
 8000970:	bf00      	nop
 8000972:	3750      	adds	r7, #80	@ 0x50
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800097c:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 800097e:	4a20      	ldr	r2, [pc, #128]	@ (8000a00 <MX_FDCAN2_Init+0x88>)
 8000980:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000982:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000988:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800098e:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000994:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 8000996:	2200      	movs	r2, #0
 8000998:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 800099c:	2200      	movs	r2, #0
 800099e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009a8:	2210      	movs	r2, #16
 80009aa:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80009b8:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80009c4:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009d8:	2200      	movs	r2, #0
 80009da:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009de:	2200      	movs	r2, #0
 80009e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_FDCAN2_Init+0x84>)
 80009ea:	f000 fecd 	bl	8001788 <HAL_FDCAN_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80009f4:	f000 fa28 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000084 	.word	0x20000084
 8000a00:	40006800 	.word	0x40006800

08000a04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a7c <MX_SPI1_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a1e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a52:	2207      	movs	r2, #7
 8000a54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_SPI1_Init+0x74>)
 8000a64:	f002 fb14 	bl	8003090 <HAL_SPI_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 f9eb 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000e8 	.word	0x200000e8
 8000a7c:	40013000 	.word	0x40013000

08000a80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a92:	463b      	mov	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
 8000aa0:	615a      	str	r2, [r3, #20]
 8000aa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <MX_TIM2_Init+0xb0>)
 8000aa6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aac:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <MX_TIM2_Init+0xb0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <MX_TIM2_Init+0xb0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <MX_TIM2_Init+0xb0>)
 8000aba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000abe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_TIM2_Init+0xb0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <MX_TIM2_Init+0xb0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000acc:	4818      	ldr	r0, [pc, #96]	@ (8000b30 <MX_TIM2_Init+0xb0>)
 8000ace:	f002 fb8a 	bl	80031e6 <HAL_TIM_PWM_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ad8:	f000 f9b6 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4811      	ldr	r0, [pc, #68]	@ (8000b30 <MX_TIM2_Init+0xb0>)
 8000aec:	f003 f8ba 	bl	8003c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000af6:	f000 f9a7 	bl	8000e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afa:	2360      	movs	r3, #96	@ 0x60
 8000afc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4807      	ldr	r0, [pc, #28]	@ (8000b30 <MX_TIM2_Init+0xb0>)
 8000b12:	f002 fbbf 	bl	8003294 <HAL_TIM_PWM_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b1c:	f000 f994 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b20:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <MX_TIM2_Init+0xb0>)
 8000b22:	f000 fabf 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	@ 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000014c 	.word	0x2000014c

08000b34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	@ 0x28
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b58:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <MX_TIM3_Init+0xac>)
 8000b5a:	4a22      	ldr	r2, [pc, #136]	@ (8000be4 <MX_TIM3_Init+0xb0>)
 8000b5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <MX_TIM3_Init+0xac>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <MX_TIM3_Init+0xac>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <MX_TIM3_Init+0xac>)
 8000b6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b72:	4b1b      	ldr	r3, [pc, #108]	@ (8000be0 <MX_TIM3_Init+0xac>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <MX_TIM3_Init+0xac>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b7e:	4818      	ldr	r0, [pc, #96]	@ (8000be0 <MX_TIM3_Init+0xac>)
 8000b80:	f002 fb31 	bl	80031e6 <HAL_TIM_PWM_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b8a:	f000 f95d 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4810      	ldr	r0, [pc, #64]	@ (8000be0 <MX_TIM3_Init+0xac>)
 8000b9e:	f003 f861 	bl	8003c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ba8:	f000 f94e 	bl	8000e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bac:	2360      	movs	r3, #96	@ 0x60
 8000bae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <MX_TIM3_Init+0xac>)
 8000bc4:	f002 fb66 	bl	8003294 <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000bce:	f000 f93b 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bd2:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <MX_TIM3_Init+0xac>)
 8000bd4:	f000 fa66 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	@ 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000198 	.word	0x20000198
 8000be4:	40000400 	.word	0x40000400

08000be8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bec:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000bee:	4a23      	ldr	r2, [pc, #140]	@ (8000c7c <MX_USART1_UART_Init+0x94>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c30:	4811      	ldr	r0, [pc, #68]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c32:	f003 f8a5 	bl	8003d80 <HAL_UART_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c3c:	f000 f904 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c40:	2100      	movs	r1, #0
 8000c42:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c44:	f003 ff96 	bl	8004b74 <HAL_UARTEx_SetTxFifoThreshold>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c4e:	f000 f8fb 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4808      	ldr	r0, [pc, #32]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c56:	f003 ffcb 	bl	8004bf0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c60:	f000 f8f2 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c66:	f003 ff4c 	bl	8004b02 <HAL_UARTEx_DisableFifoMode>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c70:	f000 f8ea 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200001e4 	.word	0x200001e4
 8000c7c:	40013800 	.word	0x40013800

08000c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c84:	4b22      	ldr	r3, [pc, #136]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000c86:	4a23      	ldr	r2, [pc, #140]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc8:	4811      	ldr	r0, [pc, #68]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000cca:	f003 f859 	bl	8003d80 <HAL_UART_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cd4:	f000 f8b8 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000cdc:	f003 ff4a 	bl	8004b74 <HAL_UARTEx_SetTxFifoThreshold>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ce6:	f000 f8af 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cea:	2100      	movs	r1, #0
 8000cec:	4808      	ldr	r0, [pc, #32]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000cee:	f003 ff7f 	bl	8004bf0 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cf8:	f000 f8a6 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_USART2_UART_Init+0x90>)
 8000cfe:	f003 ff00 	bl	8004b02 <HAL_UARTEx_DisableFifoMode>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 f89e 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000278 	.word	0x20000278
 8000d14:	40004400 	.word	0x40004400

08000d18 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <MX_USB_PCD_Init+0x48>)
 8000d1e:	4a11      	ldr	r2, [pc, #68]	@ (8000d64 <MX_USB_PCD_Init+0x4c>)
 8000d20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_USB_PCD_Init+0x48>)
 8000d24:	2208      	movs	r2, #8
 8000d26:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <MX_USB_PCD_Init+0x48>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_USB_PCD_Init+0x48>)
 8000d30:	2202      	movs	r2, #2
 8000d32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <MX_USB_PCD_Init+0x48>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_USB_PCD_Init+0x48>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <MX_USB_PCD_Init+0x48>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_USB_PCD_Init+0x48>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	@ (8000d60 <MX_USB_PCD_Init+0x48>)
 8000d4e:	f001 f889 	bl	8001e64 <HAL_PCD_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000d58:	f000 f876 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2000030c 	.word	0x2000030c
 8000d64:	40005c00 	.word	0x40005c00

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b30      	ldr	r3, [pc, #192]	@ (8000e40 <MX_GPIO_Init+0xd8>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	4a2f      	ldr	r2, [pc, #188]	@ (8000e40 <MX_GPIO_Init+0xd8>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <MX_GPIO_Init+0xd8>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <MX_GPIO_Init+0xd8>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	4a29      	ldr	r2, [pc, #164]	@ (8000e40 <MX_GPIO_Init+0xd8>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da2:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <MX_GPIO_Init+0xd8>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_PWM_GPIO_Port, LIDAR_PWM_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db8:	f001 f83c 	bl	8001e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	4820      	ldr	r0, [pc, #128]	@ (8000e44 <MX_GPIO_Init+0xdc>)
 8000dc2:	f001 f837 	bl	8001e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AU_Pin LIDAR_SELECT_Pin */
  GPIO_InitStruct.Pin = AU_Pin|LIDAR_SELECT_Pin;
 8000dc6:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dde:	f000 fe8f 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 8000de2:	2301      	movs	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	4619      	mov	r1, r3
 8000df4:	4813      	ldr	r0, [pc, #76]	@ (8000e44 <MX_GPIO_Init+0xdc>)
 8000df6:	f000 fe83 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIDAR_PWM_Pin */
  GPIO_InitStruct.Pin = LIDAR_PWM_Pin;
 8000dfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LIDAR_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4619      	mov	r1, r3
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e16:	f000 fe73 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4804      	ldr	r0, [pc, #16]	@ (8000e44 <MX_GPIO_Init+0xdc>)
 8000e32:	f000 fe65 	bl	8001b00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48000400 	.word	0x48000400

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <Error_Handler+0x8>

08000e54 <new_req>:
#include "rplidar.h"
#include <stdio.h>
#include <string.h>

/* Request -------------------------------------------------------------------*/
descriptor new_req(UART_HandleTypeDef *huart, const uint8_t cmd) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	71fb      	strb	r3, [r7, #7]
	request req_struct;
	descriptor desc_res;
	req_struct.start_flag = START_FLAG1;
 8000e62:	23a5      	movs	r3, #165	@ 0xa5
 8000e64:	773b      	strb	r3, [r7, #28]
	req_struct.command = cmd;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	777b      	strb	r3, [r7, #29]
	if (cmd > 0x80) {
		//todo
	}
	HAL_UART_Transmit(huart, (uint8_t *)&req_struct, sizeof(req_struct), 100);
 8000e6a:	f107 011c 	add.w	r1, r7, #28
 8000e6e:	2364      	movs	r3, #100	@ 0x64
 8000e70:	2202      	movs	r2, #2
 8000e72:	68b8      	ldr	r0, [r7, #8]
 8000e74:	f002 ffd4 	bl	8003e20 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, (uint8_t *)&desc_res, sizeof(desc_res), 1000);
 8000e78:	f107 0114 	add.w	r1, r7, #20
 8000e7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e80:	2207      	movs	r2, #7
 8000e82:	68b8      	ldr	r0, [r7, #8]
 8000e84:	f003 f85a 	bl	8003f3c <HAL_UART_Receive>
	return desc_res;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	6010      	str	r0, [r2, #0]
 8000e94:	8899      	ldrh	r1, [r3, #4]
 8000e96:	799b      	ldrb	r3, [r3, #6]
 8000e98:	8091      	strh	r1, [r2, #4]
 8000e9a:	7193      	strb	r3, [r2, #6]
}
 8000e9c:	68f8      	ldr	r0, [r7, #12]
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <stop>:
	//HAL_UART_Receive(huart, pData, data_size, 1000);
	HAL_UART_Receive(huart, pData, 5, 1000);
}

/* No response */
void stop(UART_HandleTypeDef *huart) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
	new_req(huart, STOP);
 8000eac:	463b      	mov	r3, r7
 8000eae:	2225      	movs	r2, #37	@ 0x25
 8000eb0:	68f9      	ldr	r1, [r7, #12]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ffce 	bl	8000e54 <new_req>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eca:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee2:	4a08      	ldr	r2, [pc, #32]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ef6:	f001 f951 	bl	800219c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b09e      	sub	sp, #120	@ 0x78
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2250      	movs	r2, #80	@ 0x50
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 f83e 	bl	8004faa <memset>
  if(hfdcan->Instance==FDCAN2)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb0 <HAL_FDCAN_MspInit+0xa8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d137      	bne.n	8000fa8 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f3c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000f3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f42:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 fe65 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000f54:	f7ff ff78 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f58:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <HAL_FDCAN_MspInit+0xac>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5c:	4a15      	ldr	r2, [pc, #84]	@ (8000fb4 <HAL_FDCAN_MspInit+0xac>)
 8000f5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <HAL_FDCAN_MspInit+0xac>)
 8000f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <HAL_FDCAN_MspInit+0xac>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f74:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb4 <HAL_FDCAN_MspInit+0xac>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <HAL_FDCAN_MspInit+0xac>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000f88:	2360      	movs	r3, #96	@ 0x60
 8000f8a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000f98:	2309      	movs	r3, #9
 8000f9a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <HAL_FDCAN_MspInit+0xb0>)
 8000fa4:	f000 fdac 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3778      	adds	r7, #120	@ 0x78
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40006800 	.word	0x40006800
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48000400 	.word	0x48000400

08000fbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a17      	ldr	r2, [pc, #92]	@ (8001038 <HAL_SPI_MspInit+0x7c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d128      	bne.n	8001030 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fde:	4b17      	ldr	r3, [pc, #92]	@ (800103c <HAL_SPI_MspInit+0x80>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe2:	4a16      	ldr	r2, [pc, #88]	@ (800103c <HAL_SPI_MspInit+0x80>)
 8000fe4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fe8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HAL_SPI_MspInit+0x80>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_SPI_MspInit+0x80>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	4a10      	ldr	r2, [pc, #64]	@ (800103c <HAL_SPI_MspInit+0x80>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <HAL_SPI_MspInit+0x80>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800100e:	23f0      	movs	r3, #240	@ 0xf0
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101e:	2305      	movs	r3, #5
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102c:	f000 fd68 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	@ 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40013000 	.word	0x40013000
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001050:	d10c      	bne.n	800106c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001052:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HAL_TIM_PWM_MspInit+0x5c>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001056:	4a11      	ldr	r2, [pc, #68]	@ (800109c <HAL_TIM_PWM_MspInit+0x5c>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6593      	str	r3, [r2, #88]	@ 0x58
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_TIM_PWM_MspInit+0x5c>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800106a:	e010      	b.n	800108e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0b      	ldr	r2, [pc, #44]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x60>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10b      	bne.n	800108e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <HAL_TIM_PWM_MspInit+0x5c>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107a:	4a08      	ldr	r2, [pc, #32]	@ (800109c <HAL_TIM_PWM_MspInit+0x5c>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6593      	str	r3, [r2, #88]	@ 0x58
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_TIM_PWM_MspInit+0x5c>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	40000400 	.word	0x40000400

080010a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010c4:	d11d      	bne.n	8001102 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <HAL_TIM_MspPostInit+0xa8>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	4a20      	ldr	r2, [pc, #128]	@ (800114c <HAL_TIM_MspPostInit+0xa8>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <HAL_TIM_MspPostInit+0xa8>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LEDS_Pin;
 80010de:	2301      	movs	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ee:	2301      	movs	r3, #1
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LEDS_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fc:	f000 fd00 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001100:	e020      	b.n	8001144 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <HAL_TIM_MspPostInit+0xac>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d11b      	bne.n	8001144 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <HAL_TIM_MspPostInit+0xa8>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001110:	4a0e      	ldr	r2, [pc, #56]	@ (800114c <HAL_TIM_MspPostInit+0xa8>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <HAL_TIM_MspPostInit+0xa8>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_LED_Pin;
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8001134:	230a      	movs	r3, #10
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LIDAR_LED_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <HAL_TIM_MspPostInit+0xb0>)
 8001140:	f000 fcde 	bl	8001b00 <HAL_GPIO_Init>
}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	@ 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40021000 	.word	0x40021000
 8001150:	40000400 	.word	0x40000400
 8001154:	48000400 	.word	0x48000400

08001158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0a0      	sub	sp, #128	@ 0x80
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	2250      	movs	r2, #80	@ 0x50
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f003 ff16 	bl	8004faa <memset>
  if(huart->Instance==USART1)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a3e      	ldr	r2, [pc, #248]	@ (800127c <HAL_UART_MspInit+0x124>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d138      	bne.n	80011fa <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001188:	2301      	movs	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fd3f 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011a0:	f7ff fe52 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a4:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <HAL_UART_MspInit+0x128>)
 80011a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a8:	4a35      	ldr	r2, [pc, #212]	@ (8001280 <HAL_UART_MspInit+0x128>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b0:	4b33      	ldr	r3, [pc, #204]	@ (8001280 <HAL_UART_MspInit+0x128>)
 80011b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b30      	ldr	r3, [pc, #192]	@ (8001280 <HAL_UART_MspInit+0x128>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001280 <HAL_UART_MspInit+0x128>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001280 <HAL_UART_MspInit+0x128>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LIDAR_TX_Pin|LIDAR_RX_Pin;
 80011d4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e6:	2307      	movs	r3, #7
 80011e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f4:	f000 fc84 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f8:	e03b      	b.n	8001272 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a21      	ldr	r2, [pc, #132]	@ (8001284 <HAL_UART_MspInit+0x12c>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d136      	bne.n	8001272 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001204:	2302      	movs	r3, #2
 8001206:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4618      	mov	r0, r3
 8001212:	f001 fd01 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 800121c:	f7ff fe14 	bl	8000e48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001220:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <HAL_UART_MspInit+0x128>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001224:	4a16      	ldr	r2, [pc, #88]	@ (8001280 <HAL_UART_MspInit+0x128>)
 8001226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122a:	6593      	str	r3, [r2, #88]	@ 0x58
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HAL_UART_MspInit+0x128>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <HAL_UART_MspInit+0x128>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123c:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <HAL_UART_MspInit+0x128>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001244:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <HAL_UART_MspInit+0x128>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001250:	230c      	movs	r3, #12
 8001252:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001260:	2307      	movs	r3, #7
 8001262:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f000 fc47 	bl	8001b00 <HAL_GPIO_Init>
}
 8001272:	bf00      	nop
 8001274:	3780      	adds	r7, #128	@ 0x80
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40013800 	.word	0x40013800
 8001280:	40021000 	.word	0x40021000
 8001284:	40004400 	.word	0x40004400

08001288 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b098      	sub	sp, #96	@ 0x60
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	2250      	movs	r2, #80	@ 0x50
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fe86 	bl	8004faa <memset>
  if(hpcd->Instance==USB)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a11      	ldr	r2, [pc, #68]	@ (80012e8 <HAL_PCD_MspInit+0x60>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d11a      	bne.n	80012de <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80012ae:	2300      	movs	r3, #0
 80012b0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fcae 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80012c2:	f7ff fdc1 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_PCD_MspInit+0x64>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_PCD_MspInit+0x64>)
 80012cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_PCD_MspInit+0x64>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80012de:	bf00      	nop
 80012e0:	3760      	adds	r7, #96	@ 0x60
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40005c00 	.word	0x40005c00
 80012ec:	40021000 	.word	0x40021000

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <NMI_Handler+0x4>

080012f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <MemManage_Handler+0x4>

08001308 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <UsageFault_Handler+0x4>

08001318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001346:	f000 f8fb 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}

0800134e <_close>:
  }
  return len;
}

int _close(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001376:	605a      	str	r2, [r3, #4]
  return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_isatty>:

int _isatty(int file)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	@ (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f003 fe2e 	bl	8005048 <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2001c000 	.word	0x2001c000
 8001418:	00000400 	.word	0x00000400
 800141c:	200005e8 	.word	0x200005e8
 8001420:	20000740 	.word	0x20000740

08001424 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001448:	480d      	ldr	r0, [pc, #52]	@ (8001480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800144a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800144c:	f7ff ffea 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <LoopForever+0x6>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	@ (8001488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <LoopForever+0xe>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	@ (8001494 <LoopForever+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f003 fded 	bl	8005054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147a:	f7ff f8c1 	bl	8000600 <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   r0, =_estack
 8001480:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800148c:	08005cf4 	.word	0x08005cf4
  ldr r2, =_sbss
 8001490:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001494:	2000073c 	.word	0x2000073c

08001498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_2_IRQHandler>

0800149a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f93d 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f80e 	bl	80014cc <HAL_InitTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e001      	b.n	80014c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014bc:	f7ff fd00 	bl	8000ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c0:	79fb      	ldrb	r3, [r7, #7]

}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <HAL_InitTick+0x68>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d022      	beq.n	8001526 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014e0:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_InitTick+0x6c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_InitTick+0x68>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f93a 	bl	800176e <HAL_SYSTICK_Config>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10f      	bne.n	8001520 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	d809      	bhi.n	800151a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001506:	2200      	movs	r2, #0
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800150e:	f000 f914 	bl	800173a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <HAL_InitTick+0x70>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e007      	b.n	800152a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e004      	b.n	800152a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000008 	.word	0x20000008
 8001538:	20000000 	.word	0x20000000
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <HAL_IncTick+0x1c>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <HAL_IncTick+0x20>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4413      	add	r3, r2
 800154e:	4a03      	ldr	r2, [pc, #12]	@ (800155c <HAL_IncTick+0x1c>)
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	200005ec 	.word	0x200005ec
 8001560:	20000008 	.word	0x20000008

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200005ec 	.word	0x200005ec

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ffee 	bl	8001564 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001594:	d004      	beq.n	80015a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <HAL_Delay+0x40>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4413      	add	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a0:	bf00      	nop
 80015a2:	f7ff ffdf 	bl	8001564 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d8f7      	bhi.n	80015a2 <HAL_Delay+0x26>
  {
  }
}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000008 	.word	0x20000008

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	@ (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	@ (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	@ 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	@ 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	@ (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff47 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001748:	f7ff ff5e 	bl	8001608 <__NVIC_GetPriorityGrouping>
 800174c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	6978      	ldr	r0, [r7, #20]
 8001754:	f7ff ff90 	bl	8001678 <NVIC_EncodePriority>
 8001758:	4602      	mov	r2, r0
 800175a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff5f 	bl	8001624 <__NVIC_SetPriority>
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffb2 	bl	80016e0 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e147      	b.n	8001a2a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fbaa 	bl	8000f08 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0210 	bic.w	r2, r2, #16
 80017c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c4:	f7ff fece 	bl	8001564 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017ca:	e012      	b.n	80017f2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017cc:	f7ff feca 	bl	8001564 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b0a      	cmp	r3, #10
 80017d8:	d90b      	bls.n	80017f2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2203      	movs	r2, #3
 80017ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e11b      	b.n	8001a2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d0e5      	beq.n	80017cc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001810:	f7ff fea8 	bl	8001564 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001816:	e012      	b.n	800183e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001818:	f7ff fea4 	bl	8001564 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b0a      	cmp	r3, #10
 8001824:	d90b      	bls.n	800183e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182a:	f043 0201 	orr.w	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2203      	movs	r2, #3
 8001836:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0f5      	b.n	8001a2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0e5      	beq.n	8001818 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699a      	ldr	r2, [r3, #24]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0202 	orr.w	r2, r2, #2
 800185a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a74      	ldr	r2, [pc, #464]	@ (8001a34 <HAL_FDCAN_Init+0x2ac>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d103      	bne.n	800186e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001866:	4a74      	ldr	r2, [pc, #464]	@ (8001a38 <HAL_FDCAN_Init+0x2b0>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	7c1b      	ldrb	r3, [r3, #16]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d108      	bne.n	8001888 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699a      	ldr	r2, [r3, #24]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001884:	619a      	str	r2, [r3, #24]
 8001886:	e007      	b.n	8001898 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699a      	ldr	r2, [r3, #24]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001896:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7c5b      	ldrb	r3, [r3, #17]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d108      	bne.n	80018b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699a      	ldr	r2, [r3, #24]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018ae:	619a      	str	r2, [r3, #24]
 80018b0:	e007      	b.n	80018c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80018c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7c9b      	ldrb	r3, [r3, #18]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699a      	ldr	r2, [r3, #24]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018d8:	619a      	str	r2, [r3, #24]
 80018da:	e007      	b.n	80018ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699a      	ldr	r2, [r3, #24]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80018ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699a      	ldr	r2, [r3, #24]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001910:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0210 	bic.w	r2, r2, #16
 8001920:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d108      	bne.n	800193c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699a      	ldr	r2, [r3, #24]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0204 	orr.w	r2, r2, #4
 8001938:	619a      	str	r2, [r3, #24]
 800193a:	e02c      	b.n	8001996 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d028      	beq.n	8001996 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d01c      	beq.n	8001986 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699a      	ldr	r2, [r3, #24]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800195a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	691a      	ldr	r2, [r3, #16]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0210 	orr.w	r2, r2, #16
 800196a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d110      	bne.n	8001996 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699a      	ldr	r2, [r3, #24]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0220 	orr.w	r2, r2, #32
 8001982:	619a      	str	r2, [r3, #24]
 8001984:	e007      	b.n	8001996 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0220 	orr.w	r2, r2, #32
 8001994:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	3b01      	subs	r3, #1
 800199c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019a6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019ae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019be:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019c0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80019ca:	d115      	bne.n	80019f8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d6:	3b01      	subs	r3, #1
 80019d8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019da:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e0:	3b01      	subs	r3, #1
 80019e2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019e4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	3b01      	subs	r3, #1
 80019ee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019f4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019f6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f814 	bl	8001a3c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40006400 	.word	0x40006400
 8001a38:	40006500 	.word	0x40006500

08001a3c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001a44:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001a46:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001afc <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d103      	bne.n	8001a5a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001a58:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a68:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a70:	041a      	lsls	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a8e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a96:	061a      	lsls	r2, r3, #24
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	e005      	b.n	8001adc <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d3f3      	bcc.n	8001ad0 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	4000a400 	.word	0x4000a400
 8001afc:	40006800 	.word	0x40006800

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b0e:	e15a      	b.n	8001dc6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2101      	movs	r1, #1
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 814c 	beq.w	8001dc0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d005      	beq.n	8001b40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d130      	bne.n	8001ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b76:	2201      	movs	r2, #1
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	091b      	lsrs	r3, r3, #4
 8001b8c:	f003 0201 	and.w	r2, r3, #1
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d017      	beq.n	8001bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d123      	bne.n	8001c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	08da      	lsrs	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3208      	adds	r2, #8
 8001bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	6939      	ldr	r1, [r7, #16]
 8001c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0203 	and.w	r2, r3, #3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80a6 	beq.w	8001dc0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c74:	4b5b      	ldr	r3, [pc, #364]	@ (8001de4 <HAL_GPIO_Init+0x2e4>)
 8001c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c78:	4a5a      	ldr	r2, [pc, #360]	@ (8001de4 <HAL_GPIO_Init+0x2e4>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c80:	4b58      	ldr	r3, [pc, #352]	@ (8001de4 <HAL_GPIO_Init+0x2e4>)
 8001c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8c:	4a56      	ldr	r2, [pc, #344]	@ (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	220f      	movs	r2, #15
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cb6:	d01f      	beq.n	8001cf8 <HAL_GPIO_Init+0x1f8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a4c      	ldr	r2, [pc, #304]	@ (8001dec <HAL_GPIO_Init+0x2ec>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d019      	beq.n	8001cf4 <HAL_GPIO_Init+0x1f4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a4b      	ldr	r2, [pc, #300]	@ (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d013      	beq.n	8001cf0 <HAL_GPIO_Init+0x1f0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a4a      	ldr	r2, [pc, #296]	@ (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d00d      	beq.n	8001cec <HAL_GPIO_Init+0x1ec>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a49      	ldr	r2, [pc, #292]	@ (8001df8 <HAL_GPIO_Init+0x2f8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d007      	beq.n	8001ce8 <HAL_GPIO_Init+0x1e8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a48      	ldr	r2, [pc, #288]	@ (8001dfc <HAL_GPIO_Init+0x2fc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d101      	bne.n	8001ce4 <HAL_GPIO_Init+0x1e4>
 8001ce0:	2305      	movs	r3, #5
 8001ce2:	e00a      	b.n	8001cfa <HAL_GPIO_Init+0x1fa>
 8001ce4:	2306      	movs	r3, #6
 8001ce6:	e008      	b.n	8001cfa <HAL_GPIO_Init+0x1fa>
 8001ce8:	2304      	movs	r3, #4
 8001cea:	e006      	b.n	8001cfa <HAL_GPIO_Init+0x1fa>
 8001cec:	2303      	movs	r3, #3
 8001cee:	e004      	b.n	8001cfa <HAL_GPIO_Init+0x1fa>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e002      	b.n	8001cfa <HAL_GPIO_Init+0x1fa>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <HAL_GPIO_Init+0x1fa>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	f002 0203 	and.w	r2, r2, #3
 8001d00:	0092      	lsls	r2, r2, #2
 8001d02:	4093      	lsls	r3, r2
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d0a:	4937      	ldr	r1, [pc, #220]	@ (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3302      	adds	r3, #2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d18:	4b39      	ldr	r3, [pc, #228]	@ (8001e00 <HAL_GPIO_Init+0x300>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d3c:	4a30      	ldr	r2, [pc, #192]	@ (8001e00 <HAL_GPIO_Init+0x300>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d42:	4b2f      	ldr	r3, [pc, #188]	@ (8001e00 <HAL_GPIO_Init+0x300>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d66:	4a26      	ldr	r2, [pc, #152]	@ (8001e00 <HAL_GPIO_Init+0x300>)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d6c:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <HAL_GPIO_Init+0x300>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d90:	4a1b      	ldr	r2, [pc, #108]	@ (8001e00 <HAL_GPIO_Init+0x300>)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <HAL_GPIO_Init+0x300>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dba:	4a11      	ldr	r2, [pc, #68]	@ (8001e00 <HAL_GPIO_Init+0x300>)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f47f ae9d 	bne.w	8001b10 <HAL_GPIO_Init+0x10>
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	bf00      	nop
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010000 	.word	0x40010000
 8001dec:	48000400 	.word	0x48000400
 8001df0:	48000800 	.word	0x48000800
 8001df4:	48000c00 	.word	0x48000c00
 8001df8:	48001000 	.word	0x48001000
 8001dfc:	48001400 	.word	0x48001400
 8001e00:	40010400 	.word	0x40010400

08001e04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
 8001e20:	e001      	b.n	8001e26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
 8001e40:	4613      	mov	r3, r2
 8001e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e44:	787b      	ldrb	r3, [r7, #1]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e50:	e002      	b.n	8001e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0c0      	b.n	8001ff8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff f9fc 	bl	8001288 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2203      	movs	r2, #3
 8001e94:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 ff33 	bl	8004d08 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]
 8001ea6:	e03e      	b.n	8001f26 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3311      	adds	r3, #17
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	3310      	adds	r3, #16
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	3313      	adds	r3, #19
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3320      	adds	r3, #32
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	3324      	adds	r3, #36	@ 0x24
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	440b      	add	r3, r1
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	3301      	adds	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	791b      	ldrb	r3, [r3, #4]
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3bb      	bcc.n	8001ea8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	e044      	b.n	8001fc0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	440b      	add	r3, r1
 8001f86:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	791b      	ldrb	r3, [r3, #4]
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d3b5      	bcc.n	8001f36 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001fd6:	f002 feb2 	bl	8004d3e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7a9b      	ldrb	r3, [r3, #10]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d102      	bne.n	8001ff6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f805 	bl	8002000 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002024:	b29b      	uxth	r3, r3
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002038:	b29b      	uxth	r3, r3
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d141      	bne.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002062:	4b4b      	ldr	r3, [pc, #300]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800206a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800206e:	d131      	bne.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002070:	4b47      	ldr	r3, [pc, #284]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002076:	4a46      	ldr	r2, [pc, #280]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800207c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002080:	4b43      	ldr	r3, [pc, #268]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002088:	4a41      	ldr	r2, [pc, #260]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800208e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002090:	4b40      	ldr	r3, [pc, #256]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2232      	movs	r2, #50	@ 0x32
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	4a3f      	ldr	r2, [pc, #252]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	0c9b      	lsrs	r3, r3, #18
 80020a2:	3301      	adds	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a6:	e002      	b.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ae:	4b38      	ldr	r3, [pc, #224]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ba:	d102      	bne.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f2      	bne.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020c2:	4b33      	ldr	r3, [pc, #204]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ce:	d158      	bne.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e057      	b.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020da:	4a2d      	ldr	r2, [pc, #180]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020e4:	e04d      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ec:	d141      	bne.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ee:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fa:	d131      	bne.n	8002160 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020fc:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002102:	4a23      	ldr	r2, [pc, #140]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002108:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800210c:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002114:	4a1e      	ldr	r2, [pc, #120]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800211c:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2232      	movs	r2, #50	@ 0x32
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	0c9b      	lsrs	r3, r3, #18
 800212e:	3301      	adds	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002132:	e002      	b.n	800213a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3b01      	subs	r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002146:	d102      	bne.n	800214e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f2      	bne.n	8002134 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800214e:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215a:	d112      	bne.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e011      	b.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002160:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002166:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002170:	e007      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002172:	4b07      	ldr	r3, [pc, #28]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800217a:	4a05      	ldr	r2, [pc, #20]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002180:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40007000 	.word	0x40007000
 8002194:	20000000 	.word	0x20000000
 8002198:	431bde83 	.word	0x431bde83

0800219c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80021a0:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021aa:	6093      	str	r3, [r2, #8]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40007000 	.word	0x40007000

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e2fe      	b.n	80027cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d075      	beq.n	80022c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021da:	4b97      	ldr	r3, [pc, #604]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e4:	4b94      	ldr	r3, [pc, #592]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b0c      	cmp	r3, #12
 80021f2:	d102      	bne.n	80021fa <HAL_RCC_OscConfig+0x3e>
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d002      	beq.n	8002200 <HAL_RCC_OscConfig+0x44>
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d10b      	bne.n	8002218 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	4b8d      	ldr	r3, [pc, #564]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d05b      	beq.n	80022c4 <HAL_RCC_OscConfig+0x108>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d157      	bne.n	80022c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e2d9      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002220:	d106      	bne.n	8002230 <HAL_RCC_OscConfig+0x74>
 8002222:	4b85      	ldr	r3, [pc, #532]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a84      	ldr	r2, [pc, #528]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e01d      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b7f      	ldr	r3, [pc, #508]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7e      	ldr	r2, [pc, #504]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b7c      	ldr	r3, [pc, #496]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a7b      	ldr	r2, [pc, #492]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002254:	4b78      	ldr	r3, [pc, #480]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a77      	ldr	r2, [pc, #476]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b75      	ldr	r3, [pc, #468]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a74      	ldr	r2, [pc, #464]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff f976 	bl	8001564 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff f972 	bl	8001564 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	@ 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e29e      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228e:	4b6a      	ldr	r3, [pc, #424]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0xc0>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7ff f962 	bl	8001564 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7ff f95e 	bl	8001564 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e28a      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b6:	4b60      	ldr	r3, [pc, #384]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0xe8>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d075      	beq.n	80023be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d2:	4b59      	ldr	r3, [pc, #356]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022dc:	4b56      	ldr	r3, [pc, #344]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	d102      	bne.n	80022f2 <HAL_RCC_OscConfig+0x136>
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_OscConfig+0x13c>
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d11f      	bne.n	8002338 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_OscConfig+0x154>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e25d      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	4b49      	ldr	r3, [pc, #292]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	061b      	lsls	r3, r3, #24
 800231e:	4946      	ldr	r1, [pc, #280]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002324:	4b45      	ldr	r3, [pc, #276]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff f8cf 	bl	80014cc <HAL_InitTick>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d043      	beq.n	80023bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e249      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d023      	beq.n	8002388 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002340:	4b3d      	ldr	r3, [pc, #244]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a3c      	ldr	r2, [pc, #240]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7ff f90a 	bl	8001564 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002354:	f7ff f906 	bl	8001564 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e232      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002366:	4b34      	ldr	r3, [pc, #208]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b31      	ldr	r3, [pc, #196]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	061b      	lsls	r3, r3, #24
 8002380:	492d      	ldr	r1, [pc, #180]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
 8002386:	e01a      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002388:	4b2b      	ldr	r3, [pc, #172]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2a      	ldr	r2, [pc, #168]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 800238e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff f8e6 	bl	8001564 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7ff f8e2 	bl	8001564 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e20e      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ae:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1e0>
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d041      	beq.n	800244e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01c      	beq.n	800240c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80023d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d8:	4a17      	ldr	r2, [pc, #92]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7ff f8bf 	bl	8001564 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ea:	f7ff f8bb 	bl	8001564 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e1e7      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0ef      	beq.n	80023ea <HAL_RCC_OscConfig+0x22e>
 800240a:	e020      	b.n	800244e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 800240e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002412:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7ff f8a2 	bl	8001564 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002422:	e00d      	b.n	8002440 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7ff f89e 	bl	8001564 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d906      	bls.n	8002440 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e1ca      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002440:	4b8c      	ldr	r3, [pc, #560]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1ea      	bne.n	8002424 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80a6 	beq.w	80025a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002460:	4b84      	ldr	r3, [pc, #528]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_OscConfig+0x2b4>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x2b6>
 8002470:	2300      	movs	r3, #0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00d      	beq.n	8002492 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b7f      	ldr	r3, [pc, #508]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247a:	4a7e      	ldr	r2, [pc, #504]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002480:	6593      	str	r3, [r2, #88]	@ 0x58
 8002482:	4b7c      	ldr	r3, [pc, #496]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800248e:	2301      	movs	r3, #1
 8002490:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002492:	4b79      	ldr	r3, [pc, #484]	@ (8002678 <HAL_RCC_OscConfig+0x4bc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d118      	bne.n	80024d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800249e:	4b76      	ldr	r3, [pc, #472]	@ (8002678 <HAL_RCC_OscConfig+0x4bc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a75      	ldr	r2, [pc, #468]	@ (8002678 <HAL_RCC_OscConfig+0x4bc>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024aa:	f7ff f85b 	bl	8001564 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b2:	f7ff f857 	bl	8001564 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e183      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002678 <HAL_RCC_OscConfig+0x4bc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d108      	bne.n	80024ea <HAL_RCC_OscConfig+0x32e>
 80024d8:	4b66      	ldr	r3, [pc, #408]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024de:	4a65      	ldr	r2, [pc, #404]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024e8:	e024      	b.n	8002534 <HAL_RCC_OscConfig+0x378>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d110      	bne.n	8002514 <HAL_RCC_OscConfig+0x358>
 80024f2:	4b60      	ldr	r3, [pc, #384]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002502:	4b5c      	ldr	r3, [pc, #368]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002508:	4a5a      	ldr	r2, [pc, #360]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002512:	e00f      	b.n	8002534 <HAL_RCC_OscConfig+0x378>
 8002514:	4b57      	ldr	r3, [pc, #348]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251a:	4a56      	ldr	r2, [pc, #344]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002524:	4b53      	ldr	r3, [pc, #332]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252a:	4a52      	ldr	r2, [pc, #328]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d016      	beq.n	800256a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7ff f812 	bl	8001564 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	e00a      	b.n	800255a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002544:	f7ff f80e 	bl	8001564 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e138      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255a:	4b46      	ldr	r3, [pc, #280]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ed      	beq.n	8002544 <HAL_RCC_OscConfig+0x388>
 8002568:	e015      	b.n	8002596 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7fe fffb 	bl	8001564 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002570:	e00a      	b.n	8002588 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe fff7 	bl	8001564 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e121      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002588:	4b3a      	ldr	r3, [pc, #232]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ed      	bne.n	8002572 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002596:	7ffb      	ldrb	r3, [r7, #31]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d105      	bne.n	80025a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259c:	4b35      	ldr	r3, [pc, #212]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a0:	4a34      	ldr	r2, [pc, #208]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80025a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d03c      	beq.n	800262e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01c      	beq.n	80025f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80025be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fe ffca 	bl	8001564 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d4:	f7fe ffc6 	bl	8001564 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e0f2      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025e6:	4b23      	ldr	r3, [pc, #140]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80025e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ef      	beq.n	80025d4 <HAL_RCC_OscConfig+0x418>
 80025f4:	e01b      	b.n	800262e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80025f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002606:	f7fe ffad 	bl	8001564 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260e:	f7fe ffa9 	bl	8001564 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0d5      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002620:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002622:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ef      	bne.n	800260e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80c9 	beq.w	80027ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002638:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b0c      	cmp	r3, #12
 8002642:	f000 8083 	beq.w	800274c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d15e      	bne.n	800270c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a08      	ldr	r2, [pc, #32]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002654:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7fe ff83 	bl	8001564 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002660:	e00c      	b.n	800267c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe ff7f 	bl	8001564 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d905      	bls.n	800267c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0ab      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
 8002674:	40021000 	.word	0x40021000
 8002678:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800267c:	4b55      	ldr	r3, [pc, #340]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ec      	bne.n	8002662 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002688:	4b52      	ldr	r3, [pc, #328]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	4b52      	ldr	r3, [pc, #328]	@ (80027d8 <HAL_RCC_OscConfig+0x61c>)
 800268e:	4013      	ands	r3, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6a11      	ldr	r1, [r2, #32]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002698:	3a01      	subs	r2, #1
 800269a:	0112      	lsls	r2, r2, #4
 800269c:	4311      	orrs	r1, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80026a2:	0212      	lsls	r2, r2, #8
 80026a4:	4311      	orrs	r1, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026aa:	0852      	lsrs	r2, r2, #1
 80026ac:	3a01      	subs	r2, #1
 80026ae:	0552      	lsls	r2, r2, #21
 80026b0:	4311      	orrs	r1, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026b6:	0852      	lsrs	r2, r2, #1
 80026b8:	3a01      	subs	r2, #1
 80026ba:	0652      	lsls	r2, r2, #25
 80026bc:	4311      	orrs	r1, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026c2:	06d2      	lsls	r2, r2, #27
 80026c4:	430a      	orrs	r2, r1
 80026c6:	4943      	ldr	r1, [pc, #268]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026cc:	4b41      	ldr	r3, [pc, #260]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a40      	ldr	r2, [pc, #256]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026d8:	4b3e      	ldr	r3, [pc, #248]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a3d      	ldr	r2, [pc, #244]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 80026de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe ff3e 	bl	8001564 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ec:	f7fe ff3a 	bl	8001564 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e066      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fe:	4b35      	ldr	r3, [pc, #212]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x530>
 800270a:	e05e      	b.n	80027ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a30      	ldr	r2, [pc, #192]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 8002712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe ff24 	bl	8001564 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe ff20 	bl	8001564 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e04c      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002732:	4b28      	ldr	r3, [pc, #160]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800273e:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	4924      	ldr	r1, [pc, #144]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 8002744:	4b25      	ldr	r3, [pc, #148]	@ (80027dc <HAL_RCC_OscConfig+0x620>)
 8002746:	4013      	ands	r3, r2
 8002748:	60cb      	str	r3, [r1, #12]
 800274a:	e03e      	b.n	80027ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e039      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002758:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	429a      	cmp	r2, r3
 800276a:	d12c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	3b01      	subs	r3, #1
 8002778:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d123      	bne.n	80027c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002788:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d11b      	bne.n	80027c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d113      	bne.n	80027c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	3b01      	subs	r3, #1
 80027ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d109      	bne.n	80027c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	3b01      	subs	r3, #1
 80027c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000
 80027d8:	019f800c 	.word	0x019f800c
 80027dc:	feeefffc 	.word	0xfeeefffc

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e11e      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b91      	ldr	r3, [pc, #580]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d910      	bls.n	8002828 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b8e      	ldr	r3, [pc, #568]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 020f 	bic.w	r2, r3, #15
 800280e:	498c      	ldr	r1, [pc, #560]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b8a      	ldr	r3, [pc, #552]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e106      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d073      	beq.n	800291c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d129      	bne.n	8002890 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283c:	4b81      	ldr	r3, [pc, #516]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0f4      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800284c:	f000 f99e 	bl	8002b8c <RCC_GetSysClockFreqFromPLLSource>
 8002850:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4a7c      	ldr	r2, [pc, #496]	@ (8002a48 <HAL_RCC_ClockConfig+0x268>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d93f      	bls.n	80028da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800285a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800286e:	2b00      	cmp	r3, #0
 8002870:	d033      	beq.n	80028da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	d12f      	bne.n	80028da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800287a:	4b72      	ldr	r3, [pc, #456]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002882:	4a70      	ldr	r2, [pc, #448]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 8002884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002888:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800288a:	2380      	movs	r3, #128	@ 0x80
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e024      	b.n	80028da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d107      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002898:	4b6a      	ldr	r3, [pc, #424]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0c6      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a8:	4b66      	ldr	r3, [pc, #408]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0be      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028b8:	f000 f8ce 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4a61      	ldr	r2, [pc, #388]	@ (8002a48 <HAL_RCC_ClockConfig+0x268>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d909      	bls.n	80028da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028ce:	4a5d      	ldr	r2, [pc, #372]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80028d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028da:	4b5a      	ldr	r3, [pc, #360]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4957      	ldr	r1, [pc, #348]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ec:	f7fe fe3a 	bl	8001564 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7fe fe36 	bl	8001564 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e095      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 020c 	and.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	d1eb      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d023      	beq.n	8002970 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002934:	4b43      	ldr	r3, [pc, #268]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4a42      	ldr	r2, [pc, #264]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800293a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800293e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800294c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002954:	4a3b      	ldr	r2, [pc, #236]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 8002956:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800295a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b39      	ldr	r3, [pc, #228]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4936      	ldr	r1, [pc, #216]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
 800296e:	e008      	b.n	8002982 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b80      	cmp	r3, #128	@ 0x80
 8002974:	d105      	bne.n	8002982 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002976:	4b33      	ldr	r3, [pc, #204]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	4a32      	ldr	r2, [pc, #200]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800297c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002980:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002982:	4b2f      	ldr	r3, [pc, #188]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d21d      	bcs.n	80029cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002990:	4b2b      	ldr	r3, [pc, #172]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 020f 	bic.w	r2, r3, #15
 8002998:	4929      	ldr	r1, [pc, #164]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029a0:	f7fe fde0 	bl	8001564 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7fe fddc 	bl	8001564 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e03b      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1ed      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4917      	ldr	r1, [pc, #92]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f6:	4b13      	ldr	r3, [pc, #76]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	490f      	ldr	r1, [pc, #60]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a0a:	f000 f825 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	490c      	ldr	r1, [pc, #48]	@ (8002a4c <HAL_RCC_ClockConfig+0x26c>)
 8002a1c:	5ccb      	ldrb	r3, [r1, r3]
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	fa22 f303 	lsr.w	r3, r2, r3
 8002a26:	4a0a      	ldr	r2, [pc, #40]	@ (8002a50 <HAL_RCC_ClockConfig+0x270>)
 8002a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <HAL_RCC_ClockConfig+0x274>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fd4c 	bl	80014cc <HAL_InitTick>
 8002a34:	4603      	mov	r3, r0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40022000 	.word	0x40022000
 8002a44:	40021000 	.word	0x40021000
 8002a48:	04c4b400 	.word	0x04c4b400
 8002a4c:	08005c70 	.word	0x08005c70
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d102      	bne.n	8002a70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	e047      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a70:	4b27      	ldr	r3, [pc, #156]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d102      	bne.n	8002a82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a7c:	4b26      	ldr	r3, [pc, #152]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	e03e      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a82:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d136      	bne.n	8002afc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a8e:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aac:	4a1a      	ldr	r2, [pc, #104]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab4:	4a16      	ldr	r2, [pc, #88]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab6:	68d2      	ldr	r2, [r2, #12]
 8002ab8:	0a12      	lsrs	r2, r2, #8
 8002aba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	617b      	str	r3, [r7, #20]
      break;
 8002ac4:	e00c      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac6:	4a13      	ldr	r2, [pc, #76]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ace:	4a10      	ldr	r2, [pc, #64]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad0:	68d2      	ldr	r2, [r2, #12]
 8002ad2:	0a12      	lsrs	r2, r2, #8
 8002ad4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
      break;
 8002ade:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0e5b      	lsrs	r3, r3, #25
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	3301      	adds	r3, #1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	e001      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b00:	693b      	ldr	r3, [r7, #16]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	00f42400 	.word	0x00f42400
 8002b18:	007a1200 	.word	0x007a1200

08002b1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000000 	.word	0x20000000

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b38:	f7ff fff0 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4904      	ldr	r1, [pc, #16]	@ (8002b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	08005c80 	.word	0x08005c80

08002b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b64:	f7ff ffda 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	0adb      	lsrs	r3, r3, #11
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4904      	ldr	r1, [pc, #16]	@ (8002b88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	08005c80 	.word	0x08005c80

08002b8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b92:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d10c      	bne.n	8002bca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bb0:	4a17      	ldr	r2, [pc, #92]	@ (8002c10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	4a14      	ldr	r2, [pc, #80]	@ (8002c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bba:	68d2      	ldr	r2, [r2, #12]
 8002bbc:	0a12      	lsrs	r2, r2, #8
 8002bbe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	617b      	str	r3, [r7, #20]
    break;
 8002bc8:	e00c      	b.n	8002be4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bca:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8002c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bd4:	68d2      	ldr	r2, [r2, #12]
 8002bd6:	0a12      	lsrs	r2, r2, #8
 8002bd8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
    break;
 8002be2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002be4:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	0e5b      	lsrs	r3, r3, #25
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002bfe:	687b      	ldr	r3, [r7, #4]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	371c      	adds	r7, #28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	007a1200 	.word	0x007a1200
 8002c14:	00f42400 	.word	0x00f42400

08002c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c20:	2300      	movs	r3, #0
 8002c22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c24:	2300      	movs	r3, #0
 8002c26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8098 	beq.w	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4b43      	ldr	r3, [pc, #268]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10d      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4b40      	ldr	r3, [pc, #256]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c52:	4b3d      	ldr	r3, [pc, #244]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c62:	4b3a      	ldr	r3, [pc, #232]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a39      	ldr	r2, [pc, #228]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c6e:	f7fe fc79 	bl	8001564 <HAL_GetTick>
 8002c72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c74:	e009      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7fe fc75 	bl	8001564 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d902      	bls.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	74fb      	strb	r3, [r7, #19]
        break;
 8002c88:	e005      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c8a:	4b30      	ldr	r3, [pc, #192]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0ef      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d159      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01e      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d019      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cb8:	4b23      	ldr	r3, [pc, #140]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc4:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cda:	4a1b      	ldr	r2, [pc, #108]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ce4:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fc35 	bl	8001564 <HAL_GetTick>
 8002cfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfc:	e00b      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7fe fc31 	bl	8001564 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d902      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	74fb      	strb	r3, [r7, #19]
            break;
 8002d14:	e006      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d16:	4b0c      	ldr	r3, [pc, #48]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ec      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10b      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d2a:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d38:	4903      	ldr	r1, [pc, #12]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d40:	e008      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	74bb      	strb	r3, [r7, #18]
 8002d46:	e005      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d54:	7c7b      	ldrb	r3, [r7, #17]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5a:	4ba7      	ldr	r3, [pc, #668]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5e:	4aa6      	ldr	r2, [pc, #664]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d72:	4ba1      	ldr	r3, [pc, #644]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d78:	f023 0203 	bic.w	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	499d      	ldr	r1, [pc, #628]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d94:	4b98      	ldr	r3, [pc, #608]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9a:	f023 020c 	bic.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	4995      	ldr	r1, [pc, #596]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002db6:	4b90      	ldr	r3, [pc, #576]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	498c      	ldr	r1, [pc, #560]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dd8:	4b87      	ldr	r3, [pc, #540]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	4984      	ldr	r1, [pc, #528]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	497b      	ldr	r1, [pc, #492]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e1c:	4b76      	ldr	r3, [pc, #472]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	4973      	ldr	r1, [pc, #460]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	496a      	ldr	r1, [pc, #424]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e60:	4b65      	ldr	r3, [pc, #404]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4962      	ldr	r1, [pc, #392]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e82:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	4959      	ldr	r1, [pc, #356]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ea4:	4b54      	ldr	r3, [pc, #336]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eaa:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	4951      	ldr	r1, [pc, #324]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d015      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ecc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	4948      	ldr	r1, [pc, #288]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ee4:	d105      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee6:	4b44      	ldr	r3, [pc, #272]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4a43      	ldr	r2, [pc, #268]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ef0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d015      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002efe:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f04:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	493a      	ldr	r1, [pc, #232]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f1c:	d105      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f1e:	4b36      	ldr	r3, [pc, #216]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	4a35      	ldr	r2, [pc, #212]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f28:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d015      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f36:	4b30      	ldr	r3, [pc, #192]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f44:	492c      	ldr	r1, [pc, #176]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f54:	d105      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f56:	4b28      	ldr	r3, [pc, #160]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	4a27      	ldr	r2, [pc, #156]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f60:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d015      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7c:	491e      	ldr	r1, [pc, #120]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f8c:	d105      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4a19      	ldr	r2, [pc, #100]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f98:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d015      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fa6:	4b14      	ldr	r3, [pc, #80]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb4:	4910      	ldr	r1, [pc, #64]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fc4:	d105      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fd0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d018      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fde:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	4902      	ldr	r1, [pc, #8]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	e001      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003002:	d105      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003004:	4b21      	ldr	r3, [pc, #132]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a20      	ldr	r2, [pc, #128]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800300e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d015      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800301c:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003022:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	4918      	ldr	r1, [pc, #96]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800303a:	d105      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800303c:	4b13      	ldr	r3, [pc, #76]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a12      	ldr	r2, [pc, #72]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003046:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d015      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003054:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003056:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800305a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003062:	490a      	ldr	r1, [pc, #40]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003072:	d105      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a04      	ldr	r2, [pc, #16]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800307a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800307e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003080:	7cbb      	ldrb	r3, [r7, #18]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e09d      	b.n	80031de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b2:	d009      	beq.n	80030c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
 80030ba:	e005      	b.n	80030c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd ff6a 	bl	8000fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003108:	d902      	bls.n	8003110 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e002      	b.n	8003116 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003114:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800311e:	d007      	beq.n	8003130 <HAL_SPI_Init+0xa0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003128:	d002      	beq.n	8003130 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003172:	ea42 0103 	orr.w	r1, r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	f003 0204 	and.w	r2, r3, #4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031ac:	ea42 0103 	orr.w	r1, r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e049      	b.n	800328c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d106      	bne.n	8003212 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7fd ff17 	bl	8001040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2202      	movs	r2, #2
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f000 f949 	bl	80034bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e0ff      	b.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b14      	cmp	r3, #20
 80032be:	f200 80f0 	bhi.w	80034a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032c2:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	0800331d 	.word	0x0800331d
 80032cc:	080034a3 	.word	0x080034a3
 80032d0:	080034a3 	.word	0x080034a3
 80032d4:	080034a3 	.word	0x080034a3
 80032d8:	0800335d 	.word	0x0800335d
 80032dc:	080034a3 	.word	0x080034a3
 80032e0:	080034a3 	.word	0x080034a3
 80032e4:	080034a3 	.word	0x080034a3
 80032e8:	0800339f 	.word	0x0800339f
 80032ec:	080034a3 	.word	0x080034a3
 80032f0:	080034a3 	.word	0x080034a3
 80032f4:	080034a3 	.word	0x080034a3
 80032f8:	080033df 	.word	0x080033df
 80032fc:	080034a3 	.word	0x080034a3
 8003300:	080034a3 	.word	0x080034a3
 8003304:	080034a3 	.word	0x080034a3
 8003308:	08003421 	.word	0x08003421
 800330c:	080034a3 	.word	0x080034a3
 8003310:	080034a3 	.word	0x080034a3
 8003314:	080034a3 	.word	0x080034a3
 8003318:	08003461 	.word	0x08003461
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f974 	bl	8003610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0208 	orr.w	r2, r2, #8
 8003336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0204 	bic.w	r2, r2, #4
 8003346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6999      	ldr	r1, [r3, #24]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	619a      	str	r2, [r3, #24]
      break;
 800335a:	e0a5      	b.n	80034a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f9ee 	bl	8003744 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6999      	ldr	r1, [r3, #24]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	021a      	lsls	r2, r3, #8
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	619a      	str	r2, [r3, #24]
      break;
 800339c:	e084      	b.n	80034a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fa61 	bl	800386c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0208 	orr.w	r2, r2, #8
 80033b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0204 	bic.w	r2, r2, #4
 80033c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69d9      	ldr	r1, [r3, #28]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	61da      	str	r2, [r3, #28]
      break;
 80033dc:	e064      	b.n	80034a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fad3 	bl	8003990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69d9      	ldr	r1, [r3, #28]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	021a      	lsls	r2, r3, #8
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	61da      	str	r2, [r3, #28]
      break;
 800341e:	e043      	b.n	80034a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fb46 	bl	8003ab8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0208 	orr.w	r2, r2, #8
 800343a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0204 	bic.w	r2, r2, #4
 800344a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800345e:	e023      	b.n	80034a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fb90 	bl	8003b8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800347a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800348a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	021a      	lsls	r2, r3, #8
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80034a0:	e002      	b.n	80034a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
      break;
 80034a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop

080034bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a48      	ldr	r2, [pc, #288]	@ (80035f0 <TIM_Base_SetConfig+0x134>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d013      	beq.n	80034fc <TIM_Base_SetConfig+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034da:	d00f      	beq.n	80034fc <TIM_Base_SetConfig+0x40>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a45      	ldr	r2, [pc, #276]	@ (80035f4 <TIM_Base_SetConfig+0x138>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00b      	beq.n	80034fc <TIM_Base_SetConfig+0x40>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a44      	ldr	r2, [pc, #272]	@ (80035f8 <TIM_Base_SetConfig+0x13c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d007      	beq.n	80034fc <TIM_Base_SetConfig+0x40>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a43      	ldr	r2, [pc, #268]	@ (80035fc <TIM_Base_SetConfig+0x140>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d003      	beq.n	80034fc <TIM_Base_SetConfig+0x40>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a42      	ldr	r2, [pc, #264]	@ (8003600 <TIM_Base_SetConfig+0x144>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d108      	bne.n	800350e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a37      	ldr	r2, [pc, #220]	@ (80035f0 <TIM_Base_SetConfig+0x134>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01f      	beq.n	8003556 <TIM_Base_SetConfig+0x9a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351c:	d01b      	beq.n	8003556 <TIM_Base_SetConfig+0x9a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a34      	ldr	r2, [pc, #208]	@ (80035f4 <TIM_Base_SetConfig+0x138>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d017      	beq.n	8003556 <TIM_Base_SetConfig+0x9a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a33      	ldr	r2, [pc, #204]	@ (80035f8 <TIM_Base_SetConfig+0x13c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <TIM_Base_SetConfig+0x9a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a32      	ldr	r2, [pc, #200]	@ (80035fc <TIM_Base_SetConfig+0x140>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00f      	beq.n	8003556 <TIM_Base_SetConfig+0x9a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a32      	ldr	r2, [pc, #200]	@ (8003604 <TIM_Base_SetConfig+0x148>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00b      	beq.n	8003556 <TIM_Base_SetConfig+0x9a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a31      	ldr	r2, [pc, #196]	@ (8003608 <TIM_Base_SetConfig+0x14c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <TIM_Base_SetConfig+0x9a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a30      	ldr	r2, [pc, #192]	@ (800360c <TIM_Base_SetConfig+0x150>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d003      	beq.n	8003556 <TIM_Base_SetConfig+0x9a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2b      	ldr	r2, [pc, #172]	@ (8003600 <TIM_Base_SetConfig+0x144>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d108      	bne.n	8003568 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800355c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a18      	ldr	r2, [pc, #96]	@ (80035f0 <TIM_Base_SetConfig+0x134>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <TIM_Base_SetConfig+0x100>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a19      	ldr	r2, [pc, #100]	@ (80035fc <TIM_Base_SetConfig+0x140>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00f      	beq.n	80035bc <TIM_Base_SetConfig+0x100>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a19      	ldr	r2, [pc, #100]	@ (8003604 <TIM_Base_SetConfig+0x148>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00b      	beq.n	80035bc <TIM_Base_SetConfig+0x100>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a18      	ldr	r2, [pc, #96]	@ (8003608 <TIM_Base_SetConfig+0x14c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_Base_SetConfig+0x100>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a17      	ldr	r2, [pc, #92]	@ (800360c <TIM_Base_SetConfig+0x150>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_Base_SetConfig+0x100>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a12      	ldr	r2, [pc, #72]	@ (8003600 <TIM_Base_SetConfig+0x144>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d103      	bne.n	80035c4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d105      	bne.n	80035e2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f023 0201 	bic.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	611a      	str	r2, [r3, #16]
  }
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800
 80035fc:	40013400 	.word	0x40013400
 8003600:	40015000 	.word	0x40015000
 8003604:	40014000 	.word	0x40014000
 8003608:	40014400 	.word	0x40014400
 800360c:	40014800 	.word	0x40014800

08003610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f023 0201 	bic.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800363e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0303 	bic.w	r3, r3, #3
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f023 0302 	bic.w	r3, r3, #2
 800365c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a30      	ldr	r2, [pc, #192]	@ (800372c <TIM_OC1_SetConfig+0x11c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <TIM_OC1_SetConfig+0x88>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a2f      	ldr	r2, [pc, #188]	@ (8003730 <TIM_OC1_SetConfig+0x120>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00f      	beq.n	8003698 <TIM_OC1_SetConfig+0x88>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a2e      	ldr	r2, [pc, #184]	@ (8003734 <TIM_OC1_SetConfig+0x124>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00b      	beq.n	8003698 <TIM_OC1_SetConfig+0x88>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a2d      	ldr	r2, [pc, #180]	@ (8003738 <TIM_OC1_SetConfig+0x128>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d007      	beq.n	8003698 <TIM_OC1_SetConfig+0x88>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a2c      	ldr	r2, [pc, #176]	@ (800373c <TIM_OC1_SetConfig+0x12c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <TIM_OC1_SetConfig+0x88>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a2b      	ldr	r2, [pc, #172]	@ (8003740 <TIM_OC1_SetConfig+0x130>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d10c      	bne.n	80036b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 0308 	bic.w	r3, r3, #8
 800369e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f023 0304 	bic.w	r3, r3, #4
 80036b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a1d      	ldr	r2, [pc, #116]	@ (800372c <TIM_OC1_SetConfig+0x11c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <TIM_OC1_SetConfig+0xd2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003730 <TIM_OC1_SetConfig+0x120>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00f      	beq.n	80036e2 <TIM_OC1_SetConfig+0xd2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003734 <TIM_OC1_SetConfig+0x124>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00b      	beq.n	80036e2 <TIM_OC1_SetConfig+0xd2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003738 <TIM_OC1_SetConfig+0x128>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d007      	beq.n	80036e2 <TIM_OC1_SetConfig+0xd2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a19      	ldr	r2, [pc, #100]	@ (800373c <TIM_OC1_SetConfig+0x12c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d003      	beq.n	80036e2 <TIM_OC1_SetConfig+0xd2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a18      	ldr	r2, [pc, #96]	@ (8003740 <TIM_OC1_SetConfig+0x130>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d111      	bne.n	8003706 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	621a      	str	r2, [r3, #32]
}
 8003720:	bf00      	nop
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40013400 	.word	0x40013400
 8003734:	40014000 	.word	0x40014000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800
 8003740:	40015000 	.word	0x40015000

08003744 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f023 0210 	bic.w	r2, r3, #16
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0320 	bic.w	r3, r3, #32
 8003792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003854 <TIM_OC2_SetConfig+0x110>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d007      	beq.n	80037b8 <TIM_OC2_SetConfig+0x74>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003858 <TIM_OC2_SetConfig+0x114>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_OC2_SetConfig+0x74>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a2a      	ldr	r2, [pc, #168]	@ (800385c <TIM_OC2_SetConfig+0x118>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d10d      	bne.n	80037d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003854 <TIM_OC2_SetConfig+0x110>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d013      	beq.n	8003804 <TIM_OC2_SetConfig+0xc0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a1e      	ldr	r2, [pc, #120]	@ (8003858 <TIM_OC2_SetConfig+0x114>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00f      	beq.n	8003804 <TIM_OC2_SetConfig+0xc0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003860 <TIM_OC2_SetConfig+0x11c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00b      	beq.n	8003804 <TIM_OC2_SetConfig+0xc0>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003864 <TIM_OC2_SetConfig+0x120>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d007      	beq.n	8003804 <TIM_OC2_SetConfig+0xc0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003868 <TIM_OC2_SetConfig+0x124>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d003      	beq.n	8003804 <TIM_OC2_SetConfig+0xc0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a17      	ldr	r2, [pc, #92]	@ (800385c <TIM_OC2_SetConfig+0x118>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d113      	bne.n	800382c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800380a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003812:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40012c00 	.word	0x40012c00
 8003858:	40013400 	.word	0x40013400
 800385c:	40015000 	.word	0x40015000
 8003860:	40014000 	.word	0x40014000
 8003864:	40014400 	.word	0x40014400
 8003868:	40014800 	.word	0x40014800

0800386c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800389a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0303 	bic.w	r3, r3, #3
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003978 <TIM_OC3_SetConfig+0x10c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <TIM_OC3_SetConfig+0x72>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a2a      	ldr	r2, [pc, #168]	@ (800397c <TIM_OC3_SetConfig+0x110>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d003      	beq.n	80038de <TIM_OC3_SetConfig+0x72>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a29      	ldr	r2, [pc, #164]	@ (8003980 <TIM_OC3_SetConfig+0x114>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10d      	bne.n	80038fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003978 <TIM_OC3_SetConfig+0x10c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <TIM_OC3_SetConfig+0xbe>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <TIM_OC3_SetConfig+0x110>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00f      	beq.n	800392a <TIM_OC3_SetConfig+0xbe>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1d      	ldr	r2, [pc, #116]	@ (8003984 <TIM_OC3_SetConfig+0x118>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_OC3_SetConfig+0xbe>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a1c      	ldr	r2, [pc, #112]	@ (8003988 <TIM_OC3_SetConfig+0x11c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_OC3_SetConfig+0xbe>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1b      	ldr	r2, [pc, #108]	@ (800398c <TIM_OC3_SetConfig+0x120>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_OC3_SetConfig+0xbe>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a16      	ldr	r2, [pc, #88]	@ (8003980 <TIM_OC3_SetConfig+0x114>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d113      	bne.n	8003952 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	621a      	str	r2, [r3, #32]
}
 800396c:	bf00      	nop
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40013400 	.word	0x40013400
 8003980:	40015000 	.word	0x40015000
 8003984:	40014000 	.word	0x40014000
 8003988:	40014400 	.word	0x40014400
 800398c:	40014800 	.word	0x40014800

08003990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	031b      	lsls	r3, r3, #12
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa0 <TIM_OC4_SetConfig+0x110>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d007      	beq.n	8003a04 <TIM_OC4_SetConfig+0x74>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa4 <TIM_OC4_SetConfig+0x114>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_OC4_SetConfig+0x74>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa8 <TIM_OC4_SetConfig+0x118>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10d      	bne.n	8003a20 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	031b      	lsls	r3, r3, #12
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa0 <TIM_OC4_SetConfig+0x110>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d013      	beq.n	8003a50 <TIM_OC4_SetConfig+0xc0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa4 <TIM_OC4_SetConfig+0x114>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00f      	beq.n	8003a50 <TIM_OC4_SetConfig+0xc0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a1e      	ldr	r2, [pc, #120]	@ (8003aac <TIM_OC4_SetConfig+0x11c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <TIM_OC4_SetConfig+0xc0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab0 <TIM_OC4_SetConfig+0x120>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d007      	beq.n	8003a50 <TIM_OC4_SetConfig+0xc0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab4 <TIM_OC4_SetConfig+0x124>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_OC4_SetConfig+0xc0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a17      	ldr	r2, [pc, #92]	@ (8003aa8 <TIM_OC4_SetConfig+0x118>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d113      	bne.n	8003a78 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a56:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a5e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	019b      	lsls	r3, r3, #6
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	019b      	lsls	r3, r3, #6
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40013400 	.word	0x40013400
 8003aa8:	40015000 	.word	0x40015000
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40014400 	.word	0x40014400
 8003ab4:	40014800 	.word	0x40014800

08003ab8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003afc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	041b      	lsls	r3, r3, #16
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a19      	ldr	r2, [pc, #100]	@ (8003b74 <TIM_OC5_SetConfig+0xbc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d013      	beq.n	8003b3a <TIM_OC5_SetConfig+0x82>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a18      	ldr	r2, [pc, #96]	@ (8003b78 <TIM_OC5_SetConfig+0xc0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00f      	beq.n	8003b3a <TIM_OC5_SetConfig+0x82>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	@ (8003b7c <TIM_OC5_SetConfig+0xc4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <TIM_OC5_SetConfig+0x82>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a16      	ldr	r2, [pc, #88]	@ (8003b80 <TIM_OC5_SetConfig+0xc8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <TIM_OC5_SetConfig+0x82>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a15      	ldr	r2, [pc, #84]	@ (8003b84 <TIM_OC5_SetConfig+0xcc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_OC5_SetConfig+0x82>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a14      	ldr	r2, [pc, #80]	@ (8003b88 <TIM_OC5_SetConfig+0xd0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d109      	bne.n	8003b4e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	621a      	str	r2, [r3, #32]
}
 8003b68:	bf00      	nop
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40013400 	.word	0x40013400
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800
 8003b88:	40015000 	.word	0x40015000

08003b8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	051b      	lsls	r3, r3, #20
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c4c <TIM_OC6_SetConfig+0xc0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <TIM_OC6_SetConfig+0x84>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a19      	ldr	r2, [pc, #100]	@ (8003c50 <TIM_OC6_SetConfig+0xc4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00f      	beq.n	8003c10 <TIM_OC6_SetConfig+0x84>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a18      	ldr	r2, [pc, #96]	@ (8003c54 <TIM_OC6_SetConfig+0xc8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <TIM_OC6_SetConfig+0x84>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a17      	ldr	r2, [pc, #92]	@ (8003c58 <TIM_OC6_SetConfig+0xcc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_OC6_SetConfig+0x84>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a16      	ldr	r2, [pc, #88]	@ (8003c5c <TIM_OC6_SetConfig+0xd0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_OC6_SetConfig+0x84>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a15      	ldr	r2, [pc, #84]	@ (8003c60 <TIM_OC6_SetConfig+0xd4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d109      	bne.n	8003c24 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	029b      	lsls	r3, r3, #10
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40013400 	.word	0x40013400
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800
 8003c60:	40015000 	.word	0x40015000

08003c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e06f      	b.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a31      	ldr	r2, [pc, #196]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a30      	ldr	r2, [pc, #192]	@ (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d108      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003cc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1e      	ldr	r2, [pc, #120]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d01d      	beq.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfc:	d018      	beq.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1c      	ldr	r2, [pc, #112]	@ (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00e      	beq.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a15      	ldr	r2, [pc, #84]	@ (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d009      	beq.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a16      	ldr	r2, [pc, #88]	@ (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a11      	ldr	r2, [pc, #68]	@ (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10c      	bne.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40013400 	.word	0x40013400
 8003d70:	40015000 	.word	0x40015000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40014000 	.word	0x40014000

08003d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e042      	b.n	8003e18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d106      	bne.n	8003daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7fd f9d7 	bl	8001158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2224      	movs	r2, #36	@ 0x24
 8003dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fc7a 	bl	80046c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f97b 	bl	80040cc <UART_SetConfig>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e01b      	b.n	8003e18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fcf9 	bl	8004808 <UART_CheckIdleState>
 8003e16:	4603      	mov	r3, r0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	@ 0x28
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d17b      	bne.n	8003f32 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_UART_Transmit+0x26>
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e074      	b.n	8003f34 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2221      	movs	r2, #33	@ 0x21
 8003e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e5a:	f7fd fb83 	bl	8001564 <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	88fa      	ldrh	r2, [r7, #6]
 8003e6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e78:	d108      	bne.n	8003e8c <HAL_UART_Transmit+0x6c>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d104      	bne.n	8003e8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	e003      	b.n	8003e94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e94:	e030      	b.n	8003ef8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2180      	movs	r1, #128	@ 0x80
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fd5b 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e03d      	b.n	8003f34 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10b      	bne.n	8003ed6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ecc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	3302      	adds	r3, #2
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	e007      	b.n	8003ee6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	781a      	ldrb	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1c8      	bne.n	8003e96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2140      	movs	r1, #64	@ 0x40
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fd24 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e006      	b.n	8003f34 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e000      	b.n	8003f34 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
  }
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	@ 0x28
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	f040 80b5 	bne.w	80040c2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_UART_Receive+0x28>
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0ad      	b.n	80040c4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2222      	movs	r2, #34	@ 0x22
 8003f74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f7e:	f7fd faf1 	bl	8001564 <HAL_GetTick>
 8003f82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9c:	d10e      	bne.n	8003fbc <HAL_UART_Receive+0x80>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d105      	bne.n	8003fb2 <HAL_UART_Receive+0x76>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003fac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003fb0:	e02d      	b.n	800400e <HAL_UART_Receive+0xd2>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22ff      	movs	r2, #255	@ 0xff
 8003fb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003fba:	e028      	b.n	800400e <HAL_UART_Receive+0xd2>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_UART_Receive+0xa4>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d104      	bne.n	8003fd6 <HAL_UART_Receive+0x9a>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	22ff      	movs	r2, #255	@ 0xff
 8003fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003fd4:	e01b      	b.n	800400e <HAL_UART_Receive+0xd2>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	227f      	movs	r2, #127	@ 0x7f
 8003fda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003fde:	e016      	b.n	800400e <HAL_UART_Receive+0xd2>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fe8:	d10d      	bne.n	8004006 <HAL_UART_Receive+0xca>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <HAL_UART_Receive+0xc0>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	227f      	movs	r2, #127	@ 0x7f
 8003ff6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ffa:	e008      	b.n	800400e <HAL_UART_Receive+0xd2>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	223f      	movs	r2, #63	@ 0x3f
 8004000:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004004:	e003      	b.n	800400e <HAL_UART_Receive+0xd2>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004014:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800401e:	d108      	bne.n	8004032 <HAL_UART_Receive+0xf6>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	e003      	b.n	800403a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800403a:	e036      	b.n	80040aa <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2200      	movs	r2, #0
 8004044:	2120      	movs	r1, #32
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fc88 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e032      	b.n	80040c4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10c      	bne.n	800407e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	b29a      	uxth	r2, r3
 800406c:	8a7b      	ldrh	r3, [r7, #18]
 800406e:	4013      	ands	r3, r2
 8004070:	b29a      	uxth	r2, r3
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	3302      	adds	r3, #2
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	e00c      	b.n	8004098 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	b2da      	uxtb	r2, r3
 8004086:	8a7b      	ldrh	r3, [r7, #18]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	4013      	ands	r3, r2
 800408c:	b2da      	uxtb	r2, r3
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3301      	adds	r3, #1
 8004096:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1c2      	bne.n	800403c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e000      	b.n	80040c4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80040c2:	2302      	movs	r3, #2
  }
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d0:	b08c      	sub	sp, #48	@ 0x30
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4baa      	ldr	r3, [pc, #680]	@ (80043a4 <UART_SetConfig+0x2d8>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004104:	430b      	orrs	r3, r1
 8004106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a9f      	ldr	r2, [pc, #636]	@ (80043a8 <UART_SetConfig+0x2dc>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004134:	4313      	orrs	r3, r2
 8004136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004142:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800414c:	430b      	orrs	r3, r1
 800414e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004156:	f023 010f 	bic.w	r1, r3, #15
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a90      	ldr	r2, [pc, #576]	@ (80043ac <UART_SetConfig+0x2e0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d125      	bne.n	80041bc <UART_SetConfig+0xf0>
 8004170:	4b8f      	ldr	r3, [pc, #572]	@ (80043b0 <UART_SetConfig+0x2e4>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b03      	cmp	r3, #3
 800417c:	d81a      	bhi.n	80041b4 <UART_SetConfig+0xe8>
 800417e:	a201      	add	r2, pc, #4	@ (adr r2, 8004184 <UART_SetConfig+0xb8>)
 8004180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004184:	08004195 	.word	0x08004195
 8004188:	080041a5 	.word	0x080041a5
 800418c:	0800419d 	.word	0x0800419d
 8004190:	080041ad 	.word	0x080041ad
 8004194:	2301      	movs	r3, #1
 8004196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800419a:	e116      	b.n	80043ca <UART_SetConfig+0x2fe>
 800419c:	2302      	movs	r3, #2
 800419e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041a2:	e112      	b.n	80043ca <UART_SetConfig+0x2fe>
 80041a4:	2304      	movs	r3, #4
 80041a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041aa:	e10e      	b.n	80043ca <UART_SetConfig+0x2fe>
 80041ac:	2308      	movs	r3, #8
 80041ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041b2:	e10a      	b.n	80043ca <UART_SetConfig+0x2fe>
 80041b4:	2310      	movs	r3, #16
 80041b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ba:	e106      	b.n	80043ca <UART_SetConfig+0x2fe>
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a7c      	ldr	r2, [pc, #496]	@ (80043b4 <UART_SetConfig+0x2e8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d138      	bne.n	8004238 <UART_SetConfig+0x16c>
 80041c6:	4b7a      	ldr	r3, [pc, #488]	@ (80043b0 <UART_SetConfig+0x2e4>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b0c      	cmp	r3, #12
 80041d2:	d82d      	bhi.n	8004230 <UART_SetConfig+0x164>
 80041d4:	a201      	add	r2, pc, #4	@ (adr r2, 80041dc <UART_SetConfig+0x110>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	08004211 	.word	0x08004211
 80041e0:	08004231 	.word	0x08004231
 80041e4:	08004231 	.word	0x08004231
 80041e8:	08004231 	.word	0x08004231
 80041ec:	08004221 	.word	0x08004221
 80041f0:	08004231 	.word	0x08004231
 80041f4:	08004231 	.word	0x08004231
 80041f8:	08004231 	.word	0x08004231
 80041fc:	08004219 	.word	0x08004219
 8004200:	08004231 	.word	0x08004231
 8004204:	08004231 	.word	0x08004231
 8004208:	08004231 	.word	0x08004231
 800420c:	08004229 	.word	0x08004229
 8004210:	2300      	movs	r3, #0
 8004212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004216:	e0d8      	b.n	80043ca <UART_SetConfig+0x2fe>
 8004218:	2302      	movs	r3, #2
 800421a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800421e:	e0d4      	b.n	80043ca <UART_SetConfig+0x2fe>
 8004220:	2304      	movs	r3, #4
 8004222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004226:	e0d0      	b.n	80043ca <UART_SetConfig+0x2fe>
 8004228:	2308      	movs	r3, #8
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800422e:	e0cc      	b.n	80043ca <UART_SetConfig+0x2fe>
 8004230:	2310      	movs	r3, #16
 8004232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004236:	e0c8      	b.n	80043ca <UART_SetConfig+0x2fe>
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a5e      	ldr	r2, [pc, #376]	@ (80043b8 <UART_SetConfig+0x2ec>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d125      	bne.n	800428e <UART_SetConfig+0x1c2>
 8004242:	4b5b      	ldr	r3, [pc, #364]	@ (80043b0 <UART_SetConfig+0x2e4>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004248:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800424c:	2b30      	cmp	r3, #48	@ 0x30
 800424e:	d016      	beq.n	800427e <UART_SetConfig+0x1b2>
 8004250:	2b30      	cmp	r3, #48	@ 0x30
 8004252:	d818      	bhi.n	8004286 <UART_SetConfig+0x1ba>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d00a      	beq.n	800426e <UART_SetConfig+0x1a2>
 8004258:	2b20      	cmp	r3, #32
 800425a:	d814      	bhi.n	8004286 <UART_SetConfig+0x1ba>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <UART_SetConfig+0x19a>
 8004260:	2b10      	cmp	r3, #16
 8004262:	d008      	beq.n	8004276 <UART_SetConfig+0x1aa>
 8004264:	e00f      	b.n	8004286 <UART_SetConfig+0x1ba>
 8004266:	2300      	movs	r3, #0
 8004268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800426c:	e0ad      	b.n	80043ca <UART_SetConfig+0x2fe>
 800426e:	2302      	movs	r3, #2
 8004270:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004274:	e0a9      	b.n	80043ca <UART_SetConfig+0x2fe>
 8004276:	2304      	movs	r3, #4
 8004278:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800427c:	e0a5      	b.n	80043ca <UART_SetConfig+0x2fe>
 800427e:	2308      	movs	r3, #8
 8004280:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004284:	e0a1      	b.n	80043ca <UART_SetConfig+0x2fe>
 8004286:	2310      	movs	r3, #16
 8004288:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800428c:	e09d      	b.n	80043ca <UART_SetConfig+0x2fe>
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a4a      	ldr	r2, [pc, #296]	@ (80043bc <UART_SetConfig+0x2f0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d125      	bne.n	80042e4 <UART_SetConfig+0x218>
 8004298:	4b45      	ldr	r3, [pc, #276]	@ (80043b0 <UART_SetConfig+0x2e4>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80042a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80042a4:	d016      	beq.n	80042d4 <UART_SetConfig+0x208>
 80042a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80042a8:	d818      	bhi.n	80042dc <UART_SetConfig+0x210>
 80042aa:	2b80      	cmp	r3, #128	@ 0x80
 80042ac:	d00a      	beq.n	80042c4 <UART_SetConfig+0x1f8>
 80042ae:	2b80      	cmp	r3, #128	@ 0x80
 80042b0:	d814      	bhi.n	80042dc <UART_SetConfig+0x210>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <UART_SetConfig+0x1f0>
 80042b6:	2b40      	cmp	r3, #64	@ 0x40
 80042b8:	d008      	beq.n	80042cc <UART_SetConfig+0x200>
 80042ba:	e00f      	b.n	80042dc <UART_SetConfig+0x210>
 80042bc:	2300      	movs	r3, #0
 80042be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042c2:	e082      	b.n	80043ca <UART_SetConfig+0x2fe>
 80042c4:	2302      	movs	r3, #2
 80042c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ca:	e07e      	b.n	80043ca <UART_SetConfig+0x2fe>
 80042cc:	2304      	movs	r3, #4
 80042ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042d2:	e07a      	b.n	80043ca <UART_SetConfig+0x2fe>
 80042d4:	2308      	movs	r3, #8
 80042d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042da:	e076      	b.n	80043ca <UART_SetConfig+0x2fe>
 80042dc:	2310      	movs	r3, #16
 80042de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042e2:	e072      	b.n	80043ca <UART_SetConfig+0x2fe>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a35      	ldr	r2, [pc, #212]	@ (80043c0 <UART_SetConfig+0x2f4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d12a      	bne.n	8004344 <UART_SetConfig+0x278>
 80042ee:	4b30      	ldr	r3, [pc, #192]	@ (80043b0 <UART_SetConfig+0x2e4>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042fc:	d01a      	beq.n	8004334 <UART_SetConfig+0x268>
 80042fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004302:	d81b      	bhi.n	800433c <UART_SetConfig+0x270>
 8004304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004308:	d00c      	beq.n	8004324 <UART_SetConfig+0x258>
 800430a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800430e:	d815      	bhi.n	800433c <UART_SetConfig+0x270>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <UART_SetConfig+0x250>
 8004314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004318:	d008      	beq.n	800432c <UART_SetConfig+0x260>
 800431a:	e00f      	b.n	800433c <UART_SetConfig+0x270>
 800431c:	2300      	movs	r3, #0
 800431e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004322:	e052      	b.n	80043ca <UART_SetConfig+0x2fe>
 8004324:	2302      	movs	r3, #2
 8004326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800432a:	e04e      	b.n	80043ca <UART_SetConfig+0x2fe>
 800432c:	2304      	movs	r3, #4
 800432e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004332:	e04a      	b.n	80043ca <UART_SetConfig+0x2fe>
 8004334:	2308      	movs	r3, #8
 8004336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800433a:	e046      	b.n	80043ca <UART_SetConfig+0x2fe>
 800433c:	2310      	movs	r3, #16
 800433e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004342:	e042      	b.n	80043ca <UART_SetConfig+0x2fe>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a17      	ldr	r2, [pc, #92]	@ (80043a8 <UART_SetConfig+0x2dc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d13a      	bne.n	80043c4 <UART_SetConfig+0x2f8>
 800434e:	4b18      	ldr	r3, [pc, #96]	@ (80043b0 <UART_SetConfig+0x2e4>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004354:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004358:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800435c:	d01a      	beq.n	8004394 <UART_SetConfig+0x2c8>
 800435e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004362:	d81b      	bhi.n	800439c <UART_SetConfig+0x2d0>
 8004364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004368:	d00c      	beq.n	8004384 <UART_SetConfig+0x2b8>
 800436a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800436e:	d815      	bhi.n	800439c <UART_SetConfig+0x2d0>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <UART_SetConfig+0x2b0>
 8004374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004378:	d008      	beq.n	800438c <UART_SetConfig+0x2c0>
 800437a:	e00f      	b.n	800439c <UART_SetConfig+0x2d0>
 800437c:	2300      	movs	r3, #0
 800437e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004382:	e022      	b.n	80043ca <UART_SetConfig+0x2fe>
 8004384:	2302      	movs	r3, #2
 8004386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800438a:	e01e      	b.n	80043ca <UART_SetConfig+0x2fe>
 800438c:	2304      	movs	r3, #4
 800438e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004392:	e01a      	b.n	80043ca <UART_SetConfig+0x2fe>
 8004394:	2308      	movs	r3, #8
 8004396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800439a:	e016      	b.n	80043ca <UART_SetConfig+0x2fe>
 800439c:	2310      	movs	r3, #16
 800439e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043a2:	e012      	b.n	80043ca <UART_SetConfig+0x2fe>
 80043a4:	cfff69f3 	.word	0xcfff69f3
 80043a8:	40008000 	.word	0x40008000
 80043ac:	40013800 	.word	0x40013800
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40004400 	.word	0x40004400
 80043b8:	40004800 	.word	0x40004800
 80043bc:	40004c00 	.word	0x40004c00
 80043c0:	40005000 	.word	0x40005000
 80043c4:	2310      	movs	r3, #16
 80043c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4aae      	ldr	r2, [pc, #696]	@ (8004688 <UART_SetConfig+0x5bc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	f040 8097 	bne.w	8004504 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d823      	bhi.n	8004426 <UART_SetConfig+0x35a>
 80043de:	a201      	add	r2, pc, #4	@ (adr r2, 80043e4 <UART_SetConfig+0x318>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	08004409 	.word	0x08004409
 80043e8:	08004427 	.word	0x08004427
 80043ec:	08004411 	.word	0x08004411
 80043f0:	08004427 	.word	0x08004427
 80043f4:	08004417 	.word	0x08004417
 80043f8:	08004427 	.word	0x08004427
 80043fc:	08004427 	.word	0x08004427
 8004400:	08004427 	.word	0x08004427
 8004404:	0800441f 	.word	0x0800441f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004408:	f7fe fb94 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 800440c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800440e:	e010      	b.n	8004432 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004410:	4b9e      	ldr	r3, [pc, #632]	@ (800468c <UART_SetConfig+0x5c0>)
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004414:	e00d      	b.n	8004432 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004416:	f7fe fb1f 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 800441a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800441c:	e009      	b.n	8004432 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004424:	e005      	b.n	8004432 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004430:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8130 	beq.w	800469a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	4a94      	ldr	r2, [pc, #592]	@ (8004690 <UART_SetConfig+0x5c4>)
 8004440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004444:	461a      	mov	r2, r3
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	fbb3 f3f2 	udiv	r3, r3, r2
 800444c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	429a      	cmp	r2, r3
 800445c:	d305      	bcc.n	800446a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	429a      	cmp	r2, r3
 8004468:	d903      	bls.n	8004472 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004470:	e113      	b.n	800469a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	2200      	movs	r2, #0
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	60fa      	str	r2, [r7, #12]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447e:	4a84      	ldr	r2, [pc, #528]	@ (8004690 <UART_SetConfig+0x5c4>)
 8004480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004484:	b29b      	uxth	r3, r3
 8004486:	2200      	movs	r2, #0
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004490:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004494:	f7fb ff14 	bl	80002c0 <__aeabi_uldivmod>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	020b      	lsls	r3, r1, #8
 80044aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044ae:	0202      	lsls	r2, r0, #8
 80044b0:	6979      	ldr	r1, [r7, #20]
 80044b2:	6849      	ldr	r1, [r1, #4]
 80044b4:	0849      	lsrs	r1, r1, #1
 80044b6:	2000      	movs	r0, #0
 80044b8:	460c      	mov	r4, r1
 80044ba:	4605      	mov	r5, r0
 80044bc:	eb12 0804 	adds.w	r8, r2, r4
 80044c0:	eb43 0905 	adc.w	r9, r3, r5
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	469a      	mov	sl, r3
 80044cc:	4693      	mov	fp, r2
 80044ce:	4652      	mov	r2, sl
 80044d0:	465b      	mov	r3, fp
 80044d2:	4640      	mov	r0, r8
 80044d4:	4649      	mov	r1, r9
 80044d6:	f7fb fef3 	bl	80002c0 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4613      	mov	r3, r2
 80044e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044e8:	d308      	bcc.n	80044fc <UART_SetConfig+0x430>
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044f0:	d204      	bcs.n	80044fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a3a      	ldr	r2, [r7, #32]
 80044f8:	60da      	str	r2, [r3, #12]
 80044fa:	e0ce      	b.n	800469a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004502:	e0ca      	b.n	800469a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800450c:	d166      	bne.n	80045dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800450e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004512:	2b08      	cmp	r3, #8
 8004514:	d827      	bhi.n	8004566 <UART_SetConfig+0x49a>
 8004516:	a201      	add	r2, pc, #4	@ (adr r2, 800451c <UART_SetConfig+0x450>)
 8004518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451c:	08004541 	.word	0x08004541
 8004520:	08004549 	.word	0x08004549
 8004524:	08004551 	.word	0x08004551
 8004528:	08004567 	.word	0x08004567
 800452c:	08004557 	.word	0x08004557
 8004530:	08004567 	.word	0x08004567
 8004534:	08004567 	.word	0x08004567
 8004538:	08004567 	.word	0x08004567
 800453c:	0800455f 	.word	0x0800455f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004540:	f7fe faf8 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8004544:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004546:	e014      	b.n	8004572 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004548:	f7fe fb0a 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 800454c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800454e:	e010      	b.n	8004572 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004550:	4b4e      	ldr	r3, [pc, #312]	@ (800468c <UART_SetConfig+0x5c0>)
 8004552:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004554:	e00d      	b.n	8004572 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004556:	f7fe fa7f 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 800455a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800455c:	e009      	b.n	8004572 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004564:	e005      	b.n	8004572 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004570:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8090 	beq.w	800469a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	4a44      	ldr	r2, [pc, #272]	@ (8004690 <UART_SetConfig+0x5c4>)
 8004580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004584:	461a      	mov	r2, r3
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	fbb3 f3f2 	udiv	r3, r3, r2
 800458c:	005a      	lsls	r2, r3, #1
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	441a      	add	r2, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	fbb2 f3f3 	udiv	r3, r2, r3
 800459e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	2b0f      	cmp	r3, #15
 80045a4:	d916      	bls.n	80045d4 <UART_SetConfig+0x508>
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ac:	d212      	bcs.n	80045d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f023 030f 	bic.w	r3, r3, #15
 80045b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	8bfb      	ldrh	r3, [r7, #30]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	8bfa      	ldrh	r2, [r7, #30]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	e062      	b.n	800469a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045da:	e05e      	b.n	800469a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d828      	bhi.n	8004636 <UART_SetConfig+0x56a>
 80045e4:	a201      	add	r2, pc, #4	@ (adr r2, 80045ec <UART_SetConfig+0x520>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004611 	.word	0x08004611
 80045f0:	08004619 	.word	0x08004619
 80045f4:	08004621 	.word	0x08004621
 80045f8:	08004637 	.word	0x08004637
 80045fc:	08004627 	.word	0x08004627
 8004600:	08004637 	.word	0x08004637
 8004604:	08004637 	.word	0x08004637
 8004608:	08004637 	.word	0x08004637
 800460c:	0800462f 	.word	0x0800462f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004610:	f7fe fa90 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8004614:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004616:	e014      	b.n	8004642 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004618:	f7fe faa2 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 800461c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800461e:	e010      	b.n	8004642 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004620:	4b1a      	ldr	r3, [pc, #104]	@ (800468c <UART_SetConfig+0x5c0>)
 8004622:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004624:	e00d      	b.n	8004642 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004626:	f7fe fa17 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 800462a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800462c:	e009      	b.n	8004642 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004632:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004634:	e005      	b.n	8004642 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004640:	bf00      	nop
    }

    if (pclk != 0U)
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d028      	beq.n	800469a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	4a10      	ldr	r2, [pc, #64]	@ (8004690 <UART_SetConfig+0x5c4>)
 800464e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004652:	461a      	mov	r2, r3
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	fbb3 f2f2 	udiv	r2, r3, r2
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	441a      	add	r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	fbb2 f3f3 	udiv	r3, r2, r3
 800466a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	2b0f      	cmp	r3, #15
 8004670:	d910      	bls.n	8004694 <UART_SetConfig+0x5c8>
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004678:	d20c      	bcs.n	8004694 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	b29a      	uxth	r2, r3
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60da      	str	r2, [r3, #12]
 8004684:	e009      	b.n	800469a <UART_SetConfig+0x5ce>
 8004686:	bf00      	nop
 8004688:	40008000 	.word	0x40008000
 800468c:	00f42400 	.word	0x00f42400
 8004690:	08005c88 	.word	0x08005c88
      }
      else
      {
        ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2201      	movs	r2, #1
 800469e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2200      	movs	r2, #0
 80046ae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2200      	movs	r2, #0
 80046b4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80046b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3730      	adds	r7, #48	@ 0x30
 80046be:	46bd      	mov	sp, r7
 80046c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080046c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01a      	beq.n	80047da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047c2:	d10a      	bne.n	80047da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	605a      	str	r2, [r3, #4]
  }
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b098      	sub	sp, #96	@ 0x60
 800480c:	af02      	add	r7, sp, #8
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004818:	f7fc fea4 	bl	8001564 <HAL_GetTick>
 800481c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b08      	cmp	r3, #8
 800482a:	d12f      	bne.n	800488c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800482c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004834:	2200      	movs	r2, #0
 8004836:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f88e 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d022      	beq.n	800488c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004856:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800485a:	653b      	str	r3, [r7, #80]	@ 0x50
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004864:	647b      	str	r3, [r7, #68]	@ 0x44
 8004866:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800486a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e6      	bne.n	8004846 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e063      	b.n	8004954 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b04      	cmp	r3, #4
 8004898:	d149      	bne.n	800492e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800489a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a2:	2200      	movs	r2, #0
 80048a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f857 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d03c      	beq.n	800492e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	623b      	str	r3, [r7, #32]
   return(result);
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80048d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e6      	bne.n	80048b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3308      	adds	r3, #8
 80048ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3308      	adds	r3, #8
 8004904:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004906:	61fa      	str	r2, [r7, #28]
 8004908:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	69b9      	ldr	r1, [r7, #24]
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	617b      	str	r3, [r7, #20]
   return(result);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e5      	bne.n	80048e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e012      	b.n	8004954 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3758      	adds	r7, #88	@ 0x58
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496c:	e04f      	b.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004974:	d04b      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004976:	f7fc fdf5 	bl	8001564 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <UART_WaitOnFlagUntilTimeout+0x30>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e04e      	b.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d037      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b80      	cmp	r3, #128	@ 0x80
 80049a2:	d034      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb2>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b40      	cmp	r3, #64	@ 0x40
 80049a8:	d031      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d110      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2208      	movs	r2, #8
 80049be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f838 	bl	8004a36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2208      	movs	r2, #8
 80049ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e029      	b.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049e8:	d111      	bne.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f81e 	bl	8004a36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e00f      	b.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4013      	ands	r3, r2
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d0a0      	beq.n	800496e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b095      	sub	sp, #84	@ 0x54
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e6      	bne.n	8004a3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3308      	adds	r3, #8
 8004a76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a86:	f023 0301 	bic.w	r3, r3, #1
 8004a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3308      	adds	r3, #8
 8004a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e3      	bne.n	8004a70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d118      	bne.n	8004ae2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f023 0310 	bic.w	r3, r3, #16
 8004ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6979      	ldr	r1, [r7, #20]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	613b      	str	r3, [r7, #16]
   return(result);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e6      	bne.n	8004ab0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004af6:	bf00      	nop
 8004af8:	3754      	adds	r7, #84	@ 0x54
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e027      	b.n	8004b68 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2224      	movs	r2, #36	@ 0x24
 8004b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004b46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e02d      	b.n	8004be8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2224      	movs	r2, #36	@ 0x24
 8004b98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f84f 	bl	8004c6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e02d      	b.n	8004c64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2224      	movs	r2, #36	@ 0x24
 8004c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f811 	bl	8004c6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d108      	bne.n	8004c8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c8c:	e031      	b.n	8004cf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c8e:	2308      	movs	r3, #8
 8004c90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c92:	2308      	movs	r3, #8
 8004c94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	0e5b      	lsrs	r3, r3, #25
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	0f5b      	lsrs	r3, r3, #29
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cb6:	7bbb      	ldrb	r3, [r7, #14]
 8004cb8:	7b3a      	ldrb	r2, [r7, #12]
 8004cba:	4911      	ldr	r1, [pc, #68]	@ (8004d00 <UARTEx_SetNbDataToProcess+0x94>)
 8004cbc:	5c8a      	ldrb	r2, [r1, r2]
 8004cbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004cc2:	7b3a      	ldrb	r2, [r7, #12]
 8004cc4:	490f      	ldr	r1, [pc, #60]	@ (8004d04 <UARTEx_SetNbDataToProcess+0x98>)
 8004cc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	7b7a      	ldrb	r2, [r7, #13]
 8004cd8:	4909      	ldr	r1, [pc, #36]	@ (8004d00 <UARTEx_SetNbDataToProcess+0x94>)
 8004cda:	5c8a      	ldrb	r2, [r1, r2]
 8004cdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ce0:	7b7a      	ldrb	r2, [r7, #13]
 8004ce2:	4908      	ldr	r1, [pc, #32]	@ (8004d04 <UARTEx_SetNbDataToProcess+0x98>)
 8004ce4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ce6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	08005ca0 	.word	0x08005ca0
 8004d04:	08005ca8 	.word	0x08005ca8

08004d08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d10:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004d14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	4013      	ands	r3, r2
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	1d3b      	adds	r3, r7, #4
 8004d48:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <std>:
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	b510      	push	{r4, lr}
 8004d80:	4604      	mov	r4, r0
 8004d82:	e9c0 3300 	strd	r3, r3, [r0]
 8004d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d8a:	6083      	str	r3, [r0, #8]
 8004d8c:	8181      	strh	r1, [r0, #12]
 8004d8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d90:	81c2      	strh	r2, [r0, #14]
 8004d92:	6183      	str	r3, [r0, #24]
 8004d94:	4619      	mov	r1, r3
 8004d96:	2208      	movs	r2, #8
 8004d98:	305c      	adds	r0, #92	@ 0x5c
 8004d9a:	f000 f906 	bl	8004faa <memset>
 8004d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd4 <std+0x58>)
 8004da0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004da2:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd8 <std+0x5c>)
 8004da4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004da6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ddc <std+0x60>)
 8004da8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004daa:	4b0d      	ldr	r3, [pc, #52]	@ (8004de0 <std+0x64>)
 8004dac:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dae:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <std+0x68>)
 8004db0:	6224      	str	r4, [r4, #32]
 8004db2:	429c      	cmp	r4, r3
 8004db4:	d006      	beq.n	8004dc4 <std+0x48>
 8004db6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004dba:	4294      	cmp	r4, r2
 8004dbc:	d002      	beq.n	8004dc4 <std+0x48>
 8004dbe:	33d0      	adds	r3, #208	@ 0xd0
 8004dc0:	429c      	cmp	r4, r3
 8004dc2:	d105      	bne.n	8004dd0 <std+0x54>
 8004dc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dcc:	f000 b966 	b.w	800509c <__retarget_lock_init_recursive>
 8004dd0:	bd10      	pop	{r4, pc}
 8004dd2:	bf00      	nop
 8004dd4:	08004f25 	.word	0x08004f25
 8004dd8:	08004f47 	.word	0x08004f47
 8004ddc:	08004f7f 	.word	0x08004f7f
 8004de0:	08004fa3 	.word	0x08004fa3
 8004de4:	200005f0 	.word	0x200005f0

08004de8 <stdio_exit_handler>:
 8004de8:	4a02      	ldr	r2, [pc, #8]	@ (8004df4 <stdio_exit_handler+0xc>)
 8004dea:	4903      	ldr	r1, [pc, #12]	@ (8004df8 <stdio_exit_handler+0x10>)
 8004dec:	4803      	ldr	r0, [pc, #12]	@ (8004dfc <stdio_exit_handler+0x14>)
 8004dee:	f000 b869 	b.w	8004ec4 <_fwalk_sglue>
 8004df2:	bf00      	nop
 8004df4:	2000000c 	.word	0x2000000c
 8004df8:	0800593d 	.word	0x0800593d
 8004dfc:	2000001c 	.word	0x2000001c

08004e00 <cleanup_stdio>:
 8004e00:	6841      	ldr	r1, [r0, #4]
 8004e02:	4b0c      	ldr	r3, [pc, #48]	@ (8004e34 <cleanup_stdio+0x34>)
 8004e04:	4299      	cmp	r1, r3
 8004e06:	b510      	push	{r4, lr}
 8004e08:	4604      	mov	r4, r0
 8004e0a:	d001      	beq.n	8004e10 <cleanup_stdio+0x10>
 8004e0c:	f000 fd96 	bl	800593c <_fflush_r>
 8004e10:	68a1      	ldr	r1, [r4, #8]
 8004e12:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <cleanup_stdio+0x38>)
 8004e14:	4299      	cmp	r1, r3
 8004e16:	d002      	beq.n	8004e1e <cleanup_stdio+0x1e>
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f000 fd8f 	bl	800593c <_fflush_r>
 8004e1e:	68e1      	ldr	r1, [r4, #12]
 8004e20:	4b06      	ldr	r3, [pc, #24]	@ (8004e3c <cleanup_stdio+0x3c>)
 8004e22:	4299      	cmp	r1, r3
 8004e24:	d004      	beq.n	8004e30 <cleanup_stdio+0x30>
 8004e26:	4620      	mov	r0, r4
 8004e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e2c:	f000 bd86 	b.w	800593c <_fflush_r>
 8004e30:	bd10      	pop	{r4, pc}
 8004e32:	bf00      	nop
 8004e34:	200005f0 	.word	0x200005f0
 8004e38:	20000658 	.word	0x20000658
 8004e3c:	200006c0 	.word	0x200006c0

08004e40 <global_stdio_init.part.0>:
 8004e40:	b510      	push	{r4, lr}
 8004e42:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <global_stdio_init.part.0+0x30>)
 8004e44:	4c0b      	ldr	r4, [pc, #44]	@ (8004e74 <global_stdio_init.part.0+0x34>)
 8004e46:	4a0c      	ldr	r2, [pc, #48]	@ (8004e78 <global_stdio_init.part.0+0x38>)
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2104      	movs	r1, #4
 8004e50:	f7ff ff94 	bl	8004d7c <std>
 8004e54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e58:	2201      	movs	r2, #1
 8004e5a:	2109      	movs	r1, #9
 8004e5c:	f7ff ff8e 	bl	8004d7c <std>
 8004e60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e64:	2202      	movs	r2, #2
 8004e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e6a:	2112      	movs	r1, #18
 8004e6c:	f7ff bf86 	b.w	8004d7c <std>
 8004e70:	20000728 	.word	0x20000728
 8004e74:	200005f0 	.word	0x200005f0
 8004e78:	08004de9 	.word	0x08004de9

08004e7c <__sfp_lock_acquire>:
 8004e7c:	4801      	ldr	r0, [pc, #4]	@ (8004e84 <__sfp_lock_acquire+0x8>)
 8004e7e:	f000 b90e 	b.w	800509e <__retarget_lock_acquire_recursive>
 8004e82:	bf00      	nop
 8004e84:	20000731 	.word	0x20000731

08004e88 <__sfp_lock_release>:
 8004e88:	4801      	ldr	r0, [pc, #4]	@ (8004e90 <__sfp_lock_release+0x8>)
 8004e8a:	f000 b909 	b.w	80050a0 <__retarget_lock_release_recursive>
 8004e8e:	bf00      	nop
 8004e90:	20000731 	.word	0x20000731

08004e94 <__sinit>:
 8004e94:	b510      	push	{r4, lr}
 8004e96:	4604      	mov	r4, r0
 8004e98:	f7ff fff0 	bl	8004e7c <__sfp_lock_acquire>
 8004e9c:	6a23      	ldr	r3, [r4, #32]
 8004e9e:	b11b      	cbz	r3, 8004ea8 <__sinit+0x14>
 8004ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea4:	f7ff bff0 	b.w	8004e88 <__sfp_lock_release>
 8004ea8:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <__sinit+0x28>)
 8004eaa:	6223      	str	r3, [r4, #32]
 8004eac:	4b04      	ldr	r3, [pc, #16]	@ (8004ec0 <__sinit+0x2c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1f5      	bne.n	8004ea0 <__sinit+0xc>
 8004eb4:	f7ff ffc4 	bl	8004e40 <global_stdio_init.part.0>
 8004eb8:	e7f2      	b.n	8004ea0 <__sinit+0xc>
 8004eba:	bf00      	nop
 8004ebc:	08004e01 	.word	0x08004e01
 8004ec0:	20000728 	.word	0x20000728

08004ec4 <_fwalk_sglue>:
 8004ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec8:	4607      	mov	r7, r0
 8004eca:	4688      	mov	r8, r1
 8004ecc:	4614      	mov	r4, r2
 8004ece:	2600      	movs	r6, #0
 8004ed0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ed4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ed8:	d505      	bpl.n	8004ee6 <_fwalk_sglue+0x22>
 8004eda:	6824      	ldr	r4, [r4, #0]
 8004edc:	2c00      	cmp	r4, #0
 8004ede:	d1f7      	bne.n	8004ed0 <_fwalk_sglue+0xc>
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ee6:	89ab      	ldrh	r3, [r5, #12]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d907      	bls.n	8004efc <_fwalk_sglue+0x38>
 8004eec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	d003      	beq.n	8004efc <_fwalk_sglue+0x38>
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	47c0      	blx	r8
 8004efa:	4306      	orrs	r6, r0
 8004efc:	3568      	adds	r5, #104	@ 0x68
 8004efe:	e7e9      	b.n	8004ed4 <_fwalk_sglue+0x10>

08004f00 <iprintf>:
 8004f00:	b40f      	push	{r0, r1, r2, r3}
 8004f02:	b507      	push	{r0, r1, r2, lr}
 8004f04:	4906      	ldr	r1, [pc, #24]	@ (8004f20 <iprintf+0x20>)
 8004f06:	ab04      	add	r3, sp, #16
 8004f08:	6808      	ldr	r0, [r1, #0]
 8004f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f0e:	6881      	ldr	r1, [r0, #8]
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	f000 f9e9 	bl	80052e8 <_vfiprintf_r>
 8004f16:	b003      	add	sp, #12
 8004f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f1c:	b004      	add	sp, #16
 8004f1e:	4770      	bx	lr
 8004f20:	20000018 	.word	0x20000018

08004f24 <__sread>:
 8004f24:	b510      	push	{r4, lr}
 8004f26:	460c      	mov	r4, r1
 8004f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2c:	f000 f868 	bl	8005000 <_read_r>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	bfab      	itete	ge
 8004f34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f36:	89a3      	ldrhlt	r3, [r4, #12]
 8004f38:	181b      	addge	r3, r3, r0
 8004f3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f3e:	bfac      	ite	ge
 8004f40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f42:	81a3      	strhlt	r3, [r4, #12]
 8004f44:	bd10      	pop	{r4, pc}

08004f46 <__swrite>:
 8004f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4a:	461f      	mov	r7, r3
 8004f4c:	898b      	ldrh	r3, [r1, #12]
 8004f4e:	05db      	lsls	r3, r3, #23
 8004f50:	4605      	mov	r5, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	4616      	mov	r6, r2
 8004f56:	d505      	bpl.n	8004f64 <__swrite+0x1e>
 8004f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f000 f83c 	bl	8004fdc <_lseek_r>
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f6e:	81a3      	strh	r3, [r4, #12]
 8004f70:	4632      	mov	r2, r6
 8004f72:	463b      	mov	r3, r7
 8004f74:	4628      	mov	r0, r5
 8004f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f7a:	f000 b853 	b.w	8005024 <_write_r>

08004f7e <__sseek>:
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	460c      	mov	r4, r1
 8004f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f86:	f000 f829 	bl	8004fdc <_lseek_r>
 8004f8a:	1c43      	adds	r3, r0, #1
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	bf15      	itete	ne
 8004f90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f9a:	81a3      	strheq	r3, [r4, #12]
 8004f9c:	bf18      	it	ne
 8004f9e:	81a3      	strhne	r3, [r4, #12]
 8004fa0:	bd10      	pop	{r4, pc}

08004fa2 <__sclose>:
 8004fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa6:	f000 b809 	b.w	8004fbc <_close_r>

08004faa <memset>:
 8004faa:	4402      	add	r2, r0
 8004fac:	4603      	mov	r3, r0
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d100      	bne.n	8004fb4 <memset+0xa>
 8004fb2:	4770      	bx	lr
 8004fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb8:	e7f9      	b.n	8004fae <memset+0x4>
	...

08004fbc <_close_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4d06      	ldr	r5, [pc, #24]	@ (8004fd8 <_close_r+0x1c>)
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	602b      	str	r3, [r5, #0]
 8004fc8:	f7fc f9c1 	bl	800134e <_close>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_close_r+0x1a>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_close_r+0x1a>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	2000072c 	.word	0x2000072c

08004fdc <_lseek_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4d07      	ldr	r5, [pc, #28]	@ (8004ffc <_lseek_r+0x20>)
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	4608      	mov	r0, r1
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	602a      	str	r2, [r5, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f7fc f9d6 	bl	800139c <_lseek>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_lseek_r+0x1e>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_lseek_r+0x1e>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	2000072c 	.word	0x2000072c

08005000 <_read_r>:
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	4d07      	ldr	r5, [pc, #28]	@ (8005020 <_read_r+0x20>)
 8005004:	4604      	mov	r4, r0
 8005006:	4608      	mov	r0, r1
 8005008:	4611      	mov	r1, r2
 800500a:	2200      	movs	r2, #0
 800500c:	602a      	str	r2, [r5, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	f7fb face 	bl	80005b0 <_read>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d102      	bne.n	800501e <_read_r+0x1e>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	b103      	cbz	r3, 800501e <_read_r+0x1e>
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	bd38      	pop	{r3, r4, r5, pc}
 8005020:	2000072c 	.word	0x2000072c

08005024 <_write_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	4d07      	ldr	r5, [pc, #28]	@ (8005044 <_write_r+0x20>)
 8005028:	4604      	mov	r4, r0
 800502a:	4608      	mov	r0, r1
 800502c:	4611      	mov	r1, r2
 800502e:	2200      	movs	r2, #0
 8005030:	602a      	str	r2, [r5, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	f7fb fad0 	bl	80005d8 <_write>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_write_r+0x1e>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	b103      	cbz	r3, 8005042 <_write_r+0x1e>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	2000072c 	.word	0x2000072c

08005048 <__errno>:
 8005048:	4b01      	ldr	r3, [pc, #4]	@ (8005050 <__errno+0x8>)
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20000018 	.word	0x20000018

08005054 <__libc_init_array>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	4d0d      	ldr	r5, [pc, #52]	@ (800508c <__libc_init_array+0x38>)
 8005058:	4c0d      	ldr	r4, [pc, #52]	@ (8005090 <__libc_init_array+0x3c>)
 800505a:	1b64      	subs	r4, r4, r5
 800505c:	10a4      	asrs	r4, r4, #2
 800505e:	2600      	movs	r6, #0
 8005060:	42a6      	cmp	r6, r4
 8005062:	d109      	bne.n	8005078 <__libc_init_array+0x24>
 8005064:	4d0b      	ldr	r5, [pc, #44]	@ (8005094 <__libc_init_array+0x40>)
 8005066:	4c0c      	ldr	r4, [pc, #48]	@ (8005098 <__libc_init_array+0x44>)
 8005068:	f000 fdb8 	bl	8005bdc <_init>
 800506c:	1b64      	subs	r4, r4, r5
 800506e:	10a4      	asrs	r4, r4, #2
 8005070:	2600      	movs	r6, #0
 8005072:	42a6      	cmp	r6, r4
 8005074:	d105      	bne.n	8005082 <__libc_init_array+0x2e>
 8005076:	bd70      	pop	{r4, r5, r6, pc}
 8005078:	f855 3b04 	ldr.w	r3, [r5], #4
 800507c:	4798      	blx	r3
 800507e:	3601      	adds	r6, #1
 8005080:	e7ee      	b.n	8005060 <__libc_init_array+0xc>
 8005082:	f855 3b04 	ldr.w	r3, [r5], #4
 8005086:	4798      	blx	r3
 8005088:	3601      	adds	r6, #1
 800508a:	e7f2      	b.n	8005072 <__libc_init_array+0x1e>
 800508c:	08005cec 	.word	0x08005cec
 8005090:	08005cec 	.word	0x08005cec
 8005094:	08005cec 	.word	0x08005cec
 8005098:	08005cf0 	.word	0x08005cf0

0800509c <__retarget_lock_init_recursive>:
 800509c:	4770      	bx	lr

0800509e <__retarget_lock_acquire_recursive>:
 800509e:	4770      	bx	lr

080050a0 <__retarget_lock_release_recursive>:
 80050a0:	4770      	bx	lr
	...

080050a4 <_free_r>:
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	4605      	mov	r5, r0
 80050a8:	2900      	cmp	r1, #0
 80050aa:	d041      	beq.n	8005130 <_free_r+0x8c>
 80050ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050b0:	1f0c      	subs	r4, r1, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bfb8      	it	lt
 80050b6:	18e4      	addlt	r4, r4, r3
 80050b8:	f000 f8e0 	bl	800527c <__malloc_lock>
 80050bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005134 <_free_r+0x90>)
 80050be:	6813      	ldr	r3, [r2, #0]
 80050c0:	b933      	cbnz	r3, 80050d0 <_free_r+0x2c>
 80050c2:	6063      	str	r3, [r4, #4]
 80050c4:	6014      	str	r4, [r2, #0]
 80050c6:	4628      	mov	r0, r5
 80050c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050cc:	f000 b8dc 	b.w	8005288 <__malloc_unlock>
 80050d0:	42a3      	cmp	r3, r4
 80050d2:	d908      	bls.n	80050e6 <_free_r+0x42>
 80050d4:	6820      	ldr	r0, [r4, #0]
 80050d6:	1821      	adds	r1, r4, r0
 80050d8:	428b      	cmp	r3, r1
 80050da:	bf01      	itttt	eq
 80050dc:	6819      	ldreq	r1, [r3, #0]
 80050de:	685b      	ldreq	r3, [r3, #4]
 80050e0:	1809      	addeq	r1, r1, r0
 80050e2:	6021      	streq	r1, [r4, #0]
 80050e4:	e7ed      	b.n	80050c2 <_free_r+0x1e>
 80050e6:	461a      	mov	r2, r3
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	b10b      	cbz	r3, 80050f0 <_free_r+0x4c>
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	d9fa      	bls.n	80050e6 <_free_r+0x42>
 80050f0:	6811      	ldr	r1, [r2, #0]
 80050f2:	1850      	adds	r0, r2, r1
 80050f4:	42a0      	cmp	r0, r4
 80050f6:	d10b      	bne.n	8005110 <_free_r+0x6c>
 80050f8:	6820      	ldr	r0, [r4, #0]
 80050fa:	4401      	add	r1, r0
 80050fc:	1850      	adds	r0, r2, r1
 80050fe:	4283      	cmp	r3, r0
 8005100:	6011      	str	r1, [r2, #0]
 8005102:	d1e0      	bne.n	80050c6 <_free_r+0x22>
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	6053      	str	r3, [r2, #4]
 800510a:	4408      	add	r0, r1
 800510c:	6010      	str	r0, [r2, #0]
 800510e:	e7da      	b.n	80050c6 <_free_r+0x22>
 8005110:	d902      	bls.n	8005118 <_free_r+0x74>
 8005112:	230c      	movs	r3, #12
 8005114:	602b      	str	r3, [r5, #0]
 8005116:	e7d6      	b.n	80050c6 <_free_r+0x22>
 8005118:	6820      	ldr	r0, [r4, #0]
 800511a:	1821      	adds	r1, r4, r0
 800511c:	428b      	cmp	r3, r1
 800511e:	bf04      	itt	eq
 8005120:	6819      	ldreq	r1, [r3, #0]
 8005122:	685b      	ldreq	r3, [r3, #4]
 8005124:	6063      	str	r3, [r4, #4]
 8005126:	bf04      	itt	eq
 8005128:	1809      	addeq	r1, r1, r0
 800512a:	6021      	streq	r1, [r4, #0]
 800512c:	6054      	str	r4, [r2, #4]
 800512e:	e7ca      	b.n	80050c6 <_free_r+0x22>
 8005130:	bd38      	pop	{r3, r4, r5, pc}
 8005132:	bf00      	nop
 8005134:	20000738 	.word	0x20000738

08005138 <sbrk_aligned>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	4e0f      	ldr	r6, [pc, #60]	@ (8005178 <sbrk_aligned+0x40>)
 800513c:	460c      	mov	r4, r1
 800513e:	6831      	ldr	r1, [r6, #0]
 8005140:	4605      	mov	r5, r0
 8005142:	b911      	cbnz	r1, 800514a <sbrk_aligned+0x12>
 8005144:	f000 fcb6 	bl	8005ab4 <_sbrk_r>
 8005148:	6030      	str	r0, [r6, #0]
 800514a:	4621      	mov	r1, r4
 800514c:	4628      	mov	r0, r5
 800514e:	f000 fcb1 	bl	8005ab4 <_sbrk_r>
 8005152:	1c43      	adds	r3, r0, #1
 8005154:	d103      	bne.n	800515e <sbrk_aligned+0x26>
 8005156:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800515a:	4620      	mov	r0, r4
 800515c:	bd70      	pop	{r4, r5, r6, pc}
 800515e:	1cc4      	adds	r4, r0, #3
 8005160:	f024 0403 	bic.w	r4, r4, #3
 8005164:	42a0      	cmp	r0, r4
 8005166:	d0f8      	beq.n	800515a <sbrk_aligned+0x22>
 8005168:	1a21      	subs	r1, r4, r0
 800516a:	4628      	mov	r0, r5
 800516c:	f000 fca2 	bl	8005ab4 <_sbrk_r>
 8005170:	3001      	adds	r0, #1
 8005172:	d1f2      	bne.n	800515a <sbrk_aligned+0x22>
 8005174:	e7ef      	b.n	8005156 <sbrk_aligned+0x1e>
 8005176:	bf00      	nop
 8005178:	20000734 	.word	0x20000734

0800517c <_malloc_r>:
 800517c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005180:	1ccd      	adds	r5, r1, #3
 8005182:	f025 0503 	bic.w	r5, r5, #3
 8005186:	3508      	adds	r5, #8
 8005188:	2d0c      	cmp	r5, #12
 800518a:	bf38      	it	cc
 800518c:	250c      	movcc	r5, #12
 800518e:	2d00      	cmp	r5, #0
 8005190:	4606      	mov	r6, r0
 8005192:	db01      	blt.n	8005198 <_malloc_r+0x1c>
 8005194:	42a9      	cmp	r1, r5
 8005196:	d904      	bls.n	80051a2 <_malloc_r+0x26>
 8005198:	230c      	movs	r3, #12
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	2000      	movs	r0, #0
 800519e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005278 <_malloc_r+0xfc>
 80051a6:	f000 f869 	bl	800527c <__malloc_lock>
 80051aa:	f8d8 3000 	ldr.w	r3, [r8]
 80051ae:	461c      	mov	r4, r3
 80051b0:	bb44      	cbnz	r4, 8005204 <_malloc_r+0x88>
 80051b2:	4629      	mov	r1, r5
 80051b4:	4630      	mov	r0, r6
 80051b6:	f7ff ffbf 	bl	8005138 <sbrk_aligned>
 80051ba:	1c43      	adds	r3, r0, #1
 80051bc:	4604      	mov	r4, r0
 80051be:	d158      	bne.n	8005272 <_malloc_r+0xf6>
 80051c0:	f8d8 4000 	ldr.w	r4, [r8]
 80051c4:	4627      	mov	r7, r4
 80051c6:	2f00      	cmp	r7, #0
 80051c8:	d143      	bne.n	8005252 <_malloc_r+0xd6>
 80051ca:	2c00      	cmp	r4, #0
 80051cc:	d04b      	beq.n	8005266 <_malloc_r+0xea>
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	4639      	mov	r1, r7
 80051d2:	4630      	mov	r0, r6
 80051d4:	eb04 0903 	add.w	r9, r4, r3
 80051d8:	f000 fc6c 	bl	8005ab4 <_sbrk_r>
 80051dc:	4581      	cmp	r9, r0
 80051de:	d142      	bne.n	8005266 <_malloc_r+0xea>
 80051e0:	6821      	ldr	r1, [r4, #0]
 80051e2:	1a6d      	subs	r5, r5, r1
 80051e4:	4629      	mov	r1, r5
 80051e6:	4630      	mov	r0, r6
 80051e8:	f7ff ffa6 	bl	8005138 <sbrk_aligned>
 80051ec:	3001      	adds	r0, #1
 80051ee:	d03a      	beq.n	8005266 <_malloc_r+0xea>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	442b      	add	r3, r5
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	f8d8 3000 	ldr.w	r3, [r8]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	bb62      	cbnz	r2, 8005258 <_malloc_r+0xdc>
 80051fe:	f8c8 7000 	str.w	r7, [r8]
 8005202:	e00f      	b.n	8005224 <_malloc_r+0xa8>
 8005204:	6822      	ldr	r2, [r4, #0]
 8005206:	1b52      	subs	r2, r2, r5
 8005208:	d420      	bmi.n	800524c <_malloc_r+0xd0>
 800520a:	2a0b      	cmp	r2, #11
 800520c:	d917      	bls.n	800523e <_malloc_r+0xc2>
 800520e:	1961      	adds	r1, r4, r5
 8005210:	42a3      	cmp	r3, r4
 8005212:	6025      	str	r5, [r4, #0]
 8005214:	bf18      	it	ne
 8005216:	6059      	strne	r1, [r3, #4]
 8005218:	6863      	ldr	r3, [r4, #4]
 800521a:	bf08      	it	eq
 800521c:	f8c8 1000 	streq.w	r1, [r8]
 8005220:	5162      	str	r2, [r4, r5]
 8005222:	604b      	str	r3, [r1, #4]
 8005224:	4630      	mov	r0, r6
 8005226:	f000 f82f 	bl	8005288 <__malloc_unlock>
 800522a:	f104 000b 	add.w	r0, r4, #11
 800522e:	1d23      	adds	r3, r4, #4
 8005230:	f020 0007 	bic.w	r0, r0, #7
 8005234:	1ac2      	subs	r2, r0, r3
 8005236:	bf1c      	itt	ne
 8005238:	1a1b      	subne	r3, r3, r0
 800523a:	50a3      	strne	r3, [r4, r2]
 800523c:	e7af      	b.n	800519e <_malloc_r+0x22>
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	42a3      	cmp	r3, r4
 8005242:	bf0c      	ite	eq
 8005244:	f8c8 2000 	streq.w	r2, [r8]
 8005248:	605a      	strne	r2, [r3, #4]
 800524a:	e7eb      	b.n	8005224 <_malloc_r+0xa8>
 800524c:	4623      	mov	r3, r4
 800524e:	6864      	ldr	r4, [r4, #4]
 8005250:	e7ae      	b.n	80051b0 <_malloc_r+0x34>
 8005252:	463c      	mov	r4, r7
 8005254:	687f      	ldr	r7, [r7, #4]
 8005256:	e7b6      	b.n	80051c6 <_malloc_r+0x4a>
 8005258:	461a      	mov	r2, r3
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	42a3      	cmp	r3, r4
 800525e:	d1fb      	bne.n	8005258 <_malloc_r+0xdc>
 8005260:	2300      	movs	r3, #0
 8005262:	6053      	str	r3, [r2, #4]
 8005264:	e7de      	b.n	8005224 <_malloc_r+0xa8>
 8005266:	230c      	movs	r3, #12
 8005268:	6033      	str	r3, [r6, #0]
 800526a:	4630      	mov	r0, r6
 800526c:	f000 f80c 	bl	8005288 <__malloc_unlock>
 8005270:	e794      	b.n	800519c <_malloc_r+0x20>
 8005272:	6005      	str	r5, [r0, #0]
 8005274:	e7d6      	b.n	8005224 <_malloc_r+0xa8>
 8005276:	bf00      	nop
 8005278:	20000738 	.word	0x20000738

0800527c <__malloc_lock>:
 800527c:	4801      	ldr	r0, [pc, #4]	@ (8005284 <__malloc_lock+0x8>)
 800527e:	f7ff bf0e 	b.w	800509e <__retarget_lock_acquire_recursive>
 8005282:	bf00      	nop
 8005284:	20000730 	.word	0x20000730

08005288 <__malloc_unlock>:
 8005288:	4801      	ldr	r0, [pc, #4]	@ (8005290 <__malloc_unlock+0x8>)
 800528a:	f7ff bf09 	b.w	80050a0 <__retarget_lock_release_recursive>
 800528e:	bf00      	nop
 8005290:	20000730 	.word	0x20000730

08005294 <__sfputc_r>:
 8005294:	6893      	ldr	r3, [r2, #8]
 8005296:	3b01      	subs	r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	b410      	push	{r4}
 800529c:	6093      	str	r3, [r2, #8]
 800529e:	da08      	bge.n	80052b2 <__sfputc_r+0x1e>
 80052a0:	6994      	ldr	r4, [r2, #24]
 80052a2:	42a3      	cmp	r3, r4
 80052a4:	db01      	blt.n	80052aa <__sfputc_r+0x16>
 80052a6:	290a      	cmp	r1, #10
 80052a8:	d103      	bne.n	80052b2 <__sfputc_r+0x1e>
 80052aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ae:	f000 bb6d 	b.w	800598c <__swbuf_r>
 80052b2:	6813      	ldr	r3, [r2, #0]
 80052b4:	1c58      	adds	r0, r3, #1
 80052b6:	6010      	str	r0, [r2, #0]
 80052b8:	7019      	strb	r1, [r3, #0]
 80052ba:	4608      	mov	r0, r1
 80052bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <__sfputs_r>:
 80052c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c4:	4606      	mov	r6, r0
 80052c6:	460f      	mov	r7, r1
 80052c8:	4614      	mov	r4, r2
 80052ca:	18d5      	adds	r5, r2, r3
 80052cc:	42ac      	cmp	r4, r5
 80052ce:	d101      	bne.n	80052d4 <__sfputs_r+0x12>
 80052d0:	2000      	movs	r0, #0
 80052d2:	e007      	b.n	80052e4 <__sfputs_r+0x22>
 80052d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052d8:	463a      	mov	r2, r7
 80052da:	4630      	mov	r0, r6
 80052dc:	f7ff ffda 	bl	8005294 <__sfputc_r>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d1f3      	bne.n	80052cc <__sfputs_r+0xa>
 80052e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052e8 <_vfiprintf_r>:
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	460d      	mov	r5, r1
 80052ee:	b09d      	sub	sp, #116	@ 0x74
 80052f0:	4614      	mov	r4, r2
 80052f2:	4698      	mov	r8, r3
 80052f4:	4606      	mov	r6, r0
 80052f6:	b118      	cbz	r0, 8005300 <_vfiprintf_r+0x18>
 80052f8:	6a03      	ldr	r3, [r0, #32]
 80052fa:	b90b      	cbnz	r3, 8005300 <_vfiprintf_r+0x18>
 80052fc:	f7ff fdca 	bl	8004e94 <__sinit>
 8005300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005302:	07d9      	lsls	r1, r3, #31
 8005304:	d405      	bmi.n	8005312 <_vfiprintf_r+0x2a>
 8005306:	89ab      	ldrh	r3, [r5, #12]
 8005308:	059a      	lsls	r2, r3, #22
 800530a:	d402      	bmi.n	8005312 <_vfiprintf_r+0x2a>
 800530c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800530e:	f7ff fec6 	bl	800509e <__retarget_lock_acquire_recursive>
 8005312:	89ab      	ldrh	r3, [r5, #12]
 8005314:	071b      	lsls	r3, r3, #28
 8005316:	d501      	bpl.n	800531c <_vfiprintf_r+0x34>
 8005318:	692b      	ldr	r3, [r5, #16]
 800531a:	b99b      	cbnz	r3, 8005344 <_vfiprintf_r+0x5c>
 800531c:	4629      	mov	r1, r5
 800531e:	4630      	mov	r0, r6
 8005320:	f000 fb72 	bl	8005a08 <__swsetup_r>
 8005324:	b170      	cbz	r0, 8005344 <_vfiprintf_r+0x5c>
 8005326:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005328:	07dc      	lsls	r4, r3, #31
 800532a:	d504      	bpl.n	8005336 <_vfiprintf_r+0x4e>
 800532c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005330:	b01d      	add	sp, #116	@ 0x74
 8005332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005336:	89ab      	ldrh	r3, [r5, #12]
 8005338:	0598      	lsls	r0, r3, #22
 800533a:	d4f7      	bmi.n	800532c <_vfiprintf_r+0x44>
 800533c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800533e:	f7ff feaf 	bl	80050a0 <__retarget_lock_release_recursive>
 8005342:	e7f3      	b.n	800532c <_vfiprintf_r+0x44>
 8005344:	2300      	movs	r3, #0
 8005346:	9309      	str	r3, [sp, #36]	@ 0x24
 8005348:	2320      	movs	r3, #32
 800534a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800534e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005352:	2330      	movs	r3, #48	@ 0x30
 8005354:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005504 <_vfiprintf_r+0x21c>
 8005358:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800535c:	f04f 0901 	mov.w	r9, #1
 8005360:	4623      	mov	r3, r4
 8005362:	469a      	mov	sl, r3
 8005364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005368:	b10a      	cbz	r2, 800536e <_vfiprintf_r+0x86>
 800536a:	2a25      	cmp	r2, #37	@ 0x25
 800536c:	d1f9      	bne.n	8005362 <_vfiprintf_r+0x7a>
 800536e:	ebba 0b04 	subs.w	fp, sl, r4
 8005372:	d00b      	beq.n	800538c <_vfiprintf_r+0xa4>
 8005374:	465b      	mov	r3, fp
 8005376:	4622      	mov	r2, r4
 8005378:	4629      	mov	r1, r5
 800537a:	4630      	mov	r0, r6
 800537c:	f7ff ffa1 	bl	80052c2 <__sfputs_r>
 8005380:	3001      	adds	r0, #1
 8005382:	f000 80a7 	beq.w	80054d4 <_vfiprintf_r+0x1ec>
 8005386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005388:	445a      	add	r2, fp
 800538a:	9209      	str	r2, [sp, #36]	@ 0x24
 800538c:	f89a 3000 	ldrb.w	r3, [sl]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 809f 	beq.w	80054d4 <_vfiprintf_r+0x1ec>
 8005396:	2300      	movs	r3, #0
 8005398:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800539c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053a0:	f10a 0a01 	add.w	sl, sl, #1
 80053a4:	9304      	str	r3, [sp, #16]
 80053a6:	9307      	str	r3, [sp, #28]
 80053a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80053ae:	4654      	mov	r4, sl
 80053b0:	2205      	movs	r2, #5
 80053b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b6:	4853      	ldr	r0, [pc, #332]	@ (8005504 <_vfiprintf_r+0x21c>)
 80053b8:	f7fa ff32 	bl	8000220 <memchr>
 80053bc:	9a04      	ldr	r2, [sp, #16]
 80053be:	b9d8      	cbnz	r0, 80053f8 <_vfiprintf_r+0x110>
 80053c0:	06d1      	lsls	r1, r2, #27
 80053c2:	bf44      	itt	mi
 80053c4:	2320      	movmi	r3, #32
 80053c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053ca:	0713      	lsls	r3, r2, #28
 80053cc:	bf44      	itt	mi
 80053ce:	232b      	movmi	r3, #43	@ 0x2b
 80053d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053d4:	f89a 3000 	ldrb.w	r3, [sl]
 80053d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80053da:	d015      	beq.n	8005408 <_vfiprintf_r+0x120>
 80053dc:	9a07      	ldr	r2, [sp, #28]
 80053de:	4654      	mov	r4, sl
 80053e0:	2000      	movs	r0, #0
 80053e2:	f04f 0c0a 	mov.w	ip, #10
 80053e6:	4621      	mov	r1, r4
 80053e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ec:	3b30      	subs	r3, #48	@ 0x30
 80053ee:	2b09      	cmp	r3, #9
 80053f0:	d94b      	bls.n	800548a <_vfiprintf_r+0x1a2>
 80053f2:	b1b0      	cbz	r0, 8005422 <_vfiprintf_r+0x13a>
 80053f4:	9207      	str	r2, [sp, #28]
 80053f6:	e014      	b.n	8005422 <_vfiprintf_r+0x13a>
 80053f8:	eba0 0308 	sub.w	r3, r0, r8
 80053fc:	fa09 f303 	lsl.w	r3, r9, r3
 8005400:	4313      	orrs	r3, r2
 8005402:	9304      	str	r3, [sp, #16]
 8005404:	46a2      	mov	sl, r4
 8005406:	e7d2      	b.n	80053ae <_vfiprintf_r+0xc6>
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	1d19      	adds	r1, r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	9103      	str	r1, [sp, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	bfbb      	ittet	lt
 8005414:	425b      	neglt	r3, r3
 8005416:	f042 0202 	orrlt.w	r2, r2, #2
 800541a:	9307      	strge	r3, [sp, #28]
 800541c:	9307      	strlt	r3, [sp, #28]
 800541e:	bfb8      	it	lt
 8005420:	9204      	strlt	r2, [sp, #16]
 8005422:	7823      	ldrb	r3, [r4, #0]
 8005424:	2b2e      	cmp	r3, #46	@ 0x2e
 8005426:	d10a      	bne.n	800543e <_vfiprintf_r+0x156>
 8005428:	7863      	ldrb	r3, [r4, #1]
 800542a:	2b2a      	cmp	r3, #42	@ 0x2a
 800542c:	d132      	bne.n	8005494 <_vfiprintf_r+0x1ac>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	1d1a      	adds	r2, r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	9203      	str	r2, [sp, #12]
 8005436:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800543a:	3402      	adds	r4, #2
 800543c:	9305      	str	r3, [sp, #20]
 800543e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005514 <_vfiprintf_r+0x22c>
 8005442:	7821      	ldrb	r1, [r4, #0]
 8005444:	2203      	movs	r2, #3
 8005446:	4650      	mov	r0, sl
 8005448:	f7fa feea 	bl	8000220 <memchr>
 800544c:	b138      	cbz	r0, 800545e <_vfiprintf_r+0x176>
 800544e:	9b04      	ldr	r3, [sp, #16]
 8005450:	eba0 000a 	sub.w	r0, r0, sl
 8005454:	2240      	movs	r2, #64	@ 0x40
 8005456:	4082      	lsls	r2, r0
 8005458:	4313      	orrs	r3, r2
 800545a:	3401      	adds	r4, #1
 800545c:	9304      	str	r3, [sp, #16]
 800545e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005462:	4829      	ldr	r0, [pc, #164]	@ (8005508 <_vfiprintf_r+0x220>)
 8005464:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005468:	2206      	movs	r2, #6
 800546a:	f7fa fed9 	bl	8000220 <memchr>
 800546e:	2800      	cmp	r0, #0
 8005470:	d03f      	beq.n	80054f2 <_vfiprintf_r+0x20a>
 8005472:	4b26      	ldr	r3, [pc, #152]	@ (800550c <_vfiprintf_r+0x224>)
 8005474:	bb1b      	cbnz	r3, 80054be <_vfiprintf_r+0x1d6>
 8005476:	9b03      	ldr	r3, [sp, #12]
 8005478:	3307      	adds	r3, #7
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	3308      	adds	r3, #8
 8005480:	9303      	str	r3, [sp, #12]
 8005482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005484:	443b      	add	r3, r7
 8005486:	9309      	str	r3, [sp, #36]	@ 0x24
 8005488:	e76a      	b.n	8005360 <_vfiprintf_r+0x78>
 800548a:	fb0c 3202 	mla	r2, ip, r2, r3
 800548e:	460c      	mov	r4, r1
 8005490:	2001      	movs	r0, #1
 8005492:	e7a8      	b.n	80053e6 <_vfiprintf_r+0xfe>
 8005494:	2300      	movs	r3, #0
 8005496:	3401      	adds	r4, #1
 8005498:	9305      	str	r3, [sp, #20]
 800549a:	4619      	mov	r1, r3
 800549c:	f04f 0c0a 	mov.w	ip, #10
 80054a0:	4620      	mov	r0, r4
 80054a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054a6:	3a30      	subs	r2, #48	@ 0x30
 80054a8:	2a09      	cmp	r2, #9
 80054aa:	d903      	bls.n	80054b4 <_vfiprintf_r+0x1cc>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0c6      	beq.n	800543e <_vfiprintf_r+0x156>
 80054b0:	9105      	str	r1, [sp, #20]
 80054b2:	e7c4      	b.n	800543e <_vfiprintf_r+0x156>
 80054b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80054b8:	4604      	mov	r4, r0
 80054ba:	2301      	movs	r3, #1
 80054bc:	e7f0      	b.n	80054a0 <_vfiprintf_r+0x1b8>
 80054be:	ab03      	add	r3, sp, #12
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	462a      	mov	r2, r5
 80054c4:	4b12      	ldr	r3, [pc, #72]	@ (8005510 <_vfiprintf_r+0x228>)
 80054c6:	a904      	add	r1, sp, #16
 80054c8:	4630      	mov	r0, r6
 80054ca:	f3af 8000 	nop.w
 80054ce:	4607      	mov	r7, r0
 80054d0:	1c78      	adds	r0, r7, #1
 80054d2:	d1d6      	bne.n	8005482 <_vfiprintf_r+0x19a>
 80054d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054d6:	07d9      	lsls	r1, r3, #31
 80054d8:	d405      	bmi.n	80054e6 <_vfiprintf_r+0x1fe>
 80054da:	89ab      	ldrh	r3, [r5, #12]
 80054dc:	059a      	lsls	r2, r3, #22
 80054de:	d402      	bmi.n	80054e6 <_vfiprintf_r+0x1fe>
 80054e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054e2:	f7ff fddd 	bl	80050a0 <__retarget_lock_release_recursive>
 80054e6:	89ab      	ldrh	r3, [r5, #12]
 80054e8:	065b      	lsls	r3, r3, #25
 80054ea:	f53f af1f 	bmi.w	800532c <_vfiprintf_r+0x44>
 80054ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054f0:	e71e      	b.n	8005330 <_vfiprintf_r+0x48>
 80054f2:	ab03      	add	r3, sp, #12
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	462a      	mov	r2, r5
 80054f8:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <_vfiprintf_r+0x228>)
 80054fa:	a904      	add	r1, sp, #16
 80054fc:	4630      	mov	r0, r6
 80054fe:	f000 f879 	bl	80055f4 <_printf_i>
 8005502:	e7e4      	b.n	80054ce <_vfiprintf_r+0x1e6>
 8005504:	08005cb0 	.word	0x08005cb0
 8005508:	08005cba 	.word	0x08005cba
 800550c:	00000000 	.word	0x00000000
 8005510:	080052c3 	.word	0x080052c3
 8005514:	08005cb6 	.word	0x08005cb6

08005518 <_printf_common>:
 8005518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	4616      	mov	r6, r2
 800551e:	4698      	mov	r8, r3
 8005520:	688a      	ldr	r2, [r1, #8]
 8005522:	690b      	ldr	r3, [r1, #16]
 8005524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005528:	4293      	cmp	r3, r2
 800552a:	bfb8      	it	lt
 800552c:	4613      	movlt	r3, r2
 800552e:	6033      	str	r3, [r6, #0]
 8005530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005534:	4607      	mov	r7, r0
 8005536:	460c      	mov	r4, r1
 8005538:	b10a      	cbz	r2, 800553e <_printf_common+0x26>
 800553a:	3301      	adds	r3, #1
 800553c:	6033      	str	r3, [r6, #0]
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	0699      	lsls	r1, r3, #26
 8005542:	bf42      	ittt	mi
 8005544:	6833      	ldrmi	r3, [r6, #0]
 8005546:	3302      	addmi	r3, #2
 8005548:	6033      	strmi	r3, [r6, #0]
 800554a:	6825      	ldr	r5, [r4, #0]
 800554c:	f015 0506 	ands.w	r5, r5, #6
 8005550:	d106      	bne.n	8005560 <_printf_common+0x48>
 8005552:	f104 0a19 	add.w	sl, r4, #25
 8005556:	68e3      	ldr	r3, [r4, #12]
 8005558:	6832      	ldr	r2, [r6, #0]
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	42ab      	cmp	r3, r5
 800555e:	dc26      	bgt.n	80055ae <_printf_common+0x96>
 8005560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	3b00      	subs	r3, #0
 8005568:	bf18      	it	ne
 800556a:	2301      	movne	r3, #1
 800556c:	0692      	lsls	r2, r2, #26
 800556e:	d42b      	bmi.n	80055c8 <_printf_common+0xb0>
 8005570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005574:	4641      	mov	r1, r8
 8005576:	4638      	mov	r0, r7
 8005578:	47c8      	blx	r9
 800557a:	3001      	adds	r0, #1
 800557c:	d01e      	beq.n	80055bc <_printf_common+0xa4>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	6922      	ldr	r2, [r4, #16]
 8005582:	f003 0306 	and.w	r3, r3, #6
 8005586:	2b04      	cmp	r3, #4
 8005588:	bf02      	ittt	eq
 800558a:	68e5      	ldreq	r5, [r4, #12]
 800558c:	6833      	ldreq	r3, [r6, #0]
 800558e:	1aed      	subeq	r5, r5, r3
 8005590:	68a3      	ldr	r3, [r4, #8]
 8005592:	bf0c      	ite	eq
 8005594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005598:	2500      	movne	r5, #0
 800559a:	4293      	cmp	r3, r2
 800559c:	bfc4      	itt	gt
 800559e:	1a9b      	subgt	r3, r3, r2
 80055a0:	18ed      	addgt	r5, r5, r3
 80055a2:	2600      	movs	r6, #0
 80055a4:	341a      	adds	r4, #26
 80055a6:	42b5      	cmp	r5, r6
 80055a8:	d11a      	bne.n	80055e0 <_printf_common+0xc8>
 80055aa:	2000      	movs	r0, #0
 80055ac:	e008      	b.n	80055c0 <_printf_common+0xa8>
 80055ae:	2301      	movs	r3, #1
 80055b0:	4652      	mov	r2, sl
 80055b2:	4641      	mov	r1, r8
 80055b4:	4638      	mov	r0, r7
 80055b6:	47c8      	blx	r9
 80055b8:	3001      	adds	r0, #1
 80055ba:	d103      	bne.n	80055c4 <_printf_common+0xac>
 80055bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c4:	3501      	adds	r5, #1
 80055c6:	e7c6      	b.n	8005556 <_printf_common+0x3e>
 80055c8:	18e1      	adds	r1, r4, r3
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	2030      	movs	r0, #48	@ 0x30
 80055ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055d2:	4422      	add	r2, r4
 80055d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055dc:	3302      	adds	r3, #2
 80055de:	e7c7      	b.n	8005570 <_printf_common+0x58>
 80055e0:	2301      	movs	r3, #1
 80055e2:	4622      	mov	r2, r4
 80055e4:	4641      	mov	r1, r8
 80055e6:	4638      	mov	r0, r7
 80055e8:	47c8      	blx	r9
 80055ea:	3001      	adds	r0, #1
 80055ec:	d0e6      	beq.n	80055bc <_printf_common+0xa4>
 80055ee:	3601      	adds	r6, #1
 80055f0:	e7d9      	b.n	80055a6 <_printf_common+0x8e>
	...

080055f4 <_printf_i>:
 80055f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055f8:	7e0f      	ldrb	r7, [r1, #24]
 80055fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055fc:	2f78      	cmp	r7, #120	@ 0x78
 80055fe:	4691      	mov	r9, r2
 8005600:	4680      	mov	r8, r0
 8005602:	460c      	mov	r4, r1
 8005604:	469a      	mov	sl, r3
 8005606:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800560a:	d807      	bhi.n	800561c <_printf_i+0x28>
 800560c:	2f62      	cmp	r7, #98	@ 0x62
 800560e:	d80a      	bhi.n	8005626 <_printf_i+0x32>
 8005610:	2f00      	cmp	r7, #0
 8005612:	f000 80d2 	beq.w	80057ba <_printf_i+0x1c6>
 8005616:	2f58      	cmp	r7, #88	@ 0x58
 8005618:	f000 80b9 	beq.w	800578e <_printf_i+0x19a>
 800561c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005620:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005624:	e03a      	b.n	800569c <_printf_i+0xa8>
 8005626:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800562a:	2b15      	cmp	r3, #21
 800562c:	d8f6      	bhi.n	800561c <_printf_i+0x28>
 800562e:	a101      	add	r1, pc, #4	@ (adr r1, 8005634 <_printf_i+0x40>)
 8005630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005634:	0800568d 	.word	0x0800568d
 8005638:	080056a1 	.word	0x080056a1
 800563c:	0800561d 	.word	0x0800561d
 8005640:	0800561d 	.word	0x0800561d
 8005644:	0800561d 	.word	0x0800561d
 8005648:	0800561d 	.word	0x0800561d
 800564c:	080056a1 	.word	0x080056a1
 8005650:	0800561d 	.word	0x0800561d
 8005654:	0800561d 	.word	0x0800561d
 8005658:	0800561d 	.word	0x0800561d
 800565c:	0800561d 	.word	0x0800561d
 8005660:	080057a1 	.word	0x080057a1
 8005664:	080056cb 	.word	0x080056cb
 8005668:	0800575b 	.word	0x0800575b
 800566c:	0800561d 	.word	0x0800561d
 8005670:	0800561d 	.word	0x0800561d
 8005674:	080057c3 	.word	0x080057c3
 8005678:	0800561d 	.word	0x0800561d
 800567c:	080056cb 	.word	0x080056cb
 8005680:	0800561d 	.word	0x0800561d
 8005684:	0800561d 	.word	0x0800561d
 8005688:	08005763 	.word	0x08005763
 800568c:	6833      	ldr	r3, [r6, #0]
 800568e:	1d1a      	adds	r2, r3, #4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6032      	str	r2, [r6, #0]
 8005694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005698:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800569c:	2301      	movs	r3, #1
 800569e:	e09d      	b.n	80057dc <_printf_i+0x1e8>
 80056a0:	6833      	ldr	r3, [r6, #0]
 80056a2:	6820      	ldr	r0, [r4, #0]
 80056a4:	1d19      	adds	r1, r3, #4
 80056a6:	6031      	str	r1, [r6, #0]
 80056a8:	0606      	lsls	r6, r0, #24
 80056aa:	d501      	bpl.n	80056b0 <_printf_i+0xbc>
 80056ac:	681d      	ldr	r5, [r3, #0]
 80056ae:	e003      	b.n	80056b8 <_printf_i+0xc4>
 80056b0:	0645      	lsls	r5, r0, #25
 80056b2:	d5fb      	bpl.n	80056ac <_printf_i+0xb8>
 80056b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056b8:	2d00      	cmp	r5, #0
 80056ba:	da03      	bge.n	80056c4 <_printf_i+0xd0>
 80056bc:	232d      	movs	r3, #45	@ 0x2d
 80056be:	426d      	negs	r5, r5
 80056c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056c4:	4859      	ldr	r0, [pc, #356]	@ (800582c <_printf_i+0x238>)
 80056c6:	230a      	movs	r3, #10
 80056c8:	e011      	b.n	80056ee <_printf_i+0xfa>
 80056ca:	6821      	ldr	r1, [r4, #0]
 80056cc:	6833      	ldr	r3, [r6, #0]
 80056ce:	0608      	lsls	r0, r1, #24
 80056d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80056d4:	d402      	bmi.n	80056dc <_printf_i+0xe8>
 80056d6:	0649      	lsls	r1, r1, #25
 80056d8:	bf48      	it	mi
 80056da:	b2ad      	uxthmi	r5, r5
 80056dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80056de:	4853      	ldr	r0, [pc, #332]	@ (800582c <_printf_i+0x238>)
 80056e0:	6033      	str	r3, [r6, #0]
 80056e2:	bf14      	ite	ne
 80056e4:	230a      	movne	r3, #10
 80056e6:	2308      	moveq	r3, #8
 80056e8:	2100      	movs	r1, #0
 80056ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056ee:	6866      	ldr	r6, [r4, #4]
 80056f0:	60a6      	str	r6, [r4, #8]
 80056f2:	2e00      	cmp	r6, #0
 80056f4:	bfa2      	ittt	ge
 80056f6:	6821      	ldrge	r1, [r4, #0]
 80056f8:	f021 0104 	bicge.w	r1, r1, #4
 80056fc:	6021      	strge	r1, [r4, #0]
 80056fe:	b90d      	cbnz	r5, 8005704 <_printf_i+0x110>
 8005700:	2e00      	cmp	r6, #0
 8005702:	d04b      	beq.n	800579c <_printf_i+0x1a8>
 8005704:	4616      	mov	r6, r2
 8005706:	fbb5 f1f3 	udiv	r1, r5, r3
 800570a:	fb03 5711 	mls	r7, r3, r1, r5
 800570e:	5dc7      	ldrb	r7, [r0, r7]
 8005710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005714:	462f      	mov	r7, r5
 8005716:	42bb      	cmp	r3, r7
 8005718:	460d      	mov	r5, r1
 800571a:	d9f4      	bls.n	8005706 <_printf_i+0x112>
 800571c:	2b08      	cmp	r3, #8
 800571e:	d10b      	bne.n	8005738 <_printf_i+0x144>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	07df      	lsls	r7, r3, #31
 8005724:	d508      	bpl.n	8005738 <_printf_i+0x144>
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	6861      	ldr	r1, [r4, #4]
 800572a:	4299      	cmp	r1, r3
 800572c:	bfde      	ittt	le
 800572e:	2330      	movle	r3, #48	@ 0x30
 8005730:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005734:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005738:	1b92      	subs	r2, r2, r6
 800573a:	6122      	str	r2, [r4, #16]
 800573c:	f8cd a000 	str.w	sl, [sp]
 8005740:	464b      	mov	r3, r9
 8005742:	aa03      	add	r2, sp, #12
 8005744:	4621      	mov	r1, r4
 8005746:	4640      	mov	r0, r8
 8005748:	f7ff fee6 	bl	8005518 <_printf_common>
 800574c:	3001      	adds	r0, #1
 800574e:	d14a      	bne.n	80057e6 <_printf_i+0x1f2>
 8005750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005754:	b004      	add	sp, #16
 8005756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	f043 0320 	orr.w	r3, r3, #32
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	4833      	ldr	r0, [pc, #204]	@ (8005830 <_printf_i+0x23c>)
 8005764:	2778      	movs	r7, #120	@ 0x78
 8005766:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	6831      	ldr	r1, [r6, #0]
 800576e:	061f      	lsls	r7, r3, #24
 8005770:	f851 5b04 	ldr.w	r5, [r1], #4
 8005774:	d402      	bmi.n	800577c <_printf_i+0x188>
 8005776:	065f      	lsls	r7, r3, #25
 8005778:	bf48      	it	mi
 800577a:	b2ad      	uxthmi	r5, r5
 800577c:	6031      	str	r1, [r6, #0]
 800577e:	07d9      	lsls	r1, r3, #31
 8005780:	bf44      	itt	mi
 8005782:	f043 0320 	orrmi.w	r3, r3, #32
 8005786:	6023      	strmi	r3, [r4, #0]
 8005788:	b11d      	cbz	r5, 8005792 <_printf_i+0x19e>
 800578a:	2310      	movs	r3, #16
 800578c:	e7ac      	b.n	80056e8 <_printf_i+0xf4>
 800578e:	4827      	ldr	r0, [pc, #156]	@ (800582c <_printf_i+0x238>)
 8005790:	e7e9      	b.n	8005766 <_printf_i+0x172>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	f023 0320 	bic.w	r3, r3, #32
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	e7f6      	b.n	800578a <_printf_i+0x196>
 800579c:	4616      	mov	r6, r2
 800579e:	e7bd      	b.n	800571c <_printf_i+0x128>
 80057a0:	6833      	ldr	r3, [r6, #0]
 80057a2:	6825      	ldr	r5, [r4, #0]
 80057a4:	6961      	ldr	r1, [r4, #20]
 80057a6:	1d18      	adds	r0, r3, #4
 80057a8:	6030      	str	r0, [r6, #0]
 80057aa:	062e      	lsls	r6, r5, #24
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	d501      	bpl.n	80057b4 <_printf_i+0x1c0>
 80057b0:	6019      	str	r1, [r3, #0]
 80057b2:	e002      	b.n	80057ba <_printf_i+0x1c6>
 80057b4:	0668      	lsls	r0, r5, #25
 80057b6:	d5fb      	bpl.n	80057b0 <_printf_i+0x1bc>
 80057b8:	8019      	strh	r1, [r3, #0]
 80057ba:	2300      	movs	r3, #0
 80057bc:	6123      	str	r3, [r4, #16]
 80057be:	4616      	mov	r6, r2
 80057c0:	e7bc      	b.n	800573c <_printf_i+0x148>
 80057c2:	6833      	ldr	r3, [r6, #0]
 80057c4:	1d1a      	adds	r2, r3, #4
 80057c6:	6032      	str	r2, [r6, #0]
 80057c8:	681e      	ldr	r6, [r3, #0]
 80057ca:	6862      	ldr	r2, [r4, #4]
 80057cc:	2100      	movs	r1, #0
 80057ce:	4630      	mov	r0, r6
 80057d0:	f7fa fd26 	bl	8000220 <memchr>
 80057d4:	b108      	cbz	r0, 80057da <_printf_i+0x1e6>
 80057d6:	1b80      	subs	r0, r0, r6
 80057d8:	6060      	str	r0, [r4, #4]
 80057da:	6863      	ldr	r3, [r4, #4]
 80057dc:	6123      	str	r3, [r4, #16]
 80057de:	2300      	movs	r3, #0
 80057e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057e4:	e7aa      	b.n	800573c <_printf_i+0x148>
 80057e6:	6923      	ldr	r3, [r4, #16]
 80057e8:	4632      	mov	r2, r6
 80057ea:	4649      	mov	r1, r9
 80057ec:	4640      	mov	r0, r8
 80057ee:	47d0      	blx	sl
 80057f0:	3001      	adds	r0, #1
 80057f2:	d0ad      	beq.n	8005750 <_printf_i+0x15c>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	079b      	lsls	r3, r3, #30
 80057f8:	d413      	bmi.n	8005822 <_printf_i+0x22e>
 80057fa:	68e0      	ldr	r0, [r4, #12]
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	4298      	cmp	r0, r3
 8005800:	bfb8      	it	lt
 8005802:	4618      	movlt	r0, r3
 8005804:	e7a6      	b.n	8005754 <_printf_i+0x160>
 8005806:	2301      	movs	r3, #1
 8005808:	4632      	mov	r2, r6
 800580a:	4649      	mov	r1, r9
 800580c:	4640      	mov	r0, r8
 800580e:	47d0      	blx	sl
 8005810:	3001      	adds	r0, #1
 8005812:	d09d      	beq.n	8005750 <_printf_i+0x15c>
 8005814:	3501      	adds	r5, #1
 8005816:	68e3      	ldr	r3, [r4, #12]
 8005818:	9903      	ldr	r1, [sp, #12]
 800581a:	1a5b      	subs	r3, r3, r1
 800581c:	42ab      	cmp	r3, r5
 800581e:	dcf2      	bgt.n	8005806 <_printf_i+0x212>
 8005820:	e7eb      	b.n	80057fa <_printf_i+0x206>
 8005822:	2500      	movs	r5, #0
 8005824:	f104 0619 	add.w	r6, r4, #25
 8005828:	e7f5      	b.n	8005816 <_printf_i+0x222>
 800582a:	bf00      	nop
 800582c:	08005cc1 	.word	0x08005cc1
 8005830:	08005cd2 	.word	0x08005cd2

08005834 <__sflush_r>:
 8005834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800583c:	0716      	lsls	r6, r2, #28
 800583e:	4605      	mov	r5, r0
 8005840:	460c      	mov	r4, r1
 8005842:	d454      	bmi.n	80058ee <__sflush_r+0xba>
 8005844:	684b      	ldr	r3, [r1, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	dc02      	bgt.n	8005850 <__sflush_r+0x1c>
 800584a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	dd48      	ble.n	80058e2 <__sflush_r+0xae>
 8005850:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005852:	2e00      	cmp	r6, #0
 8005854:	d045      	beq.n	80058e2 <__sflush_r+0xae>
 8005856:	2300      	movs	r3, #0
 8005858:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800585c:	682f      	ldr	r7, [r5, #0]
 800585e:	6a21      	ldr	r1, [r4, #32]
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	d030      	beq.n	80058c6 <__sflush_r+0x92>
 8005864:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005866:	89a3      	ldrh	r3, [r4, #12]
 8005868:	0759      	lsls	r1, r3, #29
 800586a:	d505      	bpl.n	8005878 <__sflush_r+0x44>
 800586c:	6863      	ldr	r3, [r4, #4]
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005872:	b10b      	cbz	r3, 8005878 <__sflush_r+0x44>
 8005874:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005876:	1ad2      	subs	r2, r2, r3
 8005878:	2300      	movs	r3, #0
 800587a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800587c:	6a21      	ldr	r1, [r4, #32]
 800587e:	4628      	mov	r0, r5
 8005880:	47b0      	blx	r6
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	d106      	bne.n	8005896 <__sflush_r+0x62>
 8005888:	6829      	ldr	r1, [r5, #0]
 800588a:	291d      	cmp	r1, #29
 800588c:	d82b      	bhi.n	80058e6 <__sflush_r+0xb2>
 800588e:	4a2a      	ldr	r2, [pc, #168]	@ (8005938 <__sflush_r+0x104>)
 8005890:	410a      	asrs	r2, r1
 8005892:	07d6      	lsls	r6, r2, #31
 8005894:	d427      	bmi.n	80058e6 <__sflush_r+0xb2>
 8005896:	2200      	movs	r2, #0
 8005898:	6062      	str	r2, [r4, #4]
 800589a:	04d9      	lsls	r1, r3, #19
 800589c:	6922      	ldr	r2, [r4, #16]
 800589e:	6022      	str	r2, [r4, #0]
 80058a0:	d504      	bpl.n	80058ac <__sflush_r+0x78>
 80058a2:	1c42      	adds	r2, r0, #1
 80058a4:	d101      	bne.n	80058aa <__sflush_r+0x76>
 80058a6:	682b      	ldr	r3, [r5, #0]
 80058a8:	b903      	cbnz	r3, 80058ac <__sflush_r+0x78>
 80058aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80058ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058ae:	602f      	str	r7, [r5, #0]
 80058b0:	b1b9      	cbz	r1, 80058e2 <__sflush_r+0xae>
 80058b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058b6:	4299      	cmp	r1, r3
 80058b8:	d002      	beq.n	80058c0 <__sflush_r+0x8c>
 80058ba:	4628      	mov	r0, r5
 80058bc:	f7ff fbf2 	bl	80050a4 <_free_r>
 80058c0:	2300      	movs	r3, #0
 80058c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80058c4:	e00d      	b.n	80058e2 <__sflush_r+0xae>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b0      	blx	r6
 80058cc:	4602      	mov	r2, r0
 80058ce:	1c50      	adds	r0, r2, #1
 80058d0:	d1c9      	bne.n	8005866 <__sflush_r+0x32>
 80058d2:	682b      	ldr	r3, [r5, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0c6      	beq.n	8005866 <__sflush_r+0x32>
 80058d8:	2b1d      	cmp	r3, #29
 80058da:	d001      	beq.n	80058e0 <__sflush_r+0xac>
 80058dc:	2b16      	cmp	r3, #22
 80058de:	d11e      	bne.n	800591e <__sflush_r+0xea>
 80058e0:	602f      	str	r7, [r5, #0]
 80058e2:	2000      	movs	r0, #0
 80058e4:	e022      	b.n	800592c <__sflush_r+0xf8>
 80058e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058ea:	b21b      	sxth	r3, r3
 80058ec:	e01b      	b.n	8005926 <__sflush_r+0xf2>
 80058ee:	690f      	ldr	r7, [r1, #16]
 80058f0:	2f00      	cmp	r7, #0
 80058f2:	d0f6      	beq.n	80058e2 <__sflush_r+0xae>
 80058f4:	0793      	lsls	r3, r2, #30
 80058f6:	680e      	ldr	r6, [r1, #0]
 80058f8:	bf08      	it	eq
 80058fa:	694b      	ldreq	r3, [r1, #20]
 80058fc:	600f      	str	r7, [r1, #0]
 80058fe:	bf18      	it	ne
 8005900:	2300      	movne	r3, #0
 8005902:	eba6 0807 	sub.w	r8, r6, r7
 8005906:	608b      	str	r3, [r1, #8]
 8005908:	f1b8 0f00 	cmp.w	r8, #0
 800590c:	dde9      	ble.n	80058e2 <__sflush_r+0xae>
 800590e:	6a21      	ldr	r1, [r4, #32]
 8005910:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005912:	4643      	mov	r3, r8
 8005914:	463a      	mov	r2, r7
 8005916:	4628      	mov	r0, r5
 8005918:	47b0      	blx	r6
 800591a:	2800      	cmp	r0, #0
 800591c:	dc08      	bgt.n	8005930 <__sflush_r+0xfc>
 800591e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005926:	81a3      	strh	r3, [r4, #12]
 8005928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800592c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005930:	4407      	add	r7, r0
 8005932:	eba8 0800 	sub.w	r8, r8, r0
 8005936:	e7e7      	b.n	8005908 <__sflush_r+0xd4>
 8005938:	dfbffffe 	.word	0xdfbffffe

0800593c <_fflush_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	690b      	ldr	r3, [r1, #16]
 8005940:	4605      	mov	r5, r0
 8005942:	460c      	mov	r4, r1
 8005944:	b913      	cbnz	r3, 800594c <_fflush_r+0x10>
 8005946:	2500      	movs	r5, #0
 8005948:	4628      	mov	r0, r5
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	b118      	cbz	r0, 8005956 <_fflush_r+0x1a>
 800594e:	6a03      	ldr	r3, [r0, #32]
 8005950:	b90b      	cbnz	r3, 8005956 <_fflush_r+0x1a>
 8005952:	f7ff fa9f 	bl	8004e94 <__sinit>
 8005956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0f3      	beq.n	8005946 <_fflush_r+0xa>
 800595e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005960:	07d0      	lsls	r0, r2, #31
 8005962:	d404      	bmi.n	800596e <_fflush_r+0x32>
 8005964:	0599      	lsls	r1, r3, #22
 8005966:	d402      	bmi.n	800596e <_fflush_r+0x32>
 8005968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800596a:	f7ff fb98 	bl	800509e <__retarget_lock_acquire_recursive>
 800596e:	4628      	mov	r0, r5
 8005970:	4621      	mov	r1, r4
 8005972:	f7ff ff5f 	bl	8005834 <__sflush_r>
 8005976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005978:	07da      	lsls	r2, r3, #31
 800597a:	4605      	mov	r5, r0
 800597c:	d4e4      	bmi.n	8005948 <_fflush_r+0xc>
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	059b      	lsls	r3, r3, #22
 8005982:	d4e1      	bmi.n	8005948 <_fflush_r+0xc>
 8005984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005986:	f7ff fb8b 	bl	80050a0 <__retarget_lock_release_recursive>
 800598a:	e7dd      	b.n	8005948 <_fflush_r+0xc>

0800598c <__swbuf_r>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	460e      	mov	r6, r1
 8005990:	4614      	mov	r4, r2
 8005992:	4605      	mov	r5, r0
 8005994:	b118      	cbz	r0, 800599e <__swbuf_r+0x12>
 8005996:	6a03      	ldr	r3, [r0, #32]
 8005998:	b90b      	cbnz	r3, 800599e <__swbuf_r+0x12>
 800599a:	f7ff fa7b 	bl	8004e94 <__sinit>
 800599e:	69a3      	ldr	r3, [r4, #24]
 80059a0:	60a3      	str	r3, [r4, #8]
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	071a      	lsls	r2, r3, #28
 80059a6:	d501      	bpl.n	80059ac <__swbuf_r+0x20>
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	b943      	cbnz	r3, 80059be <__swbuf_r+0x32>
 80059ac:	4621      	mov	r1, r4
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 f82a 	bl	8005a08 <__swsetup_r>
 80059b4:	b118      	cbz	r0, 80059be <__swbuf_r+0x32>
 80059b6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80059ba:	4638      	mov	r0, r7
 80059bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	6922      	ldr	r2, [r4, #16]
 80059c2:	1a98      	subs	r0, r3, r2
 80059c4:	6963      	ldr	r3, [r4, #20]
 80059c6:	b2f6      	uxtb	r6, r6
 80059c8:	4283      	cmp	r3, r0
 80059ca:	4637      	mov	r7, r6
 80059cc:	dc05      	bgt.n	80059da <__swbuf_r+0x4e>
 80059ce:	4621      	mov	r1, r4
 80059d0:	4628      	mov	r0, r5
 80059d2:	f7ff ffb3 	bl	800593c <_fflush_r>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d1ed      	bne.n	80059b6 <__swbuf_r+0x2a>
 80059da:	68a3      	ldr	r3, [r4, #8]
 80059dc:	3b01      	subs	r3, #1
 80059de:	60a3      	str	r3, [r4, #8]
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	6022      	str	r2, [r4, #0]
 80059e6:	701e      	strb	r6, [r3, #0]
 80059e8:	6962      	ldr	r2, [r4, #20]
 80059ea:	1c43      	adds	r3, r0, #1
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d004      	beq.n	80059fa <__swbuf_r+0x6e>
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	07db      	lsls	r3, r3, #31
 80059f4:	d5e1      	bpl.n	80059ba <__swbuf_r+0x2e>
 80059f6:	2e0a      	cmp	r6, #10
 80059f8:	d1df      	bne.n	80059ba <__swbuf_r+0x2e>
 80059fa:	4621      	mov	r1, r4
 80059fc:	4628      	mov	r0, r5
 80059fe:	f7ff ff9d 	bl	800593c <_fflush_r>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d0d9      	beq.n	80059ba <__swbuf_r+0x2e>
 8005a06:	e7d6      	b.n	80059b6 <__swbuf_r+0x2a>

08005a08 <__swsetup_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	4b29      	ldr	r3, [pc, #164]	@ (8005ab0 <__swsetup_r+0xa8>)
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	460c      	mov	r4, r1
 8005a12:	b118      	cbz	r0, 8005a1c <__swsetup_r+0x14>
 8005a14:	6a03      	ldr	r3, [r0, #32]
 8005a16:	b90b      	cbnz	r3, 8005a1c <__swsetup_r+0x14>
 8005a18:	f7ff fa3c 	bl	8004e94 <__sinit>
 8005a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a20:	0719      	lsls	r1, r3, #28
 8005a22:	d422      	bmi.n	8005a6a <__swsetup_r+0x62>
 8005a24:	06da      	lsls	r2, r3, #27
 8005a26:	d407      	bmi.n	8005a38 <__swsetup_r+0x30>
 8005a28:	2209      	movs	r2, #9
 8005a2a:	602a      	str	r2, [r5, #0]
 8005a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a30:	81a3      	strh	r3, [r4, #12]
 8005a32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a36:	e033      	b.n	8005aa0 <__swsetup_r+0x98>
 8005a38:	0758      	lsls	r0, r3, #29
 8005a3a:	d512      	bpl.n	8005a62 <__swsetup_r+0x5a>
 8005a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a3e:	b141      	cbz	r1, 8005a52 <__swsetup_r+0x4a>
 8005a40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a44:	4299      	cmp	r1, r3
 8005a46:	d002      	beq.n	8005a4e <__swsetup_r+0x46>
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f7ff fb2b 	bl	80050a4 <_free_r>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a52:	89a3      	ldrh	r3, [r4, #12]
 8005a54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	6063      	str	r3, [r4, #4]
 8005a5e:	6923      	ldr	r3, [r4, #16]
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	f043 0308 	orr.w	r3, r3, #8
 8005a68:	81a3      	strh	r3, [r4, #12]
 8005a6a:	6923      	ldr	r3, [r4, #16]
 8005a6c:	b94b      	cbnz	r3, 8005a82 <__swsetup_r+0x7a>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a78:	d003      	beq.n	8005a82 <__swsetup_r+0x7a>
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f000 f84f 	bl	8005b20 <__smakebuf_r>
 8005a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a86:	f013 0201 	ands.w	r2, r3, #1
 8005a8a:	d00a      	beq.n	8005aa2 <__swsetup_r+0x9a>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	60a2      	str	r2, [r4, #8]
 8005a90:	6962      	ldr	r2, [r4, #20]
 8005a92:	4252      	negs	r2, r2
 8005a94:	61a2      	str	r2, [r4, #24]
 8005a96:	6922      	ldr	r2, [r4, #16]
 8005a98:	b942      	cbnz	r2, 8005aac <__swsetup_r+0xa4>
 8005a9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a9e:	d1c5      	bne.n	8005a2c <__swsetup_r+0x24>
 8005aa0:	bd38      	pop	{r3, r4, r5, pc}
 8005aa2:	0799      	lsls	r1, r3, #30
 8005aa4:	bf58      	it	pl
 8005aa6:	6962      	ldrpl	r2, [r4, #20]
 8005aa8:	60a2      	str	r2, [r4, #8]
 8005aaa:	e7f4      	b.n	8005a96 <__swsetup_r+0x8e>
 8005aac:	2000      	movs	r0, #0
 8005aae:	e7f7      	b.n	8005aa0 <__swsetup_r+0x98>
 8005ab0:	20000018 	.word	0x20000018

08005ab4 <_sbrk_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4d06      	ldr	r5, [pc, #24]	@ (8005ad0 <_sbrk_r+0x1c>)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4604      	mov	r4, r0
 8005abc:	4608      	mov	r0, r1
 8005abe:	602b      	str	r3, [r5, #0]
 8005ac0:	f7fb fc7a 	bl	80013b8 <_sbrk>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_sbrk_r+0x1a>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_sbrk_r+0x1a>
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	2000072c 	.word	0x2000072c

08005ad4 <__swhatbuf_r>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005adc:	2900      	cmp	r1, #0
 8005ade:	b096      	sub	sp, #88	@ 0x58
 8005ae0:	4615      	mov	r5, r2
 8005ae2:	461e      	mov	r6, r3
 8005ae4:	da0d      	bge.n	8005b02 <__swhatbuf_r+0x2e>
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005aec:	f04f 0100 	mov.w	r1, #0
 8005af0:	bf14      	ite	ne
 8005af2:	2340      	movne	r3, #64	@ 0x40
 8005af4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005af8:	2000      	movs	r0, #0
 8005afa:	6031      	str	r1, [r6, #0]
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	b016      	add	sp, #88	@ 0x58
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
 8005b02:	466a      	mov	r2, sp
 8005b04:	f000 f848 	bl	8005b98 <_fstat_r>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	dbec      	blt.n	8005ae6 <__swhatbuf_r+0x12>
 8005b0c:	9901      	ldr	r1, [sp, #4]
 8005b0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b16:	4259      	negs	r1, r3
 8005b18:	4159      	adcs	r1, r3
 8005b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b1e:	e7eb      	b.n	8005af8 <__swhatbuf_r+0x24>

08005b20 <__smakebuf_r>:
 8005b20:	898b      	ldrh	r3, [r1, #12]
 8005b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b24:	079d      	lsls	r5, r3, #30
 8005b26:	4606      	mov	r6, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	d507      	bpl.n	8005b3c <__smakebuf_r+0x1c>
 8005b2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	2301      	movs	r3, #1
 8005b36:	6163      	str	r3, [r4, #20]
 8005b38:	b003      	add	sp, #12
 8005b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b3c:	ab01      	add	r3, sp, #4
 8005b3e:	466a      	mov	r2, sp
 8005b40:	f7ff ffc8 	bl	8005ad4 <__swhatbuf_r>
 8005b44:	9f00      	ldr	r7, [sp, #0]
 8005b46:	4605      	mov	r5, r0
 8005b48:	4639      	mov	r1, r7
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f7ff fb16 	bl	800517c <_malloc_r>
 8005b50:	b948      	cbnz	r0, 8005b66 <__smakebuf_r+0x46>
 8005b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b56:	059a      	lsls	r2, r3, #22
 8005b58:	d4ee      	bmi.n	8005b38 <__smakebuf_r+0x18>
 8005b5a:	f023 0303 	bic.w	r3, r3, #3
 8005b5e:	f043 0302 	orr.w	r3, r3, #2
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	e7e2      	b.n	8005b2c <__smakebuf_r+0xc>
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	6020      	str	r0, [r4, #0]
 8005b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b6e:	81a3      	strh	r3, [r4, #12]
 8005b70:	9b01      	ldr	r3, [sp, #4]
 8005b72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b76:	b15b      	cbz	r3, 8005b90 <__smakebuf_r+0x70>
 8005b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f000 f81d 	bl	8005bbc <_isatty_r>
 8005b82:	b128      	cbz	r0, 8005b90 <__smakebuf_r+0x70>
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	81a3      	strh	r3, [r4, #12]
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	431d      	orrs	r5, r3
 8005b94:	81a5      	strh	r5, [r4, #12]
 8005b96:	e7cf      	b.n	8005b38 <__smakebuf_r+0x18>

08005b98 <_fstat_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4d07      	ldr	r5, [pc, #28]	@ (8005bb8 <_fstat_r+0x20>)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	f7fb fbde 	bl	8001366 <_fstat>
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	d102      	bne.n	8005bb4 <_fstat_r+0x1c>
 8005bae:	682b      	ldr	r3, [r5, #0]
 8005bb0:	b103      	cbz	r3, 8005bb4 <_fstat_r+0x1c>
 8005bb2:	6023      	str	r3, [r4, #0]
 8005bb4:	bd38      	pop	{r3, r4, r5, pc}
 8005bb6:	bf00      	nop
 8005bb8:	2000072c 	.word	0x2000072c

08005bbc <_isatty_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4d06      	ldr	r5, [pc, #24]	@ (8005bd8 <_isatty_r+0x1c>)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	602b      	str	r3, [r5, #0]
 8005bc8:	f7fb fbdd 	bl	8001386 <_isatty>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_isatty_r+0x1a>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_isatty_r+0x1a>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	2000072c 	.word	0x2000072c

08005bdc <_init>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr

08005be8 <_fini>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr
